#ifndef __IPCSTUBS_HPP__
#define __IPCSTUBS_HPP__

#define SERVICE_MAPPING() do { \
	SERVICE("fsp-srv", nn::fssrv::sf::IFileSystemProxy); \
	SERVICE("bsd:u", nn::socket::sf::IClient); \
	SERVICE("bsd:s", nn::socket::sf::IClient); \
} while(0)

using ServiceName = uint8_t *; // uint8_t[8]
using packed_addrinfo = uint8_t;

class SmService;
namespace nn {
	using ApplicationId = uint64_t;
	using TimeSpan = uint64_t;
	using TimeSpanType = uint64_t;
}
namespace nn::account {
	using CallbackUri = uint8_t;
	using NetworkServiceAccountId = uint64_t;
	using Nickname = uint8_t *; // uint8_t[0x21]
	using NintendoAccountAuthorizationRequestParameters = uint8_t;
	using NintendoAccountId = uint64_t;
	using ProfileDigest = uint128_t;
	using RequestUrl = uint8_t;
	using SystemProgramIdentification = uint8_t;
	using Uid = uint128_t;

	class IAccountServiceForAdministrator;
	class IAccountServiceForApplication;
	class IAccountServiceForSystemService;
	class IBaasAccessTokenAccessor;
}
namespace nn::account::baas {
	class IAdministrator;
	class IFloatingRegistrationRequest;
	class IGuestLoginRequest;
	class IManagerForApplication;
	class IManagerForSystemService;
}
namespace nn::account::detail {
	using Uuid = uint128_t;

	class IAsyncContext;
	class INotifier;
	class ISessionObject;
}
namespace nn::account::http {
	class IOAuthProcedure;
}
namespace nn::account::nas {
	using NasClientInfo = uint8_t;
	using NasUserBase = uint8_t;
	using NasUserBaseForApplication = uint8_t;
	using State = uint8_t;

	class IAuthorizationRequest;
	class IOAuthProcedureForExternalNsa;
	class IOAuthProcedureForNintendoAccountLinkage;
}
namespace nn::account::profile {
	using ProfileBase = uint8_t *; // uint8_t[0x38]
	using UserData = uint8_t;

	class IProfile;
	class IProfileEditor;
}
namespace nn::ahid {
	class ICtrlSession;
	class IReadSession;
	class IServerSession;
}
namespace nn::ahid::hdr {
	class ISession;
}
namespace nn::am {
	using AppletAttribute = uint8_t;
	using AppletMessage = uint32_t;
}
namespace nn::am::service {
	using AppletIdentityInfo = uint128_t;
	using AppletKind = uint64_t;
	using AppletProcessLaunchReason = uint32_t;
	using EmulatedButtonEvent = uint32_t;
	using LibraryAppletInfo = uint64_t;
	using WindowCreationOption = uint32_t;

	class IAllSystemAppletProxiesService;
	class IAppletAccessor;
	class IApplicationAccessor;
	class IApplicationCreator;
	class IApplicationFunctions;
	class IApplicationProxy;
	class IApplicationProxyService;
	class IAudioController;
	class ICommonStateGetter;
	class IDebugFunctions;
	class IDisplayController;
	class IGlobalStateController;
	class IHomeMenuFunctions;
	class ILibraryAppletAccessor;
	class ILibraryAppletCreator;
	class ILibraryAppletProxy;
	class ILibraryAppletSelfAccessor;
	class ILockAccessor;
	class IOverlayAppletProxy;
	class IOverlayFunctions;
	class IProcessWindingController;
	class ISelfController;
	class IStorage;
	class IStorageAccessor;
	class ISystemAppletProxy;
	class ITransferStorageAccessor;
	class IWindow;
	class IWindowController;
}
namespace nn::aocsrv::detail {
	class IAddOnContentManager;
}
namespace nn::apm {
	using EventTarget = uint32_t;
	using PerformanceConfiguration = uint32_t;
	using PerformanceMode = uint32_t;
	using ThrottlingState = uint8_t *; // uint8_t[0x28]

	class IManager;
	class IManagerPrivileged;
	class ISession;
	class ISystemManager;
}
namespace nn::applet {
	using AppletResourceUserId = uint64_t;
}
namespace nn::arp::detail {
	class IReader;
	class IRegistrar;
	class IWriter;
}
namespace nn::audio::detail {
	class IAudioDebugManager;
	class IAudioDevice;
	class IAudioIn;
	class IAudioInManager;
	class IAudioInManagerForApplet;
	class IAudioInManagerForDebugger;
	class IAudioOut;
	class IAudioOutManager;
	class IAudioOutManagerForApplet;
	class IAudioOutManagerForDebugger;
	class IAudioRenderer;
	class IAudioRendererManager;
	class IAudioRendererManagerForApplet;
	class IAudioRendererManagerForDebugger;
	class IFinalOutputRecorder;
	class IFinalOutputRecorderManager;
	class IFinalOutputRecorderManagerForApplet;
	class IFinalOutputRecorderManagerForDebugger;
}
namespace nn::audioctrl::detail {
	class IAudioController;
}
namespace nn::bcat {
	using DeliveryCacheDirectoryEntry = uint8_t;
	using Digest = uint128_t;
	using DirectoryName = uint8_t *; // uint8_t[0x20]
	using FileName = uint8_t *; // uint8_t[0x20]
	using PushNotificationLog = uint8_t;
	using TaskInfo = uint8_t;
}
namespace nn::bcat::detail {
	using DeliveryCacheProgressImpl = uint8_t;
}
namespace nn::bcat::detail::ipc {
	class IBcatService;
	class IDeliveryCacheDirectoryService;
	class IDeliveryCacheFileService;
	class IDeliveryCacheProgressService;
	class IDeliveryCacheStorageService;
	class IServiceCreator;
}
namespace nn::bgtc {
	class IStateControlService;
	class ITaskService;
}
namespace nn::bluetooth {
	using Address = uint8_t *; // uint8_t[6]

	class IBluetoothDriver;
}
namespace nn::bpc {
	class IBoardPowerControlManager;
	class IRtcManager;
}
namespace nn::bsdsocket::cfg {
	class ServerInterface;
}
namespace nn::btm {
	class IBtm;
	class IBtmDebug;
	class IBtmSystem;
	class IBtmSystemCore;
}
namespace nn::capsrv {
	using ApplicationAlbumEntry = uint8_t *; // uint8_t[0x20]
}
namespace nn::capsrv::detail {
	using ScreenShotAttributeEx0 = uint8_t *; // uint8_t[0x40]
}
namespace nn::capsrv::sf {
	class IAlbumAccessorService;
	class IAlbumControlService;
	class IScreenShotApplicationService;
	class IScreenShotControlService;
	class IScreenShotService;
}
namespace nn::cec {
	class ICecManager;
}
namespace nn::codec::detail {
	class IHardwareOpusDecoder;
	class IHardwareOpusDecoderManager;
}
namespace nn::erpt::sf {
	class IContext;
	class IManager;
	class IReport;
	class ISession;
}
namespace nn::err {
	using ErrorCode = uint64_t;
}
namespace nn::es {
	class IETicketService;
}
namespace nn::eth::sf {
	class IEthInterface;
	class IEthInterfaceGroup;
}
namespace nn::eupld::sf {
	class IControl;
	class IRequest;
}
namespace nn::fan::detail {
	class IController;
	class IManager;
}
namespace nn::fatalsrv {
	class IPrivateService;
	class IService;
}
namespace nn::fgm {
	using Module = uint32_t;
}
namespace nn::fgm::sf {
	class IDebugger;
	class IRequest;
	class ISession;
}
namespace nn::friends {
	using ApplicationInfo = uint128_t;
	using ExternalApplicationCatalog = uint8_t;
	using ExternalApplicationCatalogId = uint128_t;
	using FacedFriendRequestRegistrationKey = uint8_t *; // uint8_t[0x40]
	using FriendCode = uint8_t *; // uint8_t[0x20]
	using InAppScreenName = uint8_t;
	using MiiImageUrlParam = uint128_t;
	using MiiName = uint8_t *; // uint8_t[0x20]
	using NintendoNetworkIdUserInfo = uint8_t;
	using PlayHistoryRegistrationKey = uint8_t;
	using PlayHistoryStatistics = uint128_t;
	using Relationship = uint64_t;
	using RequestId = uint64_t;
	using Url = uint8_t *; // uint8_t[0xa0]
}
namespace nn::friends::detail {
	using BlockedUserImpl = uint8_t;
	using FriendCandidateImpl = uint8_t;
	using FriendDetailedInfoImpl = uint8_t;
	using FriendImpl = uint8_t;
	using FriendRequestImpl = uint8_t;
	using FriendSettingImpl = uint8_t;
	using NintendoNetworkIdFriendImpl = uint8_t;
	using PlayHistoryImpl = uint8_t;
	using ProfileExtraImpl = uint8_t;
	using ProfileImpl = uint8_t;
	using UserPresenceImpl = uint8_t;
	using UserPresenceViewImpl = uint8_t;
	using UserSettingImpl = uint8_t;
}
namespace nn::friends::detail::ipc {
	using SizedFriendFilter = uint128_t;
	using SizedNotificationInfo = uint128_t;

	class IFriendService;
	class INotificationService;
	class IServiceCreator;
}
namespace nn::fssrv::sf {
	using Partition = uint32_t;
	using SaveCreateStruct = uint8_t *; // uint8_t[0x40]
	using SaveStruct = uint8_t *; // uint8_t[0x40]

	class IDeviceOperator;
	class IDirectory;
	class IEventNotifier;
	class IFile;
	class IFileSystem;
	class IFileSystemProxy;
	class IFileSystemProxyForLoader;
	class IProgramRegistry;
	class ISaveDataInfoReader;
	class IStorage;
}
namespace nn::gpio {
	class IManager;
	class IPadSession;
}
namespace nn::hid {
	using BasicXpadId = uint32_t;
	using ConsoleSixAxisSensorHandle = uint32_t;
	using JoyXpadId = uint32_t;
	using NpadStyleTag = uint32_t;
	using SixAxisSensorHandle = uint32_t;
	using TouchState = uint8_t;
	using VibrationDeviceHandle = uint32_t;
	using VibrationDeviceInfoForIpc = uint64_t;
	using VibrationValue = uint128_t;

	class IActiveVibrationDeviceList;
	class IAppletResource;
	class IHidDebugServer;
	class IHidServer;
	class IHidSystemServer;
	class IHidTemporaryServer;
}
namespace nn::hid::debug {
	using BasicXpadAutoPilotState = uint8_t *; // uint8_t[0x1c]
	using CaptureButtonAutoPilotState = uint64_t;
	using DebugPadAutoPilotState = uint8_t *; // uint8_t[0x18]
	using HomeButtonAutoPilotState = uint64_t;
	using KeyboardAutoPilotState = uint8_t *; // uint8_t[0x28]
	using MouseAutoPilotState = uint8_t *; // uint8_t[0x1c]
	using SleepButtonAutoPilotState = uint64_t;
}
namespace nn::hid::system {
	using DeviceType = uint32_t;
	using FirmwareUpdateDeviceHandle = uint64_t;
	using FirmwareUpdateState = uint32_t;
	using FirmwareVersion = uint128_t;
	using InputSourceId = uint32_t;
	using KeyboardLockKeyEvent = uint32_t;
	using PlayReportControllerUsage = uint8_t;
	using RegisteredDevice = uint8_t;
	using UniquePadId = uint64_t;
	using UniqueSixAxisSensorHandle = uint32_t;
}
namespace nn::hid::tmp {
	using ConsoleSixAxisSensorCalibrationValues = uint8_t *; // uint8_t[0x18]
}
namespace nn::htc::tenv {
	class IService;
	class IServiceManager;
}
namespace nn::i2c {
	class IManager;
	class ISession;
}
namespace nn::idle::detail {
	class IPolicyManagerSystem;
}
namespace nn::irsensor {
	using ImageTransferProcessorState = uint128_t;
	using IrCameraHandle = uint32_t;
	using PackedClusteringProcessorConfig = uint8_t *; // uint8_t[0x28]
	using PackedDpdProcessorConfig = uint8_t *; // uint8_t[0xc]
	using PackedImageTransferProcessorConfig = uint8_t *; // uint8_t[0x18]
	using PackedMcuVersion = uint32_t;
	using PackedMomentProcessorConfig = uint8_t *; // uint8_t[0x20]
	using PackedTeraPluginProcessorConfig = uint64_t;

	class IIrSensorServer;
	class IIrSensorSystemServer;
}
namespace nn::lbl::detail {
	class ILblController;
}
namespace nn::ldn::detail {
	class IMonitorService;
	class IMonitorServiceCreator;
	class ISystemLocalCommunicationService;
	class ISystemServiceCreator;
	class IUserLocalCommunicationService;
	class IUserServiceCreator;
}
namespace nn::ldr::detail {
	class IShellInterface;
}
namespace nn::lm {
	class ILogService;
	class ILogger;
}
namespace nn::lr {
	class IAddOnContentLocationResolver;
	class ILocationResolver;
	class ILocationResolverManager;
	class IRegisteredLocationResolver;
}
namespace nn::mii {
	using CharInfo = uint8_t *; // uint8_t[0x58]
	using CharInfoElement = uint8_t;
	using CreateId = uint128_t;
	using StoreData = uint8_t *; // uint8_t[0x44]
	using StoreDataElement = uint8_t;
}
namespace nn::mii::detail {
	class IDatabaseService;
	class IStaticService;
}
namespace nn::mmnv {
	class IRequest;
}
namespace nn::ncm {
	using ApplicationId = uint64_t;
	using ProgramId = uint64_t;
	using StorageId = uint8_t;
	using SystemApplicationId = uint64_t;

	class IContentManager;
	class IContentMetaDatabase;
	class IContentStorage;
}
namespace nn::news::detail::ipc {
	class INewlyArrivedEventHolder;
	class INewsDataService;
	class INewsDatabaseService;
	class INewsService;
	class IOverwriteEventHolder;
	class IServiceCreator;
}
namespace nn::nfc::am::detail {
	class IAm;
	class IAmManager;
}
namespace nn::nfc::detail {
	class ISystem;
	class ISystemManager;
	class IUser;
	class IUserManager;
}
namespace nn::nfc::mifare::detail {
	class IUser;
	class IUserManager;
}
namespace nn::nfp::detail {
	class IDebug;
	class IDebugManager;
	class ISystem;
	class ISystemManager;
	class IUser;
	class IUserManager;
}
namespace nn::nifm {
	using AdditionalInfo = uint8_t;
	using ClientId = uint8_t;
	using DnsSetting = uint8_t *; // uint8_t[9]
	using IpAddressSetting = uint8_t *; // uint8_t[0xd]
	using IpSettingData = uint8_t;
	using IpV4Address = uint32_t;
	using Requirement = uint8_t *; // uint8_t[0x24]
	using SsidListVersion = uint128_t;
	using TelemetryInfo = uint8_t;
}
namespace nn::nifm::detail {
	class IGeneralService;
	class INetworkProfile;
	class IRequest;
	class IScanRequest;
	class IStaticService;
}
namespace nn::nifm::detail::sf {
	using AccessPointData = uint8_t;
	using InternetConnectionStatus = uint8_t *; // uint8_t[3]
	using NetworkInterfaceInfo = uint8_t;
	using NetworkProfileBasicInfo = uint8_t;
	using NetworkProfileData = uint8_t;
}
namespace nn::nim::detail {
	class IAsyncData;
	class IAsyncProgressResult;
	class IAsyncResult;
	class IAsyncValue;
	class INetworkInstallManager;
	class IShopServiceManager;
}
namespace nn::npns {
	using NotificationToken = uint8_t *; // uint8_t[0x28]

	class INpnsSystem;
	class INpnsUser;
}
namespace nn::ns {
	using ApplicationControlProperty = uint8_t;
}
namespace nn::ns::detail {
	class IAccountProxyInterface;
	class IApplicationManagerInterface;
	class IAsyncResult;
	class IAsyncValue;
	class IContentManagementInterface;
	class IDevelopInterface;
	class IDocumentInterface;
	class IDownloadTaskInterface;
	class IFactoryResetInterface;
	class IProgressAsyncResult;
	class IProgressMonitorForDeleteUserSaveDataAll;
	class IServiceGetterInterface;
	class ISystemUpdateControl;
	class ISystemUpdateInterface;
	class IVulnerabilityManagerInterface;
}
namespace nn::nsd::detail {
	class IManager;
}
namespace nn::ntc::detail::service {
	class IEnsureNetworkClockAvailabilityService;
	class IStaticService;
}
namespace nn::oe {
	using DisplayVersion = uint128_t;
}
namespace nn::omm::detail {
	class IOperationModeManager;
}
namespace nn::ovln {
	class IReceiver;
	class IReceiverService;
	class ISender;
	class ISenderService;
}
namespace nn::pcie::detail {
	class IManager;
	class ISession;
}
namespace nn::pctl {
	using FreeCommunicationApplicationInfo = uint8_t;
	using InquiryCode = uint8_t *; // uint8_t[0x20]
	using PlayTimerSettings = uint8_t *; // uint8_t[0x34]
	using SafetyLevelSettings = uint8_t *; // uint8_t[3]
}
namespace nn::pctl::detail {
	using AsyncData = uint64_t;
	using PairingAccountInfoBase = uint128_t;
	using PairingInfoBase = uint128_t;
}
namespace nn::pctl::detail::ipc {
	class IParentalControlService;
	class IParentalControlServiceFactory;
}
namespace nn::pcv {
	using ModuleState = uint8_t *; // uint8_t[0xc]
	using PowerControlTarget = uint32_t;
	using PowerDomainState = uint8_t;
	using TemperatureThreshold = uint8_t;

	class IArbitrationManager;
	class IImmediateManager;
}
namespace nn::pcv::detail {
	class IPcvService;
}
namespace nn::pdm::detail {
	class INotifyService;
	class IQueryService;
}
namespace nn::pinmux {
	class IManager;
	class ISession;
}
namespace nn::pl::detail {
	class ISharedFontManager;
}
namespace nn::pm::detail {
	class IBootModeInterface;
	class IInformationInterface;
	class IShellInterface;
}
namespace nn::prepo::detail::ipc {
	class IPrepoService;
}
namespace nn::psc::sf {
	class IPmControl;
	class IPmModule;
	class IPmService;
}
namespace nn::psm {
	class IPsmServer;
	class IPsmSession;
}
namespace nn::pwm {
	class IChannelSession;
	class IManager;
}
namespace nn::ro::detail {
	class IDebugMonitorInterface;
	class IRoInterface;
}
namespace nn::sasbus {
	class IManager;
	class ISession;
}
namespace nn::settings {
	using LanguageCode = uint64_t;
	using SettingsItemKey = uint8_t;
	using SettingsName = uint8_t;

	class IFactorySettingsServer;
	class IFirmwareDebugSettingsServer;
	class ISettingsItemKeyIterator;
	class ISettingsServer;
	class ISystemSettingsServer;
}
namespace nn::settings::factory {
	using AccelerometerOffset = uint8_t *; // uint8_t[6]
	using AccelerometerScale = uint8_t *; // uint8_t[6]
	using BatteryLot = uint8_t *; // uint8_t[0x18]
	using BdAddress = uint8_t *; // uint8_t[6]
	using ConfigurationId1 = uint8_t *; // uint8_t[0x1e]
	using CountryCode = uint8_t;
	using EccB233DeviceCertificate = uint8_t;
	using EccB233DeviceKey = uint8_t *; // uint8_t[0x54]
	using GameCardCertificate = uint8_t;
	using GameCardKey = uint8_t;
	using GyroscopeOffset = uint8_t *; // uint8_t[6]
	using GyroscopeScale = uint8_t *; // uint8_t[6]
	using MacAddress = uint8_t *; // uint8_t[6]
	using Rsa2048DeviceCertificate = uint8_t;
	using Rsa2048DeviceKey = uint8_t;
	using SerialNumber = uint8_t *; // uint8_t[0x18]
	using SpeakerParameter = uint8_t *; // uint8_t[0x5a]
	using SslCertificate = uint8_t;
	using SslKey = uint8_t;
}
namespace nn::settings::system {
	using AccountNotificationSettings = uint8_t;
	using AccountSettings = uint32_t;
	using AudioVolume = uint64_t;
	using BacklightSettings = uint8_t *; // uint8_t[0x28]
	using BacklightSettingsEx = uint8_t *; // uint8_t[0x2c]
	using BatteryLot = uint8_t *; // uint8_t[0x18]
	using BluetoothDevicesSettings = uint8_t;
	using DataDeletionSettings = uint64_t;
	using DeviceNickName = uint8_t;
	using Edid = uint8_t;
	using EulaVersion = uint8_t;
	using FatalDirtyFlag = uint128_t;
	using FirmwareVersion = uint8_t;
	using InitialLaunchSettings = uint8_t *; // uint8_t[0x20]
	using NetworkSettings = uint8_t;
	using NotificationSettings = uint8_t *; // uint8_t[0x18]
	using NxControllerSettings = uint8_t;
	using PtmFuelGaugeParameter = uint8_t *; // uint8_t[0x18]
	using SerialNumber = uint8_t *; // uint8_t[0x18]
	using SleepSettings = uint8_t *; // uint8_t[0xc]
	using TelemetryDirtyFlag = uint128_t;
	using TvSettings = uint8_t *; // uint8_t[0x20]
}
namespace nn::sm::detail {
	class IManagerInterface;
	class IUserInterface;
}
namespace nn::socket::resolver {
	class IResolver;
}
namespace nn::socket::sf {
	class IClient;
}
namespace nn::spl::detail {
	class IGeneralInterface;
	class IRandomInterface;
}
namespace nn::spsm::detail {
	class IPowerStateInterface;
}
namespace nn::ssl::sf {
	using CertificateFormat = uint32_t;
	using ContextOption = uint32_t;
	using InternalPki = uint32_t;
	using IoMode = uint32_t;
	using OptionType = uint32_t;
	using PollEvent = uint32_t;
	using RenegotiationMode = uint32_t;
	using SessionCacheMode = uint32_t;
	using SslVersion = uint32_t;
	using VerifyOption = uint32_t;

	class ISslConnection;
	class ISslContext;
	class ISslService;
}
namespace nn::tc {
	class IManager;
}
namespace nn::time {
	using CalendarTime = uint64_t;
	using LocationName = uint8_t *; // uint8_t[0x24]
	using PosixTime = uint64_t;
	using SteadyClockTimePoint = uint8_t *; // uint8_t[0x18]
	using SystemClockContext = uint8_t *; // uint8_t[0x20]
	using TimeZoneRule = uint8_t;
	using TimeZoneRuleVersion = uint128_t;
}
namespace nn::time::sf {
	using CalendarAdditionalInfo = uint8_t *; // uint8_t[0x18]
}
namespace nn::timesrv::detail::service {
	class IStaticService;
	class ISteadyClock;
	class ISystemClock;
	class ITimeZoneService;
}
namespace nn::tma {
	class IHtcManager;
	class IHtcsManager;
	class ISocket;
}
namespace nn::ts::server {
	class IMeasurementServer;
}
namespace nn::uart {
	class IManager;
	class IPortSession;
}
namespace nn::usb::ds {
	class IDsEndpoint;
	class IDsInterface;
	class IDsService;
}
namespace nn::usb::hs {
	class IClientEpSession;
	class IClientIfSession;
	class IClientRootSession;
}
namespace nn::usb::pd::detail {
	class IPdCradleManager;
	class IPdCradleSession;
	class IPdManager;
	class IPdSession;
}
namespace nn::usb::pm {
	class IPmService;
}
namespace nn::util {
	using Unorm8x4 = uint32_t;
	using Uuid = uint128_t;
}
namespace nn::vi {
	using DisplayInfo = uint8_t;
	using DisplayModeInfo = uint128_t;
	using DisplayName = uint8_t *; // uint8_t[0x40]
	using ProxyName = uint64_t;
}
namespace nn::visrv::sf {
	class IApplicationDisplayService;
	class IApplicationRootService;
	class IManagerDisplayService;
	class IManagerRootService;
	class ISystemDisplayService;
	class ISystemRootService;
}
namespace nn::wlan::detail {
	class IInfraManager;
	class ILocalGetActionFrame;
	class ILocalGetFrame;
	class ILocalManager;
	class ISocketGetFrame;
	class ISocketManager;
}
namespace nn::xcd::detail {
	class ISystemServer;
}
namespace nns::hosbinder {
	class IHOSBinderDriver;
}
namespace nns::nvdrv {
	class INvDrvDebugFSServices;
	class INvDrvServices;
}
namespace nv::gemcontrol {
	class INvGemControl;
}
namespace nv::gemcoredump {
	class INvGemCoreDump;
}

//// namespace None {
	class SmService : public IpcService {
	public:
		SmService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to SmService::Initialize\n");
				resp->error_code = Initialize();
				return 0;
			}
			case 1: {
				resp->GenBuf(1, 0, 0);
				IpcService* temp1;
				ns_print("IPC message to SmService::GetService: ServiceName name = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 8).c_str());
				resp->error_code = GetService(req->GetDataPointer<ServiceName>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(1, 0, 0);
				IpcService* temp1;
				ns_print("IPC message to SmService::RegisterService: ServiceName name = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 8).c_str());
				resp->error_code = RegisterService(req->GetDataPointer<ServiceName>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to SmService::UnregisterService: ServiceName name = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 8).c_str());
				resp->error_code = UnregisterService(req->GetDataPointer<ServiceName>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface SmService", req->cmd_id);
			}
		}
		uint32_t GetService(ServiceName name, IpcService*& _1);
		uint32_t Initialize();
		uint32_t RegisterService(ServiceName name, IpcService*& _1);
		uint32_t UnregisterService(ServiceName name);
	};
//// }
#ifdef DEFINE_STUBS
#endif // DEFINE_STUBS
namespace nn::account {
	class IAccountServiceForAdministrator : public IpcService {
	public:
		IAccountServiceForAdministrator() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::GetUserCount\n");
				resp->error_code = GetUserCount(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::GetUserExistence: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetUserExistence(req->GetData<nn::account::Uid>(8), *resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::account::Uid* temp3 = (nn::account::Uid *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::ListAllUsers\n");
				resp->error_code = ListAllUsers(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::account::Uid* temp3 = (nn::account::Uid *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::ListOpenUsers\n");
				resp->error_code = ListOpenUsers(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::GetLastOpenedUser\n");
				resp->error_code = GetLastOpenedUser(*resp->GetDataPointer<nn::account::Uid *>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(1, 0, 0);
				nn::account::profile::IProfile* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::GetProfile: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetProfile(req->GetData<nn::account::Uid>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::GetProfileDigest: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetProfileDigest(req->GetData<nn::account::Uid>(8), *resp->GetDataPointer<nn::account::ProfileDigest *>(8));
				return 0;
			}
			case 50: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::IsUserRegistrationRequestPermitted: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = IsUserRegistrationRequestPermitted(req->GetData<uint64_t>(8), req->pid, *resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 51: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::TrySelectUserWithoutInteraction: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = TrySelectUserWithoutInteraction(req->GetData<bool>(8), *resp->GetDataPointer<nn::account::Uid *>(8));
				return 0;
			}
			case 100: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::INotifier* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::GetUserRegistrationNotifier\n");
				resp->error_code = GetUserRegistrationNotifier(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 101: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::INotifier* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::GetUserStateChangeNotifier\n");
				resp->error_code = GetUserStateChangeNotifier(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 102: {
				resp->GenBuf(1, 0, 0);
				nn::account::baas::IManagerForSystemService* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::GetBaasAccountManagerForSystemService: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetBaasAccountManagerForSystemService(req->GetData<nn::account::Uid>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 103: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::INotifier* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::GetBaasUserAvailabilityChangeNotifier\n");
				resp->error_code = GetBaasUserAvailabilityChangeNotifier(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 104: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::INotifier* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::GetProfileUpdateNotifier\n");
				resp->error_code = GetProfileUpdateNotifier(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 110: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::StoreSaveDataThumbnail: nn::account::Uid = %s, nn::ApplicationId = 0x%%lx, uint8_t *= buffer<0x%lx>\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::ApplicationId>(0x18), temp2);
				resp->error_code = StoreSaveDataThumbnail(req->GetData<nn::account::Uid>(8), req->GetData<nn::ApplicationId>(0x18), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 111: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::ClearSaveDataThumbnail: nn::account::Uid = %s, nn::ApplicationId = 0x%%lx\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::ApplicationId>(0x18));
				resp->error_code = ClearSaveDataThumbnail(req->GetData<nn::account::Uid>(8), req->GetData<nn::ApplicationId>(0x18));
				return 0;
			}
			case 112: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::LoadSaveDataThumbnail: nn::account::Uid = %s, nn::ApplicationId = 0x%%lx\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::ApplicationId>(0x18));
				resp->error_code = LoadSaveDataThumbnail(req->GetData<nn::account::Uid>(8), req->GetData<nn::ApplicationId>(0x18), *resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 190: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::GetUserLastOpenedApplication: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetUserLastOpenedApplication(req->GetData<nn::account::Uid>(8), *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<nn::ApplicationId *>(0x10));
				return 0;
			}
			case 200: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::BeginUserRegistration\n");
				resp->error_code = BeginUserRegistration(*resp->GetDataPointer<nn::account::Uid *>(8));
				return 0;
			}
			case 201: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::CompleteUserRegistration: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = CompleteUserRegistration(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			case 202: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::CancelUserRegistration: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = CancelUserRegistration(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			case 203: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::DeleteUser: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = DeleteUser(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			case 204: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::SetUserPosition: int32_t = 0x%x, nn::account::Uid = %s\n", req->GetData<int32_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str());
				resp->error_code = SetUserPosition(req->GetData<int32_t>(8), req->GetData<nn::account::Uid>(0x10));
				return 0;
			}
			case 205: {
				resp->GenBuf(1, 0, 0);
				nn::account::profile::IProfileEditor* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::GetProfileEditor: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetProfileEditor(req->GetData<nn::account::Uid>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 206: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::CompleteUserRegistrationForcibly: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = CompleteUserRegistrationForcibly(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			case 210: {
				resp->GenBuf(1, 0, 0);
				nn::account::baas::IFloatingRegistrationRequest* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::CreateFloatingRegistrationRequest: uint32_t = 0x%x, KObject = 0x%x\n", req->GetData<uint32_t>(8), req->GetCopied(0));
				resp->error_code = CreateFloatingRegistrationRequest(req->GetData<uint32_t>(8), IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 230: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::AuthenticateServiceAsync\n");
				resp->error_code = AuthenticateServiceAsync(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 250: {
				resp->GenBuf(1, 0, 0);
				nn::account::baas::IAdministrator* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::GetBaasAccountAdministrator: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetBaasAccountAdministrator(req->GetData<nn::account::Uid>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 290: {
				resp->GenBuf(1, 0, 0);
				nn::account::nas::IOAuthProcedureForExternalNsa* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::ProxyProcedureForGuestLoginWithNintendoAccount: nn::account::detail::Uuid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = ProxyProcedureForGuestLoginWithNintendoAccount(req->GetData<nn::account::detail::Uuid>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 291: {
				resp->GenBuf(1, 0, 0);
				nn::account::nas::IOAuthProcedureForExternalNsa* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::ProxyProcedureForFloatingRegistrationWithNintendoAccount: nn::account::detail::Uuid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = ProxyProcedureForFloatingRegistrationWithNintendoAccount(req->GetData<nn::account::detail::Uuid>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 299: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::ISessionObject* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::SuspendBackgroundDaemon\n");
				resp->error_code = SuspendBackgroundDaemon(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 997: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::DebugInvalidateTokenCacheForUser: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = DebugInvalidateTokenCacheForUser(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			case 998: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::DebugSetUserStateClose: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = DebugSetUserStateClose(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			case 999: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::IAccountServiceForAdministrator::DebugSetUserStateOpen: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = DebugSetUserStateOpen(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::account::IAccountServiceForAdministrator", req->cmd_id);
			}
		}
		uint32_t AuthenticateServiceAsync(nn::account::detail::IAsyncContext*& _0);
		uint32_t BeginUserRegistration(nn::account::Uid& _0);
		uint32_t CancelUserRegistration(nn::account::Uid _0);
		uint32_t ClearSaveDataThumbnail(nn::account::Uid _0, nn::ApplicationId _1);
		uint32_t CompleteUserRegistration(nn::account::Uid _0);
		uint32_t CompleteUserRegistrationForcibly(nn::account::Uid _0);
		uint32_t CreateFloatingRegistrationRequest(uint32_t _0, IpcService* _1, nn::account::baas::IFloatingRegistrationRequest*& _2);
		uint32_t DebugInvalidateTokenCacheForUser(nn::account::Uid _0);
		uint32_t DebugSetUserStateClose(nn::account::Uid _0);
		uint32_t DebugSetUserStateOpen(nn::account::Uid _0);
		uint32_t DeleteUser(nn::account::Uid _0);
		uint32_t GetBaasAccountAdministrator(nn::account::Uid _0, nn::account::baas::IAdministrator*& _1);
		uint32_t GetBaasAccountManagerForSystemService(nn::account::Uid _0, nn::account::baas::IManagerForSystemService*& _1);
		uint32_t GetBaasUserAvailabilityChangeNotifier(nn::account::detail::INotifier*& _0);
		uint32_t GetLastOpenedUser(nn::account::Uid& _0);
		uint32_t GetProfile(nn::account::Uid _0, nn::account::profile::IProfile*& _1);
		uint32_t GetProfileDigest(nn::account::Uid _0, nn::account::ProfileDigest& _1);
		uint32_t GetProfileEditor(nn::account::Uid _0, nn::account::profile::IProfileEditor*& _1);
		uint32_t GetProfileUpdateNotifier(nn::account::detail::INotifier*& _0);
		uint32_t GetUserCount(int32_t& _0);
		uint32_t GetUserExistence(nn::account::Uid _0, bool& _1);
		uint32_t GetUserLastOpenedApplication(nn::account::Uid _0, uint32_t& _1, nn::ApplicationId& _2);
		uint32_t GetUserRegistrationNotifier(nn::account::detail::INotifier*& _0);
		uint32_t GetUserStateChangeNotifier(nn::account::detail::INotifier*& _0);
		uint32_t IsUserRegistrationRequestPermitted(uint64_t _0, uint64_t _1, bool& _2);
		uint32_t ListAllUsers(nn::account::Uid *& _0, unsigned int _0_size);
		uint32_t ListOpenUsers(nn::account::Uid *& _0, unsigned int _0_size);
		uint32_t LoadSaveDataThumbnail(nn::account::Uid _0, nn::ApplicationId _1, uint32_t& _2, uint8_t *& _3, unsigned int _3_size);
		uint32_t ProxyProcedureForFloatingRegistrationWithNintendoAccount(nn::account::detail::Uuid _0, nn::account::nas::IOAuthProcedureForExternalNsa*& _1);
		uint32_t ProxyProcedureForGuestLoginWithNintendoAccount(nn::account::detail::Uuid _0, nn::account::nas::IOAuthProcedureForExternalNsa*& _1);
		uint32_t SetUserPosition(int32_t _0, nn::account::Uid _1);
		uint32_t StoreSaveDataThumbnail(nn::account::Uid _0, nn::ApplicationId _1, uint8_t * _2, unsigned int _2_size);
		uint32_t SuspendBackgroundDaemon(nn::account::detail::ISessionObject*& _0);
		uint32_t TrySelectUserWithoutInteraction(bool _0, nn::account::Uid& _1);
	};
	class IAccountServiceForApplication : public IpcService {
	public:
		IAccountServiceForApplication() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::account::IAccountServiceForApplication::GetUserCount\n");
				resp->error_code = GetUserCount(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::account::IAccountServiceForApplication::GetUserExistence: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetUserExistence(req->GetData<nn::account::Uid>(8), *resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::account::Uid* temp3 = (nn::account::Uid *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::IAccountServiceForApplication::ListAllUsers\n");
				resp->error_code = ListAllUsers(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::account::Uid* temp3 = (nn::account::Uid *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::IAccountServiceForApplication::ListOpenUsers\n");
				resp->error_code = ListOpenUsers(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::account::IAccountServiceForApplication::GetLastOpenedUser\n");
				resp->error_code = GetLastOpenedUser(*resp->GetDataPointer<nn::account::Uid *>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(1, 0, 0);
				nn::account::profile::IProfile* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForApplication::GetProfile: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetProfile(req->GetData<nn::account::Uid>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::account::IAccountServiceForApplication::GetProfileDigest: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetProfileDigest(req->GetData<nn::account::Uid>(8), *resp->GetDataPointer<nn::account::ProfileDigest *>(8));
				return 0;
			}
			case 50: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::account::IAccountServiceForApplication::IsUserRegistrationRequestPermitted: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = IsUserRegistrationRequestPermitted(req->GetData<uint64_t>(8), req->pid, *resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 51: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::account::IAccountServiceForApplication::TrySelectUserWithoutInteraction: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = TrySelectUserWithoutInteraction(req->GetData<bool>(8), *resp->GetDataPointer<nn::account::Uid *>(8));
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::IAccountServiceForApplication::InitializeApplicationInfo: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = InitializeApplicationInfo(req->GetData<uint64_t>(8), req->pid);
				return 0;
			}
			case 101: {
				resp->GenBuf(1, 0, 0);
				nn::account::baas::IManagerForApplication* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForApplication::GetBaasAccountManagerForApplication: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetBaasAccountManagerForApplication(req->GetData<nn::account::Uid>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 102: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForApplication::AuthenticateApplicationAsync\n");
				resp->error_code = AuthenticateApplicationAsync(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 110: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::account::IAccountServiceForApplication::StoreSaveDataThumbnail: nn::account::Uid = %s, uint8_t *= buffer<0x%lx>\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), temp2);
				resp->error_code = StoreSaveDataThumbnail(req->GetData<nn::account::Uid>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 111: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::IAccountServiceForApplication::ClearSaveDataThumbnail: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = ClearSaveDataThumbnail(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			case 120: {
				resp->GenBuf(1, 0, 0);
				nn::account::baas::IGuestLoginRequest* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForApplication::CreateGuestLoginRequest: uint32_t = 0x%x, KObject = 0x%x\n", req->GetData<uint32_t>(8), req->GetCopied(0));
				resp->error_code = CreateGuestLoginRequest(req->GetData<uint32_t>(8), IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::account::IAccountServiceForApplication", req->cmd_id);
			}
		}
		uint32_t AuthenticateApplicationAsync(nn::account::detail::IAsyncContext*& _0);
		uint32_t ClearSaveDataThumbnail(nn::account::Uid _0);
		uint32_t CreateGuestLoginRequest(uint32_t _0, IpcService* _1, nn::account::baas::IGuestLoginRequest*& _2);
		uint32_t GetBaasAccountManagerForApplication(nn::account::Uid _0, nn::account::baas::IManagerForApplication*& _1);
		uint32_t GetLastOpenedUser(nn::account::Uid& _0);
		uint32_t GetProfile(nn::account::Uid _0, nn::account::profile::IProfile*& _1);
		uint32_t GetProfileDigest(nn::account::Uid _0, nn::account::ProfileDigest& _1);
		uint32_t GetUserCount(int32_t& _0);
		uint32_t GetUserExistence(nn::account::Uid _0, bool& _1);
		uint32_t InitializeApplicationInfo(uint64_t _0, uint64_t _1);
		uint32_t IsUserRegistrationRequestPermitted(uint64_t _0, uint64_t _1, bool& _2);
		uint32_t ListAllUsers(nn::account::Uid *& _0, unsigned int _0_size);
		uint32_t ListOpenUsers(nn::account::Uid *& _0, unsigned int _0_size);
		uint32_t StoreSaveDataThumbnail(nn::account::Uid _0, uint8_t * _1, unsigned int _1_size);
		uint32_t TrySelectUserWithoutInteraction(bool _0, nn::account::Uid& _1);
	};
	class IAccountServiceForSystemService : public IpcService {
	public:
		IAccountServiceForSystemService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::account::IAccountServiceForSystemService::GetUserCount\n");
				resp->error_code = GetUserCount(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::account::IAccountServiceForSystemService::GetUserExistence: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetUserExistence(req->GetData<nn::account::Uid>(8), *resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::account::Uid* temp3 = (nn::account::Uid *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::IAccountServiceForSystemService::ListAllUsers\n");
				resp->error_code = ListAllUsers(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::account::Uid* temp3 = (nn::account::Uid *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::IAccountServiceForSystemService::ListOpenUsers\n");
				resp->error_code = ListOpenUsers(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::account::IAccountServiceForSystemService::GetLastOpenedUser\n");
				resp->error_code = GetLastOpenedUser(*resp->GetDataPointer<nn::account::Uid *>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(1, 0, 0);
				nn::account::profile::IProfile* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForSystemService::GetProfile: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetProfile(req->GetData<nn::account::Uid>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::account::IAccountServiceForSystemService::GetProfileDigest: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetProfileDigest(req->GetData<nn::account::Uid>(8), *resp->GetDataPointer<nn::account::ProfileDigest *>(8));
				return 0;
			}
			case 50: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::account::IAccountServiceForSystemService::IsUserRegistrationRequestPermitted: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = IsUserRegistrationRequestPermitted(req->GetData<uint64_t>(8), req->pid, *resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 51: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::account::IAccountServiceForSystemService::TrySelectUserWithoutInteraction: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = TrySelectUserWithoutInteraction(req->GetData<bool>(8), *resp->GetDataPointer<nn::account::Uid *>(8));
				return 0;
			}
			case 100: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::INotifier* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForSystemService::GetUserRegistrationNotifier\n");
				resp->error_code = GetUserRegistrationNotifier(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 101: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::INotifier* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForSystemService::GetUserStateChangeNotifier\n");
				resp->error_code = GetUserStateChangeNotifier(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 102: {
				resp->GenBuf(1, 0, 0);
				nn::account::baas::IManagerForSystemService* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForSystemService::GetBaasAccountManagerForSystemService: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetBaasAccountManagerForSystemService(req->GetData<nn::account::Uid>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 103: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::INotifier* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForSystemService::GetBaasUserAvailabilityChangeNotifier\n");
				resp->error_code = GetBaasUserAvailabilityChangeNotifier(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 104: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::INotifier* temp1;
				ns_print("IPC message to nn::account::IAccountServiceForSystemService::GetProfileUpdateNotifier\n");
				resp->error_code = GetProfileUpdateNotifier(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 110: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::account::IAccountServiceForSystemService::StoreSaveDataThumbnail: nn::account::Uid = %s, nn::ApplicationId = 0x%%lx, uint8_t *= buffer<0x%lx>\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::ApplicationId>(0x18), temp2);
				resp->error_code = StoreSaveDataThumbnail(req->GetData<nn::account::Uid>(8), req->GetData<nn::ApplicationId>(0x18), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 111: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::IAccountServiceForSystemService::ClearSaveDataThumbnail: nn::account::Uid = %s, nn::ApplicationId = 0x%%lx\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::ApplicationId>(0x18));
				resp->error_code = ClearSaveDataThumbnail(req->GetData<nn::account::Uid>(8), req->GetData<nn::ApplicationId>(0x18));
				return 0;
			}
			case 112: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::IAccountServiceForSystemService::LoadSaveDataThumbnail: nn::account::Uid = %s, nn::ApplicationId = 0x%%lx\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::ApplicationId>(0x18));
				resp->error_code = LoadSaveDataThumbnail(req->GetData<nn::account::Uid>(8), req->GetData<nn::ApplicationId>(0x18), *resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 190: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::account::IAccountServiceForSystemService::GetUserLastOpenedApplication: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetUserLastOpenedApplication(req->GetData<nn::account::Uid>(8), *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<nn::ApplicationId *>(0x10));
				return 0;
			}
			case 997: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::IAccountServiceForSystemService::DebugInvalidateTokenCacheForUser: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = DebugInvalidateTokenCacheForUser(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			case 998: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::IAccountServiceForSystemService::DebugSetUserStateClose: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = DebugSetUserStateClose(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			case 999: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::IAccountServiceForSystemService::DebugSetUserStateOpen: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = DebugSetUserStateOpen(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::account::IAccountServiceForSystemService", req->cmd_id);
			}
		}
		uint32_t ClearSaveDataThumbnail(nn::account::Uid _0, nn::ApplicationId _1);
		uint32_t DebugInvalidateTokenCacheForUser(nn::account::Uid _0);
		uint32_t DebugSetUserStateClose(nn::account::Uid _0);
		uint32_t DebugSetUserStateOpen(nn::account::Uid _0);
		uint32_t GetBaasAccountManagerForSystemService(nn::account::Uid _0, nn::account::baas::IManagerForSystemService*& _1);
		uint32_t GetBaasUserAvailabilityChangeNotifier(nn::account::detail::INotifier*& _0);
		uint32_t GetLastOpenedUser(nn::account::Uid& _0);
		uint32_t GetProfile(nn::account::Uid _0, nn::account::profile::IProfile*& _1);
		uint32_t GetProfileDigest(nn::account::Uid _0, nn::account::ProfileDigest& _1);
		uint32_t GetProfileUpdateNotifier(nn::account::detail::INotifier*& _0);
		uint32_t GetUserCount(int32_t& _0);
		uint32_t GetUserExistence(nn::account::Uid _0, bool& _1);
		uint32_t GetUserLastOpenedApplication(nn::account::Uid _0, uint32_t& _1, nn::ApplicationId& _2);
		uint32_t GetUserRegistrationNotifier(nn::account::detail::INotifier*& _0);
		uint32_t GetUserStateChangeNotifier(nn::account::detail::INotifier*& _0);
		uint32_t IsUserRegistrationRequestPermitted(uint64_t _0, uint64_t _1, bool& _2);
		uint32_t ListAllUsers(nn::account::Uid *& _0, unsigned int _0_size);
		uint32_t ListOpenUsers(nn::account::Uid *& _0, unsigned int _0_size);
		uint32_t LoadSaveDataThumbnail(nn::account::Uid _0, nn::ApplicationId _1, uint32_t& _2, uint8_t *& _3, unsigned int _3_size);
		uint32_t StoreSaveDataThumbnail(nn::account::Uid _0, nn::ApplicationId _1, uint8_t * _2, unsigned int _2_size);
		uint32_t TrySelectUserWithoutInteraction(bool _0, nn::account::Uid& _1);
	};
	class IBaasAccessTokenAccessor : public IpcService {
	public:
		IBaasAccessTokenAccessor() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::IBaasAccessTokenAccessor::EnsureCacheAsync: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = EnsureCacheAsync(req->GetData<nn::account::Uid>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::IBaasAccessTokenAccessor::LoadCache: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = LoadCache(req->GetData<nn::account::Uid>(8), *resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::account::IBaasAccessTokenAccessor::GetDeviceAccountId: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetDeviceAccountId(req->GetData<nn::account::Uid>(8), *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 50: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::IBaasAccessTokenAccessor::RegisterNotificationTokenAsync: nn::npns::NotificationToken = %s, nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x28).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x30), 0x10).c_str());
				resp->error_code = RegisterNotificationTokenAsync(req->GetDataPointer<nn::npns::NotificationToken>(8), req->GetData<nn::account::Uid>(0x30), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 51: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::IBaasAccessTokenAccessor::UnregisterNotificationTokenAsync: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = UnregisterNotificationTokenAsync(req->GetData<nn::account::Uid>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::account::IBaasAccessTokenAccessor", req->cmd_id);
			}
		}
		uint32_t EnsureCacheAsync(nn::account::Uid _0, nn::account::detail::IAsyncContext*& _1);
		uint32_t GetDeviceAccountId(nn::account::Uid _0, uint64_t& _1);
		uint32_t LoadCache(nn::account::Uid _0, uint32_t& _1, uint8_t *& _2, unsigned int _2_size);
		uint32_t RegisterNotificationTokenAsync(nn::npns::NotificationToken _0, nn::account::Uid _1, nn::account::detail::IAsyncContext*& _2);
		uint32_t UnregisterNotificationTokenAsync(nn::account::Uid _0, nn::account::detail::IAsyncContext*& _1);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::account::IAccountServiceForAdministrator::AuthenticateServiceAsync(nn::account::detail::IAsyncContext*& _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::AuthenticateServiceAsync\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::BeginUserRegistration(nn::account::Uid& _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::BeginUserRegistration\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::CancelUserRegistration(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::CancelUserRegistration\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::ClearSaveDataThumbnail(nn::account::Uid _0, nn::ApplicationId _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::ClearSaveDataThumbnail\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::CompleteUserRegistration(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::CompleteUserRegistration\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::CompleteUserRegistrationForcibly(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::CompleteUserRegistrationForcibly\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::CreateFloatingRegistrationRequest(uint32_t _0, IpcService* _1, nn::account::baas::IFloatingRegistrationRequest*& _2) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::CreateFloatingRegistrationRequest\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::DebugInvalidateTokenCacheForUser(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::DebugInvalidateTokenCacheForUser\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::DebugSetUserStateClose(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::DebugSetUserStateClose\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::DebugSetUserStateOpen(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::DebugSetUserStateOpen\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::DeleteUser(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::DeleteUser\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::GetBaasAccountAdministrator(nn::account::Uid _0, nn::account::baas::IAdministrator*& _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::GetBaasAccountAdministrator\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::GetBaasAccountManagerForSystemService(nn::account::Uid _0, nn::account::baas::IManagerForSystemService*& _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::GetBaasAccountManagerForSystemService\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::GetBaasUserAvailabilityChangeNotifier(nn::account::detail::INotifier*& _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::GetBaasUserAvailabilityChangeNotifier\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::GetLastOpenedUser(nn::account::Uid& _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::GetLastOpenedUser\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::GetProfile(nn::account::Uid _0, nn::account::profile::IProfile*& _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::GetProfile\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::GetProfileDigest(nn::account::Uid _0, nn::account::ProfileDigest& _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::GetProfileDigest\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::GetProfileEditor(nn::account::Uid _0, nn::account::profile::IProfileEditor*& _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::GetProfileEditor\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::GetProfileUpdateNotifier(nn::account::detail::INotifier*& _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::GetProfileUpdateNotifier\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::GetUserCount(int32_t& _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::GetUserCount\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::GetUserExistence(nn::account::Uid _0, bool& _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::GetUserExistence\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::GetUserLastOpenedApplication(nn::account::Uid _0, uint32_t& _1, nn::ApplicationId& _2) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::GetUserLastOpenedApplication\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::GetUserRegistrationNotifier(nn::account::detail::INotifier*& _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::GetUserRegistrationNotifier\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::GetUserStateChangeNotifier(nn::account::detail::INotifier*& _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::GetUserStateChangeNotifier\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::IsUserRegistrationRequestPermitted(uint64_t _0, uint64_t _1, bool& _2) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::IsUserRegistrationRequestPermitted\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::ListAllUsers(nn::account::Uid *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::ListAllUsers\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::ListOpenUsers(nn::account::Uid *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::ListOpenUsers\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::LoadSaveDataThumbnail(nn::account::Uid _0, nn::ApplicationId _1, uint32_t& _2, uint8_t *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::LoadSaveDataThumbnail\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::ProxyProcedureForFloatingRegistrationWithNintendoAccount(nn::account::detail::Uuid _0, nn::account::nas::IOAuthProcedureForExternalNsa*& _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::ProxyProcedureForFloatingRegistrationWithNintendoAccount\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::ProxyProcedureForGuestLoginWithNintendoAccount(nn::account::detail::Uuid _0, nn::account::nas::IOAuthProcedureForExternalNsa*& _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::ProxyProcedureForGuestLoginWithNintendoAccount\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::SetUserPosition(int32_t _0, nn::account::Uid _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::SetUserPosition\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::StoreSaveDataThumbnail(nn::account::Uid _0, nn::ApplicationId _1, uint8_t * _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::StoreSaveDataThumbnail\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::SuspendBackgroundDaemon(nn::account::detail::ISessionObject*& _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::SuspendBackgroundDaemon\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForAdministrator::TrySelectUserWithoutInteraction(bool _0, nn::account::Uid& _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForAdministrator::TrySelectUserWithoutInteraction\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForApplication::AuthenticateApplicationAsync(nn::account::detail::IAsyncContext*& _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForApplication::AuthenticateApplicationAsync\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForApplication::ClearSaveDataThumbnail(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForApplication::ClearSaveDataThumbnail\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForApplication::CreateGuestLoginRequest(uint32_t _0, IpcService* _1, nn::account::baas::IGuestLoginRequest*& _2) {
	ns_print("Stub implementation for nn::account::IAccountServiceForApplication::CreateGuestLoginRequest\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForApplication::GetBaasAccountManagerForApplication(nn::account::Uid _0, nn::account::baas::IManagerForApplication*& _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForApplication::GetBaasAccountManagerForApplication\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForApplication::GetLastOpenedUser(nn::account::Uid& _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForApplication::GetLastOpenedUser\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForApplication::GetProfile(nn::account::Uid _0, nn::account::profile::IProfile*& _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForApplication::GetProfile\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForApplication::GetProfileDigest(nn::account::Uid _0, nn::account::ProfileDigest& _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForApplication::GetProfileDigest\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForApplication::GetUserCount(int32_t& _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForApplication::GetUserCount\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForApplication::GetUserExistence(nn::account::Uid _0, bool& _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForApplication::GetUserExistence\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForApplication::InitializeApplicationInfo(uint64_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForApplication::InitializeApplicationInfo\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForApplication::IsUserRegistrationRequestPermitted(uint64_t _0, uint64_t _1, bool& _2) {
	ns_print("Stub implementation for nn::account::IAccountServiceForApplication::IsUserRegistrationRequestPermitted\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForApplication::ListAllUsers(nn::account::Uid *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::account::IAccountServiceForApplication::ListAllUsers\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForApplication::ListOpenUsers(nn::account::Uid *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::account::IAccountServiceForApplication::ListOpenUsers\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForApplication::StoreSaveDataThumbnail(nn::account::Uid _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::account::IAccountServiceForApplication::StoreSaveDataThumbnail\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForApplication::TrySelectUserWithoutInteraction(bool _0, nn::account::Uid& _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForApplication::TrySelectUserWithoutInteraction\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForSystemService::ClearSaveDataThumbnail(nn::account::Uid _0, nn::ApplicationId _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForSystemService::ClearSaveDataThumbnail\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForSystemService::DebugInvalidateTokenCacheForUser(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForSystemService::DebugInvalidateTokenCacheForUser\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForSystemService::DebugSetUserStateClose(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForSystemService::DebugSetUserStateClose\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForSystemService::DebugSetUserStateOpen(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForSystemService::DebugSetUserStateOpen\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForSystemService::GetBaasAccountManagerForSystemService(nn::account::Uid _0, nn::account::baas::IManagerForSystemService*& _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForSystemService::GetBaasAccountManagerForSystemService\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForSystemService::GetBaasUserAvailabilityChangeNotifier(nn::account::detail::INotifier*& _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForSystemService::GetBaasUserAvailabilityChangeNotifier\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForSystemService::GetLastOpenedUser(nn::account::Uid& _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForSystemService::GetLastOpenedUser\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForSystemService::GetProfile(nn::account::Uid _0, nn::account::profile::IProfile*& _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForSystemService::GetProfile\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForSystemService::GetProfileDigest(nn::account::Uid _0, nn::account::ProfileDigest& _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForSystemService::GetProfileDigest\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForSystemService::GetProfileUpdateNotifier(nn::account::detail::INotifier*& _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForSystemService::GetProfileUpdateNotifier\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForSystemService::GetUserCount(int32_t& _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForSystemService::GetUserCount\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForSystemService::GetUserExistence(nn::account::Uid _0, bool& _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForSystemService::GetUserExistence\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForSystemService::GetUserLastOpenedApplication(nn::account::Uid _0, uint32_t& _1, nn::ApplicationId& _2) {
	ns_print("Stub implementation for nn::account::IAccountServiceForSystemService::GetUserLastOpenedApplication\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForSystemService::GetUserRegistrationNotifier(nn::account::detail::INotifier*& _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForSystemService::GetUserRegistrationNotifier\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForSystemService::GetUserStateChangeNotifier(nn::account::detail::INotifier*& _0) {
	ns_print("Stub implementation for nn::account::IAccountServiceForSystemService::GetUserStateChangeNotifier\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForSystemService::IsUserRegistrationRequestPermitted(uint64_t _0, uint64_t _1, bool& _2) {
	ns_print("Stub implementation for nn::account::IAccountServiceForSystemService::IsUserRegistrationRequestPermitted\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForSystemService::ListAllUsers(nn::account::Uid *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::account::IAccountServiceForSystemService::ListAllUsers\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForSystemService::ListOpenUsers(nn::account::Uid *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::account::IAccountServiceForSystemService::ListOpenUsers\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForSystemService::LoadSaveDataThumbnail(nn::account::Uid _0, nn::ApplicationId _1, uint32_t& _2, uint8_t *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::account::IAccountServiceForSystemService::LoadSaveDataThumbnail\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForSystemService::StoreSaveDataThumbnail(nn::account::Uid _0, nn::ApplicationId _1, uint8_t * _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::account::IAccountServiceForSystemService::StoreSaveDataThumbnail\n");
	return 0;
}
uint32_t nn::account::IAccountServiceForSystemService::TrySelectUserWithoutInteraction(bool _0, nn::account::Uid& _1) {
	ns_print("Stub implementation for nn::account::IAccountServiceForSystemService::TrySelectUserWithoutInteraction\n");
	return 0;
}
uint32_t nn::account::IBaasAccessTokenAccessor::EnsureCacheAsync(nn::account::Uid _0, nn::account::detail::IAsyncContext*& _1) {
	ns_print("Stub implementation for nn::account::IBaasAccessTokenAccessor::EnsureCacheAsync\n");
	return 0;
}
uint32_t nn::account::IBaasAccessTokenAccessor::GetDeviceAccountId(nn::account::Uid _0, uint64_t& _1) {
	ns_print("Stub implementation for nn::account::IBaasAccessTokenAccessor::GetDeviceAccountId\n");
	return 0;
}
uint32_t nn::account::IBaasAccessTokenAccessor::LoadCache(nn::account::Uid _0, uint32_t& _1, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::account::IBaasAccessTokenAccessor::LoadCache\n");
	return 0;
}
uint32_t nn::account::IBaasAccessTokenAccessor::RegisterNotificationTokenAsync(nn::npns::NotificationToken _0, nn::account::Uid _1, nn::account::detail::IAsyncContext*& _2) {
	ns_print("Stub implementation for nn::account::IBaasAccessTokenAccessor::RegisterNotificationTokenAsync\n");
	return 0;
}
uint32_t nn::account::IBaasAccessTokenAccessor::UnregisterNotificationTokenAsync(nn::account::Uid _0, nn::account::detail::IAsyncContext*& _1) {
	ns_print("Stub implementation for nn::account::IBaasAccessTokenAccessor::UnregisterNotificationTokenAsync\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::account::baas {
	class IAdministrator : public IpcService {
	public:
		IAdministrator() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::baas::IAdministrator::CheckAvailability\n");
				resp->error_code = CheckAvailability();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::account::baas::IAdministrator::GetAccountId\n");
				resp->error_code = GetAccountId(*resp->GetDataPointer<nn::account::NetworkServiceAccountId *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::baas::IAdministrator::EnsureIdTokenCacheAsync\n");
				resp->error_code = EnsureIdTokenCacheAsync(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::baas::IAdministrator::LoadIdTokenCache\n");
				resp->error_code = LoadIdTokenCache(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::account::SystemProgramIdentification* temp3 = (nn::account::SystemProgramIdentification *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::account::baas::IAdministrator::SetSystemProgramIdentification: uint64_t = 0x%%lx, nn::account::SystemProgramIdentification *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), temp2);
				resp->error_code = SetSystemProgramIdentification(req->GetData<uint64_t>(8), req->pid, temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 120: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::account::baas::IAdministrator::GetNintendoAccountId\n");
				resp->error_code = GetNintendoAccountId(*resp->GetDataPointer<nn::account::NintendoAccountId *>(8));
				return 0;
			}
			case 130: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::account::nas::NasUserBase* temp3 = (nn::account::nas::NasUserBase *) new uint8_t[temp2];
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::account::baas::IAdministrator::GetNintendoAccountUserResourceCache\n");
				resp->error_code = GetNintendoAccountUserResourceCache(*resp->GetDataPointer<nn::account::NintendoAccountId *>(8), temp3, temp2, temp6, temp5);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 131: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::baas::IAdministrator::RefreshNintendoAccountUserResourceCacheAsync\n");
				resp->error_code = RefreshNintendoAccountUserResourceCacheAsync(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 132: {
				resp->GenBuf(1, 0, 1);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::baas::IAdministrator::RefreshNintendoAccountUserResourceCacheAsyncIfSecondsElapsed: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = RefreshNintendoAccountUserResourceCacheAsyncIfSecondsElapsed(req->GetData<uint32_t>(8), *resp->GetDataPointer<bool *>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 150: {
				resp->GenBuf(1, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::account::nas::NasClientInfo* temp3 = (nn::account::nas::NasClientInfo *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x19, 1, temp5);
				nn::account::NintendoAccountAuthorizationRequestParameters* temp6 = (nn::account::NintendoAccountAuthorizationRequestParameters *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				nn::account::nas::IAuthorizationRequest* temp7;
				ns_print("IPC message to nn::account::baas::IAdministrator::CreateAuthorizationRequest: uint32_t = 0x%x, KObject = 0x%x, nn::account::nas::NasClientInfo *= buffer<0x%lx>, nn::account::NintendoAccountAuthorizationRequestParameters *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), req->GetCopied(0), temp2, temp5);
				resp->error_code = CreateAuthorizationRequest(req->GetData<uint32_t>(8), IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp3, temp2, temp6, temp5, temp7);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				if(temp7 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp7));
				return 0;
			}
			case 200: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::account::baas::IAdministrator::IsRegistered\n");
				resp->error_code = IsRegistered(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 201: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::baas::IAdministrator::RegisterAsync\n");
				resp->error_code = RegisterAsync(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 202: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::baas::IAdministrator::UnregisterAsync\n");
				resp->error_code = UnregisterAsync(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 203: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::baas::IAdministrator::DeleteRegistrationInfoLocally\n");
				resp->error_code = DeleteRegistrationInfoLocally();
				return 0;
			}
			case 220: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::baas::IAdministrator::SynchronizeProfileAsync\n");
				resp->error_code = SynchronizeProfileAsync(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 221: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::baas::IAdministrator::UploadProfileAsync\n");
				resp->error_code = UploadProfileAsync(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 222: {
				resp->GenBuf(1, 0, 1);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::baas::IAdministrator::SynchronizeProfileAsyncIfSecondsElapsed: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = SynchronizeProfileAsyncIfSecondsElapsed(req->GetData<uint32_t>(8), *resp->GetDataPointer<bool *>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 250: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::account::baas::IAdministrator::IsLinkedWithNintendoAccount\n");
				resp->error_code = IsLinkedWithNintendoAccount(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 251: {
				resp->GenBuf(1, 0, 0);
				nn::account::nas::IOAuthProcedureForNintendoAccountLinkage* temp1;
				ns_print("IPC message to nn::account::baas::IAdministrator::CreateProcedureToLinkWithNintendoAccount\n");
				resp->error_code = CreateProcedureToLinkWithNintendoAccount(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 252: {
				resp->GenBuf(1, 0, 0);
				nn::account::nas::IOAuthProcedureForNintendoAccountLinkage* temp1;
				ns_print("IPC message to nn::account::baas::IAdministrator::ResumeProcedureToLinkWithNintendoAccount: nn::account::detail::Uuid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = ResumeProcedureToLinkWithNintendoAccount(req->GetData<nn::account::detail::Uuid>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 255: {
				resp->GenBuf(1, 0, 0);
				nn::account::http::IOAuthProcedure* temp1;
				ns_print("IPC message to nn::account::baas::IAdministrator::CreateProcedureToUpdateLinkageStateOfNintendoAccount\n");
				resp->error_code = CreateProcedureToUpdateLinkageStateOfNintendoAccount(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 256: {
				resp->GenBuf(1, 0, 0);
				nn::account::http::IOAuthProcedure* temp1;
				ns_print("IPC message to nn::account::baas::IAdministrator::ResumeProcedureToUpdateLinkageStateOfNintendoAccount: nn::account::detail::Uuid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = ResumeProcedureToUpdateLinkageStateOfNintendoAccount(req->GetData<nn::account::detail::Uuid>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 260: {
				resp->GenBuf(1, 0, 0);
				nn::account::http::IOAuthProcedure* temp1;
				ns_print("IPC message to nn::account::baas::IAdministrator::CreateProcedureToLinkNnidWithNintendoAccount\n");
				resp->error_code = CreateProcedureToLinkNnidWithNintendoAccount(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 261: {
				resp->GenBuf(1, 0, 0);
				nn::account::http::IOAuthProcedure* temp1;
				ns_print("IPC message to nn::account::baas::IAdministrator::ResumeProcedureToLinkNnidWithNintendoAccount: nn::account::detail::Uuid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = ResumeProcedureToLinkNnidWithNintendoAccount(req->GetData<nn::account::detail::Uuid>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 280: {
				resp->GenBuf(1, 0, 0);
				nn::account::http::IOAuthProcedure* temp1;
				ns_print("IPC message to nn::account::baas::IAdministrator::ProxyProcedureToAcquireApplicationAuthorizationForNintendoAccount: nn::account::detail::Uuid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = ProxyProcedureToAcquireApplicationAuthorizationForNintendoAccount(req->GetData<nn::account::detail::Uuid>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 997: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::baas::IAdministrator::DebugUnlinkNintendoAccountAsync\n");
				resp->error_code = DebugUnlinkNintendoAccountAsync(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 998: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::baas::IAdministrator::DebugSetAvailabilityErrorDetail: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = DebugSetAvailabilityErrorDetail(req->GetData<uint32_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::account::baas::IAdministrator", req->cmd_id);
			}
		}
		uint32_t CheckAvailability();
		uint32_t CreateAuthorizationRequest(uint32_t _0, IpcService* _1, nn::account::nas::NasClientInfo * _2, unsigned int _2_size, nn::account::NintendoAccountAuthorizationRequestParameters * _3, unsigned int _3_size, nn::account::nas::IAuthorizationRequest*& _4);
		uint32_t CreateProcedureToLinkNnidWithNintendoAccount(nn::account::http::IOAuthProcedure*& _0);
		uint32_t CreateProcedureToLinkWithNintendoAccount(nn::account::nas::IOAuthProcedureForNintendoAccountLinkage*& _0);
		uint32_t CreateProcedureToUpdateLinkageStateOfNintendoAccount(nn::account::http::IOAuthProcedure*& _0);
		uint32_t DebugSetAvailabilityErrorDetail(uint32_t _0);
		uint32_t DebugUnlinkNintendoAccountAsync(nn::account::detail::IAsyncContext*& _0);
		uint32_t DeleteRegistrationInfoLocally();
		uint32_t EnsureIdTokenCacheAsync(nn::account::detail::IAsyncContext*& _0);
		uint32_t GetAccountId(nn::account::NetworkServiceAccountId& _0);
		uint32_t GetNintendoAccountId(nn::account::NintendoAccountId& _0);
		uint32_t GetNintendoAccountUserResourceCache(nn::account::NintendoAccountId& _0, nn::account::nas::NasUserBase *& _1, unsigned int _1_size, uint8_t *& _2, unsigned int _2_size);
		uint32_t IsLinkedWithNintendoAccount(bool& _0);
		uint32_t IsRegistered(bool& _0);
		uint32_t LoadIdTokenCache(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t ProxyProcedureToAcquireApplicationAuthorizationForNintendoAccount(nn::account::detail::Uuid _0, nn::account::http::IOAuthProcedure*& _1);
		uint32_t RefreshNintendoAccountUserResourceCacheAsync(nn::account::detail::IAsyncContext*& _0);
		uint32_t RefreshNintendoAccountUserResourceCacheAsyncIfSecondsElapsed(uint32_t _0, bool& _1, nn::account::detail::IAsyncContext*& _2);
		uint32_t RegisterAsync(nn::account::detail::IAsyncContext*& _0);
		uint32_t ResumeProcedureToLinkNnidWithNintendoAccount(nn::account::detail::Uuid _0, nn::account::http::IOAuthProcedure*& _1);
		uint32_t ResumeProcedureToLinkWithNintendoAccount(nn::account::detail::Uuid _0, nn::account::nas::IOAuthProcedureForNintendoAccountLinkage*& _1);
		uint32_t ResumeProcedureToUpdateLinkageStateOfNintendoAccount(nn::account::detail::Uuid _0, nn::account::http::IOAuthProcedure*& _1);
		uint32_t SetSystemProgramIdentification(uint64_t _0, uint64_t _1, nn::account::SystemProgramIdentification * _2, unsigned int _2_size);
		uint32_t SynchronizeProfileAsync(nn::account::detail::IAsyncContext*& _0);
		uint32_t SynchronizeProfileAsyncIfSecondsElapsed(uint32_t _0, bool& _1, nn::account::detail::IAsyncContext*& _2);
		uint32_t UnregisterAsync(nn::account::detail::IAsyncContext*& _0);
		uint32_t UploadProfileAsync(nn::account::detail::IAsyncContext*& _0);
	};
	class IFloatingRegistrationRequest : public IpcService {
	public:
		IFloatingRegistrationRequest() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::account::baas::IFloatingRegistrationRequest::GetSessionId\n");
				resp->error_code = GetSessionId(*resp->GetDataPointer<nn::account::detail::Uuid *>(8));
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::account::baas::IFloatingRegistrationRequest::GetAccountId\n");
				resp->error_code = GetAccountId(*resp->GetDataPointer<nn::account::NetworkServiceAccountId *>(8));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::account::baas::IFloatingRegistrationRequest::GetLinkedNintendoAccountId\n");
				resp->error_code = GetLinkedNintendoAccountId(*resp->GetDataPointer<nn::account::NintendoAccountId *>(8));
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::baas::IFloatingRegistrationRequest::GetNickname\n");
				resp->error_code = GetNickname(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::baas::IFloatingRegistrationRequest::GetProfileImage\n");
				resp->error_code = GetProfileImage(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::baas::IFloatingRegistrationRequest::LoadIdTokenCache\n");
				resp->error_code = LoadIdTokenCache(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 100: {
				resp->GenBuf(1, 0, 16);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::baas::IFloatingRegistrationRequest::RegisterAsync\n");
				resp->error_code = RegisterAsync(*resp->GetDataPointer<nn::account::Uid *>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 101: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::baas::IFloatingRegistrationRequest::RegisterWithUidAsync: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = RegisterWithUidAsync(req->GetData<nn::account::Uid>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 110: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::account::SystemProgramIdentification* temp3 = (nn::account::SystemProgramIdentification *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::account::baas::IFloatingRegistrationRequest::SetSystemProgramIdentification: uint64_t = 0x%%lx, nn::account::SystemProgramIdentification *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), temp2);
				resp->error_code = SetSystemProgramIdentification(req->GetData<uint64_t>(8), req->pid, temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 111: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::baas::IFloatingRegistrationRequest::EnsureIdTokenCacheAsync\n");
				resp->error_code = EnsureIdTokenCacheAsync(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::account::baas::IFloatingRegistrationRequest", req->cmd_id);
			}
		}
		uint32_t EnsureIdTokenCacheAsync(nn::account::detail::IAsyncContext*& _0);
		uint32_t GetAccountId(nn::account::NetworkServiceAccountId& _0);
		uint32_t GetLinkedNintendoAccountId(nn::account::NintendoAccountId& _0);
		uint32_t GetNickname(int8_t *& _0, unsigned int _0_size);
		uint32_t GetProfileImage(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t GetSessionId(nn::account::detail::Uuid& _0);
		uint32_t LoadIdTokenCache(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t RegisterAsync(nn::account::Uid& _0, nn::account::detail::IAsyncContext*& _1);
		uint32_t RegisterWithUidAsync(nn::account::Uid _0, nn::account::detail::IAsyncContext*& _1);
		uint32_t SetSystemProgramIdentification(uint64_t _0, uint64_t _1, nn::account::SystemProgramIdentification * _2, unsigned int _2_size);
	};
	class IGuestLoginRequest : public IpcService {
	public:
		IGuestLoginRequest() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::account::baas::IGuestLoginRequest::GetSessionId\n");
				resp->error_code = GetSessionId(*resp->GetDataPointer<nn::account::detail::Uuid *>(8));
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::account::baas::IGuestLoginRequest::GetAccountId\n");
				resp->error_code = GetAccountId(*resp->GetDataPointer<nn::account::NetworkServiceAccountId *>(8));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::account::baas::IGuestLoginRequest::GetLinkedNintendoAccountId\n");
				resp->error_code = GetLinkedNintendoAccountId(*resp->GetDataPointer<nn::account::NintendoAccountId *>(8));
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::baas::IGuestLoginRequest::GetNickname\n");
				resp->error_code = GetNickname(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::baas::IGuestLoginRequest::GetProfileImage\n");
				resp->error_code = GetProfileImage(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::baas::IGuestLoginRequest::LoadIdTokenCache\n");
				resp->error_code = LoadIdTokenCache(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::account::baas::IGuestLoginRequest", req->cmd_id);
			}
		}
		uint32_t GetAccountId(nn::account::NetworkServiceAccountId& _0);
		uint32_t GetLinkedNintendoAccountId(nn::account::NintendoAccountId& _0);
		uint32_t GetNickname(int8_t *& _0, unsigned int _0_size);
		uint32_t GetProfileImage(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t GetSessionId(nn::account::detail::Uuid& _0);
		uint32_t LoadIdTokenCache(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
	};
	class IManagerForApplication : public IpcService {
	public:
		IManagerForApplication() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::baas::IManagerForApplication::CheckAvailability\n");
				resp->error_code = CheckAvailability();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::account::baas::IManagerForApplication::GetAccountId\n");
				resp->error_code = GetAccountId(*resp->GetDataPointer<nn::account::NetworkServiceAccountId *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::baas::IManagerForApplication::EnsureIdTokenCacheAsync\n");
				resp->error_code = EnsureIdTokenCacheAsync(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::baas::IManagerForApplication::LoadIdTokenCache\n");
				resp->error_code = LoadIdTokenCache(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 130: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::account::nas::NasUserBaseForApplication* temp3 = (nn::account::nas::NasUserBaseForApplication *) new uint8_t[temp2];
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::account::baas::IManagerForApplication::GetNintendoAccountUserResourceCacheForApplication\n");
				resp->error_code = GetNintendoAccountUserResourceCacheForApplication(*resp->GetDataPointer<nn::account::NintendoAccountId *>(8), temp3, temp2, temp6, temp5);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 150: {
				resp->GenBuf(1, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::account::NintendoAccountAuthorizationRequestParameters* temp3 = (nn::account::NintendoAccountAuthorizationRequestParameters *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				nn::account::nas::IAuthorizationRequest* temp4;
				ns_print("IPC message to nn::account::baas::IManagerForApplication::CreateAuthorizationRequest: uint32_t = 0x%x, KObject = 0x%x, nn::account::NintendoAccountAuthorizationRequestParameters *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), req->GetCopied(0), temp2);
				resp->error_code = CreateAuthorizationRequest(req->GetData<uint32_t>(8), IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp3, temp2, temp4);
				delete[] (uint8_t *) temp3;
				if(temp4 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp4));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::account::baas::IManagerForApplication", req->cmd_id);
			}
		}
		uint32_t CheckAvailability();
		uint32_t CreateAuthorizationRequest(uint32_t _0, IpcService* _1, nn::account::NintendoAccountAuthorizationRequestParameters * _2, unsigned int _2_size, nn::account::nas::IAuthorizationRequest*& _3);
		uint32_t EnsureIdTokenCacheAsync(nn::account::detail::IAsyncContext*& _0);
		uint32_t GetAccountId(nn::account::NetworkServiceAccountId& _0);
		uint32_t GetNintendoAccountUserResourceCacheForApplication(nn::account::NintendoAccountId& _0, nn::account::nas::NasUserBaseForApplication *& _1, unsigned int _1_size, uint8_t *& _2, unsigned int _2_size);
		uint32_t LoadIdTokenCache(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
	};
	class IManagerForSystemService : public IpcService {
	public:
		IManagerForSystemService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::baas::IManagerForSystemService::CheckAvailability\n");
				resp->error_code = CheckAvailability();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::account::baas::IManagerForSystemService::GetAccountId\n");
				resp->error_code = GetAccountId(*resp->GetDataPointer<nn::account::NetworkServiceAccountId *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::baas::IManagerForSystemService::EnsureIdTokenCacheAsync\n");
				resp->error_code = EnsureIdTokenCacheAsync(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::baas::IManagerForSystemService::LoadIdTokenCache\n");
				resp->error_code = LoadIdTokenCache(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::account::SystemProgramIdentification* temp3 = (nn::account::SystemProgramIdentification *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::account::baas::IManagerForSystemService::SetSystemProgramIdentification: uint64_t = 0x%%lx, nn::account::SystemProgramIdentification *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), temp2);
				resp->error_code = SetSystemProgramIdentification(req->GetData<uint64_t>(8), req->pid, temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 120: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::account::baas::IManagerForSystemService::GetNintendoAccountId\n");
				resp->error_code = GetNintendoAccountId(*resp->GetDataPointer<nn::account::NintendoAccountId *>(8));
				return 0;
			}
			case 130: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::account::nas::NasUserBase* temp3 = (nn::account::nas::NasUserBase *) new uint8_t[temp2];
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::account::baas::IManagerForSystemService::GetNintendoAccountUserResourceCache\n");
				resp->error_code = GetNintendoAccountUserResourceCache(*resp->GetDataPointer<nn::account::NintendoAccountId *>(8), temp3, temp2, temp6, temp5);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 131: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::baas::IManagerForSystemService::RefreshNintendoAccountUserResourceCacheAsync\n");
				resp->error_code = RefreshNintendoAccountUserResourceCacheAsync(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 132: {
				resp->GenBuf(1, 0, 1);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::baas::IManagerForSystemService::RefreshNintendoAccountUserResourceCacheAsyncIfSecondsElapsed: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = RefreshNintendoAccountUserResourceCacheAsyncIfSecondsElapsed(req->GetData<uint32_t>(8), *resp->GetDataPointer<bool *>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 150: {
				resp->GenBuf(1, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::account::nas::NasClientInfo* temp3 = (nn::account::nas::NasClientInfo *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x19, 1, temp5);
				nn::account::NintendoAccountAuthorizationRequestParameters* temp6 = (nn::account::NintendoAccountAuthorizationRequestParameters *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				nn::account::nas::IAuthorizationRequest* temp7;
				ns_print("IPC message to nn::account::baas::IManagerForSystemService::CreateAuthorizationRequest: uint32_t = 0x%x, KObject = 0x%x, nn::account::nas::NasClientInfo *= buffer<0x%lx>, nn::account::NintendoAccountAuthorizationRequestParameters *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), req->GetCopied(0), temp2, temp5);
				resp->error_code = CreateAuthorizationRequest(req->GetData<uint32_t>(8), IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp3, temp2, temp6, temp5, temp7);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				if(temp7 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp7));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::account::baas::IManagerForSystemService", req->cmd_id);
			}
		}
		uint32_t CheckAvailability();
		uint32_t CreateAuthorizationRequest(uint32_t _0, IpcService* _1, nn::account::nas::NasClientInfo * _2, unsigned int _2_size, nn::account::NintendoAccountAuthorizationRequestParameters * _3, unsigned int _3_size, nn::account::nas::IAuthorizationRequest*& _4);
		uint32_t EnsureIdTokenCacheAsync(nn::account::detail::IAsyncContext*& _0);
		uint32_t GetAccountId(nn::account::NetworkServiceAccountId& _0);
		uint32_t GetNintendoAccountId(nn::account::NintendoAccountId& _0);
		uint32_t GetNintendoAccountUserResourceCache(nn::account::NintendoAccountId& _0, nn::account::nas::NasUserBase *& _1, unsigned int _1_size, uint8_t *& _2, unsigned int _2_size);
		uint32_t LoadIdTokenCache(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t RefreshNintendoAccountUserResourceCacheAsync(nn::account::detail::IAsyncContext*& _0);
		uint32_t RefreshNintendoAccountUserResourceCacheAsyncIfSecondsElapsed(uint32_t _0, bool& _1, nn::account::detail::IAsyncContext*& _2);
		uint32_t SetSystemProgramIdentification(uint64_t _0, uint64_t _1, nn::account::SystemProgramIdentification * _2, unsigned int _2_size);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::account::baas::IAdministrator::CheckAvailability() {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::CheckAvailability\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::CreateAuthorizationRequest(uint32_t _0, IpcService* _1, nn::account::nas::NasClientInfo * _2, unsigned int _2_size, nn::account::NintendoAccountAuthorizationRequestParameters * _3, unsigned int _3_size, nn::account::nas::IAuthorizationRequest*& _4) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::CreateAuthorizationRequest\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::CreateProcedureToLinkNnidWithNintendoAccount(nn::account::http::IOAuthProcedure*& _0) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::CreateProcedureToLinkNnidWithNintendoAccount\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::CreateProcedureToLinkWithNintendoAccount(nn::account::nas::IOAuthProcedureForNintendoAccountLinkage*& _0) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::CreateProcedureToLinkWithNintendoAccount\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::CreateProcedureToUpdateLinkageStateOfNintendoAccount(nn::account::http::IOAuthProcedure*& _0) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::CreateProcedureToUpdateLinkageStateOfNintendoAccount\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::DebugSetAvailabilityErrorDetail(uint32_t _0) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::DebugSetAvailabilityErrorDetail\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::DebugUnlinkNintendoAccountAsync(nn::account::detail::IAsyncContext*& _0) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::DebugUnlinkNintendoAccountAsync\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::DeleteRegistrationInfoLocally() {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::DeleteRegistrationInfoLocally\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::EnsureIdTokenCacheAsync(nn::account::detail::IAsyncContext*& _0) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::EnsureIdTokenCacheAsync\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::GetAccountId(nn::account::NetworkServiceAccountId& _0) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::GetAccountId\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::GetNintendoAccountId(nn::account::NintendoAccountId& _0) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::GetNintendoAccountId\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::GetNintendoAccountUserResourceCache(nn::account::NintendoAccountId& _0, nn::account::nas::NasUserBase *& _1, unsigned int _1_size, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::GetNintendoAccountUserResourceCache\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::IsLinkedWithNintendoAccount(bool& _0) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::IsLinkedWithNintendoAccount\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::IsRegistered(bool& _0) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::IsRegistered\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::LoadIdTokenCache(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::LoadIdTokenCache\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::ProxyProcedureToAcquireApplicationAuthorizationForNintendoAccount(nn::account::detail::Uuid _0, nn::account::http::IOAuthProcedure*& _1) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::ProxyProcedureToAcquireApplicationAuthorizationForNintendoAccount\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::RefreshNintendoAccountUserResourceCacheAsync(nn::account::detail::IAsyncContext*& _0) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::RefreshNintendoAccountUserResourceCacheAsync\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::RefreshNintendoAccountUserResourceCacheAsyncIfSecondsElapsed(uint32_t _0, bool& _1, nn::account::detail::IAsyncContext*& _2) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::RefreshNintendoAccountUserResourceCacheAsyncIfSecondsElapsed\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::RegisterAsync(nn::account::detail::IAsyncContext*& _0) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::RegisterAsync\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::ResumeProcedureToLinkNnidWithNintendoAccount(nn::account::detail::Uuid _0, nn::account::http::IOAuthProcedure*& _1) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::ResumeProcedureToLinkNnidWithNintendoAccount\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::ResumeProcedureToLinkWithNintendoAccount(nn::account::detail::Uuid _0, nn::account::nas::IOAuthProcedureForNintendoAccountLinkage*& _1) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::ResumeProcedureToLinkWithNintendoAccount\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::ResumeProcedureToUpdateLinkageStateOfNintendoAccount(nn::account::detail::Uuid _0, nn::account::http::IOAuthProcedure*& _1) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::ResumeProcedureToUpdateLinkageStateOfNintendoAccount\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::SetSystemProgramIdentification(uint64_t _0, uint64_t _1, nn::account::SystemProgramIdentification * _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::SetSystemProgramIdentification\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::SynchronizeProfileAsync(nn::account::detail::IAsyncContext*& _0) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::SynchronizeProfileAsync\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::SynchronizeProfileAsyncIfSecondsElapsed(uint32_t _0, bool& _1, nn::account::detail::IAsyncContext*& _2) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::SynchronizeProfileAsyncIfSecondsElapsed\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::UnregisterAsync(nn::account::detail::IAsyncContext*& _0) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::UnregisterAsync\n");
	return 0;
}
uint32_t nn::account::baas::IAdministrator::UploadProfileAsync(nn::account::detail::IAsyncContext*& _0) {
	ns_print("Stub implementation for nn::account::baas::IAdministrator::UploadProfileAsync\n");
	return 0;
}
uint32_t nn::account::baas::IFloatingRegistrationRequest::EnsureIdTokenCacheAsync(nn::account::detail::IAsyncContext*& _0) {
	ns_print("Stub implementation for nn::account::baas::IFloatingRegistrationRequest::EnsureIdTokenCacheAsync\n");
	return 0;
}
uint32_t nn::account::baas::IFloatingRegistrationRequest::GetAccountId(nn::account::NetworkServiceAccountId& _0) {
	ns_print("Stub implementation for nn::account::baas::IFloatingRegistrationRequest::GetAccountId\n");
	return 0;
}
uint32_t nn::account::baas::IFloatingRegistrationRequest::GetLinkedNintendoAccountId(nn::account::NintendoAccountId& _0) {
	ns_print("Stub implementation for nn::account::baas::IFloatingRegistrationRequest::GetLinkedNintendoAccountId\n");
	return 0;
}
uint32_t nn::account::baas::IFloatingRegistrationRequest::GetNickname(int8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::account::baas::IFloatingRegistrationRequest::GetNickname\n");
	return 0;
}
uint32_t nn::account::baas::IFloatingRegistrationRequest::GetProfileImage(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::account::baas::IFloatingRegistrationRequest::GetProfileImage\n");
	return 0;
}
uint32_t nn::account::baas::IFloatingRegistrationRequest::GetSessionId(nn::account::detail::Uuid& _0) {
	ns_print("Stub implementation for nn::account::baas::IFloatingRegistrationRequest::GetSessionId\n");
	return 0;
}
uint32_t nn::account::baas::IFloatingRegistrationRequest::LoadIdTokenCache(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::account::baas::IFloatingRegistrationRequest::LoadIdTokenCache\n");
	return 0;
}
uint32_t nn::account::baas::IFloatingRegistrationRequest::RegisterAsync(nn::account::Uid& _0, nn::account::detail::IAsyncContext*& _1) {
	ns_print("Stub implementation for nn::account::baas::IFloatingRegistrationRequest::RegisterAsync\n");
	return 0;
}
uint32_t nn::account::baas::IFloatingRegistrationRequest::RegisterWithUidAsync(nn::account::Uid _0, nn::account::detail::IAsyncContext*& _1) {
	ns_print("Stub implementation for nn::account::baas::IFloatingRegistrationRequest::RegisterWithUidAsync\n");
	return 0;
}
uint32_t nn::account::baas::IFloatingRegistrationRequest::SetSystemProgramIdentification(uint64_t _0, uint64_t _1, nn::account::SystemProgramIdentification * _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::account::baas::IFloatingRegistrationRequest::SetSystemProgramIdentification\n");
	return 0;
}
uint32_t nn::account::baas::IGuestLoginRequest::GetAccountId(nn::account::NetworkServiceAccountId& _0) {
	ns_print("Stub implementation for nn::account::baas::IGuestLoginRequest::GetAccountId\n");
	return 0;
}
uint32_t nn::account::baas::IGuestLoginRequest::GetLinkedNintendoAccountId(nn::account::NintendoAccountId& _0) {
	ns_print("Stub implementation for nn::account::baas::IGuestLoginRequest::GetLinkedNintendoAccountId\n");
	return 0;
}
uint32_t nn::account::baas::IGuestLoginRequest::GetNickname(int8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::account::baas::IGuestLoginRequest::GetNickname\n");
	return 0;
}
uint32_t nn::account::baas::IGuestLoginRequest::GetProfileImage(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::account::baas::IGuestLoginRequest::GetProfileImage\n");
	return 0;
}
uint32_t nn::account::baas::IGuestLoginRequest::GetSessionId(nn::account::detail::Uuid& _0) {
	ns_print("Stub implementation for nn::account::baas::IGuestLoginRequest::GetSessionId\n");
	return 0;
}
uint32_t nn::account::baas::IGuestLoginRequest::LoadIdTokenCache(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::account::baas::IGuestLoginRequest::LoadIdTokenCache\n");
	return 0;
}
uint32_t nn::account::baas::IManagerForApplication::CheckAvailability() {
	ns_print("Stub implementation for nn::account::baas::IManagerForApplication::CheckAvailability\n");
	return 0;
}
uint32_t nn::account::baas::IManagerForApplication::CreateAuthorizationRequest(uint32_t _0, IpcService* _1, nn::account::NintendoAccountAuthorizationRequestParameters * _2, unsigned int _2_size, nn::account::nas::IAuthorizationRequest*& _3) {
	ns_print("Stub implementation for nn::account::baas::IManagerForApplication::CreateAuthorizationRequest\n");
	return 0;
}
uint32_t nn::account::baas::IManagerForApplication::EnsureIdTokenCacheAsync(nn::account::detail::IAsyncContext*& _0) {
	ns_print("Stub implementation for nn::account::baas::IManagerForApplication::EnsureIdTokenCacheAsync\n");
	return 0;
}
uint32_t nn::account::baas::IManagerForApplication::GetAccountId(nn::account::NetworkServiceAccountId& _0) {
	ns_print("Stub implementation for nn::account::baas::IManagerForApplication::GetAccountId\n");
	return 0;
}
uint32_t nn::account::baas::IManagerForApplication::GetNintendoAccountUserResourceCacheForApplication(nn::account::NintendoAccountId& _0, nn::account::nas::NasUserBaseForApplication *& _1, unsigned int _1_size, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::account::baas::IManagerForApplication::GetNintendoAccountUserResourceCacheForApplication\n");
	return 0;
}
uint32_t nn::account::baas::IManagerForApplication::LoadIdTokenCache(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::account::baas::IManagerForApplication::LoadIdTokenCache\n");
	return 0;
}
uint32_t nn::account::baas::IManagerForSystemService::CheckAvailability() {
	ns_print("Stub implementation for nn::account::baas::IManagerForSystemService::CheckAvailability\n");
	return 0;
}
uint32_t nn::account::baas::IManagerForSystemService::CreateAuthorizationRequest(uint32_t _0, IpcService* _1, nn::account::nas::NasClientInfo * _2, unsigned int _2_size, nn::account::NintendoAccountAuthorizationRequestParameters * _3, unsigned int _3_size, nn::account::nas::IAuthorizationRequest*& _4) {
	ns_print("Stub implementation for nn::account::baas::IManagerForSystemService::CreateAuthorizationRequest\n");
	return 0;
}
uint32_t nn::account::baas::IManagerForSystemService::EnsureIdTokenCacheAsync(nn::account::detail::IAsyncContext*& _0) {
	ns_print("Stub implementation for nn::account::baas::IManagerForSystemService::EnsureIdTokenCacheAsync\n");
	return 0;
}
uint32_t nn::account::baas::IManagerForSystemService::GetAccountId(nn::account::NetworkServiceAccountId& _0) {
	ns_print("Stub implementation for nn::account::baas::IManagerForSystemService::GetAccountId\n");
	return 0;
}
uint32_t nn::account::baas::IManagerForSystemService::GetNintendoAccountId(nn::account::NintendoAccountId& _0) {
	ns_print("Stub implementation for nn::account::baas::IManagerForSystemService::GetNintendoAccountId\n");
	return 0;
}
uint32_t nn::account::baas::IManagerForSystemService::GetNintendoAccountUserResourceCache(nn::account::NintendoAccountId& _0, nn::account::nas::NasUserBase *& _1, unsigned int _1_size, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::account::baas::IManagerForSystemService::GetNintendoAccountUserResourceCache\n");
	return 0;
}
uint32_t nn::account::baas::IManagerForSystemService::LoadIdTokenCache(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::account::baas::IManagerForSystemService::LoadIdTokenCache\n");
	return 0;
}
uint32_t nn::account::baas::IManagerForSystemService::RefreshNintendoAccountUserResourceCacheAsync(nn::account::detail::IAsyncContext*& _0) {
	ns_print("Stub implementation for nn::account::baas::IManagerForSystemService::RefreshNintendoAccountUserResourceCacheAsync\n");
	return 0;
}
uint32_t nn::account::baas::IManagerForSystemService::RefreshNintendoAccountUserResourceCacheAsyncIfSecondsElapsed(uint32_t _0, bool& _1, nn::account::detail::IAsyncContext*& _2) {
	ns_print("Stub implementation for nn::account::baas::IManagerForSystemService::RefreshNintendoAccountUserResourceCacheAsyncIfSecondsElapsed\n");
	return 0;
}
uint32_t nn::account::baas::IManagerForSystemService::SetSystemProgramIdentification(uint64_t _0, uint64_t _1, nn::account::SystemProgramIdentification * _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::account::baas::IManagerForSystemService::SetSystemProgramIdentification\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::account::detail {
	class IAsyncContext : public IpcService {
	public:
		IAsyncContext() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::account::detail::IAsyncContext::GetSystemEvent\n");
				resp->error_code = GetSystemEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::detail::IAsyncContext::Cancel\n");
				resp->error_code = Cancel();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::account::detail::IAsyncContext::HasDone\n");
				resp->error_code = HasDone(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::detail::IAsyncContext::GetResult\n");
				resp->error_code = GetResult();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::account::detail::IAsyncContext", req->cmd_id);
			}
		}
		uint32_t Cancel();
		uint32_t GetResult();
		uint32_t GetSystemEvent(IpcService*& _0);
		uint32_t HasDone(bool& _0);
	};
	class INotifier : public IpcService {
	public:
		INotifier() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::account::detail::INotifier::GetSystemEvent\n");
				resp->error_code = GetSystemEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::account::detail::INotifier", req->cmd_id);
			}
		}
		uint32_t GetSystemEvent(IpcService*& _0);
	};
	class ISessionObject : public IpcService {
	public:
		ISessionObject() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 999: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::account::detail::ISessionObject::Dummy\n");
				resp->error_code = Dummy();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::account::detail::ISessionObject", req->cmd_id);
			}
		}
		uint32_t Dummy();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::account::detail::IAsyncContext::Cancel() {
	ns_print("Stub implementation for nn::account::detail::IAsyncContext::Cancel\n");
	return 0;
}
uint32_t nn::account::detail::IAsyncContext::GetResult() {
	ns_print("Stub implementation for nn::account::detail::IAsyncContext::GetResult\n");
	return 0;
}
uint32_t nn::account::detail::IAsyncContext::GetSystemEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::account::detail::IAsyncContext::GetSystemEvent\n");
	return 0;
}
uint32_t nn::account::detail::IAsyncContext::HasDone(bool& _0) {
	ns_print("Stub implementation for nn::account::detail::IAsyncContext::HasDone\n");
	return 0;
}
uint32_t nn::account::detail::INotifier::GetSystemEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::account::detail::INotifier::GetSystemEvent\n");
	return 0;
}
uint32_t nn::account::detail::ISessionObject::Dummy() {
	ns_print("Stub implementation for nn::account::detail::ISessionObject::Dummy\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::account::http {
	class IOAuthProcedure : public IpcService {
	public:
		IOAuthProcedure() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::http::IOAuthProcedure::PrepareAsync\n");
				resp->error_code = PrepareAsync(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::account::RequestUrl* temp3 = (nn::account::RequestUrl *) new uint8_t[temp2];
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x1a, 1, temp5);
				nn::account::CallbackUri* temp6 = (nn::account::CallbackUri *) new uint8_t[temp5];
				ns_print("IPC message to nn::account::http::IOAuthProcedure::GetRequest\n");
				resp->error_code = GetRequest(temp3, temp2, temp6, temp5);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::account::http::IOAuthProcedure::ApplyResponse: int8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = ApplyResponse(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(1, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				nn::account::detail::IAsyncContext* temp4;
				ns_print("IPC message to nn::account::http::IOAuthProcedure::ApplyResponseAsync: int8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = ApplyResponseAsync(temp3, temp2, temp4);
				delete[] (uint8_t *) temp3;
				if(temp4 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp4));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::account::http::IOAuthProcedure::Suspend\n");
				resp->error_code = Suspend(*resp->GetDataPointer<nn::account::detail::Uuid *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::account::http::IOAuthProcedure", req->cmd_id);
			}
		}
		uint32_t ApplyResponse(int8_t * _0, unsigned int _0_size);
		uint32_t ApplyResponseAsync(int8_t * _0, unsigned int _0_size, nn::account::detail::IAsyncContext*& _1);
		uint32_t GetRequest(nn::account::RequestUrl *& _0, unsigned int _0_size, nn::account::CallbackUri *& _1, unsigned int _1_size);
		uint32_t PrepareAsync(nn::account::detail::IAsyncContext*& _0);
		uint32_t Suspend(nn::account::detail::Uuid& _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::account::http::IOAuthProcedure::ApplyResponse(int8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::account::http::IOAuthProcedure::ApplyResponse\n");
	return 0;
}
uint32_t nn::account::http::IOAuthProcedure::ApplyResponseAsync(int8_t * _0, unsigned int _0_size, nn::account::detail::IAsyncContext*& _1) {
	ns_print("Stub implementation for nn::account::http::IOAuthProcedure::ApplyResponseAsync\n");
	return 0;
}
uint32_t nn::account::http::IOAuthProcedure::GetRequest(nn::account::RequestUrl *& _0, unsigned int _0_size, nn::account::CallbackUri *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::account::http::IOAuthProcedure::GetRequest\n");
	return 0;
}
uint32_t nn::account::http::IOAuthProcedure::PrepareAsync(nn::account::detail::IAsyncContext*& _0) {
	ns_print("Stub implementation for nn::account::http::IOAuthProcedure::PrepareAsync\n");
	return 0;
}
uint32_t nn::account::http::IOAuthProcedure::Suspend(nn::account::detail::Uuid& _0) {
	ns_print("Stub implementation for nn::account::http::IOAuthProcedure::Suspend\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::account::nas {
	class IAuthorizationRequest : public IpcService {
	public:
		IAuthorizationRequest() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::account::nas::IAuthorizationRequest::GetSessionId\n");
				resp->error_code = GetSessionId(*resp->GetDataPointer<nn::account::detail::Uuid *>(8));
				return 0;
			}
			case 10: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::nas::IAuthorizationRequest::InvokeWithoutInteractionAsync\n");
				resp->error_code = InvokeWithoutInteractionAsync(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::account::nas::IAuthorizationRequest::IsAuthorized\n");
				resp->error_code = IsAuthorized(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::nas::IAuthorizationRequest::GetAuthorizationCode\n");
				resp->error_code = GetAuthorizationCode(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::nas::IAuthorizationRequest::GetIdToken\n");
				resp->error_code = GetIdToken(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::account::nas::State* temp3 = (nn::account::nas::State *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::nas::IAuthorizationRequest::GetState\n");
				resp->error_code = GetState(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::account::nas::IAuthorizationRequest", req->cmd_id);
			}
		}
		uint32_t GetAuthorizationCode(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t GetIdToken(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t GetSessionId(nn::account::detail::Uuid& _0);
		uint32_t GetState(nn::account::nas::State *& _0, unsigned int _0_size);
		uint32_t InvokeWithoutInteractionAsync(nn::account::detail::IAsyncContext*& _0);
		uint32_t IsAuthorized(bool& _0);
	};
	class IOAuthProcedureForExternalNsa : public IpcService {
	public:
		IOAuthProcedureForExternalNsa() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::nas::IOAuthProcedureForExternalNsa::PrepareAsync\n");
				resp->error_code = PrepareAsync(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::account::RequestUrl* temp3 = (nn::account::RequestUrl *) new uint8_t[temp2];
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x1a, 1, temp5);
				nn::account::CallbackUri* temp6 = (nn::account::CallbackUri *) new uint8_t[temp5];
				ns_print("IPC message to nn::account::nas::IOAuthProcedureForExternalNsa::GetRequest\n");
				resp->error_code = GetRequest(temp3, temp2, temp6, temp5);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::account::nas::IOAuthProcedureForExternalNsa::ApplyResponse: int8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = ApplyResponse(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(1, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				nn::account::detail::IAsyncContext* temp4;
				ns_print("IPC message to nn::account::nas::IOAuthProcedureForExternalNsa::ApplyResponseAsync: int8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = ApplyResponseAsync(temp3, temp2, temp4);
				delete[] (uint8_t *) temp3;
				if(temp4 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp4));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::account::nas::IOAuthProcedureForExternalNsa::Suspend\n");
				resp->error_code = Suspend(*resp->GetDataPointer<nn::account::detail::Uuid *>(8));
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::account::nas::IOAuthProcedureForExternalNsa::GetAccountId\n");
				resp->error_code = GetAccountId(*resp->GetDataPointer<nn::account::NetworkServiceAccountId *>(8));
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::account::nas::IOAuthProcedureForExternalNsa::GetLinkedNintendoAccountId\n");
				resp->error_code = GetLinkedNintendoAccountId(*resp->GetDataPointer<nn::account::NintendoAccountId *>(8));
				return 0;
			}
			case 102: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::nas::IOAuthProcedureForExternalNsa::GetNickname\n");
				resp->error_code = GetNickname(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 103: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::nas::IOAuthProcedureForExternalNsa::GetProfileImage\n");
				resp->error_code = GetProfileImage(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::account::nas::IOAuthProcedureForExternalNsa", req->cmd_id);
			}
		}
		uint32_t ApplyResponse(int8_t * _0, unsigned int _0_size);
		uint32_t ApplyResponseAsync(int8_t * _0, unsigned int _0_size, nn::account::detail::IAsyncContext*& _1);
		uint32_t GetAccountId(nn::account::NetworkServiceAccountId& _0);
		uint32_t GetLinkedNintendoAccountId(nn::account::NintendoAccountId& _0);
		uint32_t GetNickname(int8_t *& _0, unsigned int _0_size);
		uint32_t GetProfileImage(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t GetRequest(nn::account::RequestUrl *& _0, unsigned int _0_size, nn::account::CallbackUri *& _1, unsigned int _1_size);
		uint32_t PrepareAsync(nn::account::detail::IAsyncContext*& _0);
		uint32_t Suspend(nn::account::detail::Uuid& _0);
	};
	class IOAuthProcedureForNintendoAccountLinkage : public IpcService {
	public:
		IOAuthProcedureForNintendoAccountLinkage() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::account::detail::IAsyncContext* temp1;
				ns_print("IPC message to nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::PrepareAsync\n");
				resp->error_code = PrepareAsync(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::account::RequestUrl* temp3 = (nn::account::RequestUrl *) new uint8_t[temp2];
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x1a, 1, temp5);
				nn::account::CallbackUri* temp6 = (nn::account::CallbackUri *) new uint8_t[temp5];
				ns_print("IPC message to nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::GetRequest\n");
				resp->error_code = GetRequest(temp3, temp2, temp6, temp5);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::ApplyResponse: int8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = ApplyResponse(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(1, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				nn::account::detail::IAsyncContext* temp4;
				ns_print("IPC message to nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::ApplyResponseAsync: int8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = ApplyResponseAsync(temp3, temp2, temp4);
				delete[] (uint8_t *) temp3;
				if(temp4 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp4));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::Suspend\n");
				resp->error_code = Suspend(*resp->GetDataPointer<nn::account::detail::Uuid *>(8));
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::account::RequestUrl* temp3 = (nn::account::RequestUrl *) new uint8_t[temp2];
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x1a, 1, temp5);
				nn::account::CallbackUri* temp6 = (nn::account::CallbackUri *) new uint8_t[temp5];
				ns_print("IPC message to nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::GetRequestWithTheme: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = GetRequestWithTheme(req->GetData<int32_t>(8), temp3, temp2, temp6, temp5);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::IsNetworkServiceAccountReplaced\n");
				resp->error_code = IsNetworkServiceAccountReplaced(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 199: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::account::RequestUrl* temp3 = (nn::account::RequestUrl *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::GetUrlForIntroductionOfExtraMembership\n");
				resp->error_code = GetUrlForIntroductionOfExtraMembership(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::account::nas::IOAuthProcedureForNintendoAccountLinkage", req->cmd_id);
			}
		}
		uint32_t ApplyResponse(int8_t * _0, unsigned int _0_size);
		uint32_t ApplyResponseAsync(int8_t * _0, unsigned int _0_size, nn::account::detail::IAsyncContext*& _1);
		uint32_t GetRequest(nn::account::RequestUrl *& _0, unsigned int _0_size, nn::account::CallbackUri *& _1, unsigned int _1_size);
		uint32_t GetRequestWithTheme(int32_t _0, nn::account::RequestUrl *& _1, unsigned int _1_size, nn::account::CallbackUri *& _2, unsigned int _2_size);
		uint32_t GetUrlForIntroductionOfExtraMembership(nn::account::RequestUrl *& _0, unsigned int _0_size);
		uint32_t IsNetworkServiceAccountReplaced(bool& _0);
		uint32_t PrepareAsync(nn::account::detail::IAsyncContext*& _0);
		uint32_t Suspend(nn::account::detail::Uuid& _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::account::nas::IAuthorizationRequest::GetAuthorizationCode(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::account::nas::IAuthorizationRequest::GetAuthorizationCode\n");
	return 0;
}
uint32_t nn::account::nas::IAuthorizationRequest::GetIdToken(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::account::nas::IAuthorizationRequest::GetIdToken\n");
	return 0;
}
uint32_t nn::account::nas::IAuthorizationRequest::GetSessionId(nn::account::detail::Uuid& _0) {
	ns_print("Stub implementation for nn::account::nas::IAuthorizationRequest::GetSessionId\n");
	return 0;
}
uint32_t nn::account::nas::IAuthorizationRequest::GetState(nn::account::nas::State *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::account::nas::IAuthorizationRequest::GetState\n");
	return 0;
}
uint32_t nn::account::nas::IAuthorizationRequest::InvokeWithoutInteractionAsync(nn::account::detail::IAsyncContext*& _0) {
	ns_print("Stub implementation for nn::account::nas::IAuthorizationRequest::InvokeWithoutInteractionAsync\n");
	return 0;
}
uint32_t nn::account::nas::IAuthorizationRequest::IsAuthorized(bool& _0) {
	ns_print("Stub implementation for nn::account::nas::IAuthorizationRequest::IsAuthorized\n");
	return 0;
}
uint32_t nn::account::nas::IOAuthProcedureForExternalNsa::ApplyResponse(int8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::account::nas::IOAuthProcedureForExternalNsa::ApplyResponse\n");
	return 0;
}
uint32_t nn::account::nas::IOAuthProcedureForExternalNsa::ApplyResponseAsync(int8_t * _0, unsigned int _0_size, nn::account::detail::IAsyncContext*& _1) {
	ns_print("Stub implementation for nn::account::nas::IOAuthProcedureForExternalNsa::ApplyResponseAsync\n");
	return 0;
}
uint32_t nn::account::nas::IOAuthProcedureForExternalNsa::GetAccountId(nn::account::NetworkServiceAccountId& _0) {
	ns_print("Stub implementation for nn::account::nas::IOAuthProcedureForExternalNsa::GetAccountId\n");
	return 0;
}
uint32_t nn::account::nas::IOAuthProcedureForExternalNsa::GetLinkedNintendoAccountId(nn::account::NintendoAccountId& _0) {
	ns_print("Stub implementation for nn::account::nas::IOAuthProcedureForExternalNsa::GetLinkedNintendoAccountId\n");
	return 0;
}
uint32_t nn::account::nas::IOAuthProcedureForExternalNsa::GetNickname(int8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::account::nas::IOAuthProcedureForExternalNsa::GetNickname\n");
	return 0;
}
uint32_t nn::account::nas::IOAuthProcedureForExternalNsa::GetProfileImage(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::account::nas::IOAuthProcedureForExternalNsa::GetProfileImage\n");
	return 0;
}
uint32_t nn::account::nas::IOAuthProcedureForExternalNsa::GetRequest(nn::account::RequestUrl *& _0, unsigned int _0_size, nn::account::CallbackUri *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::account::nas::IOAuthProcedureForExternalNsa::GetRequest\n");
	return 0;
}
uint32_t nn::account::nas::IOAuthProcedureForExternalNsa::PrepareAsync(nn::account::detail::IAsyncContext*& _0) {
	ns_print("Stub implementation for nn::account::nas::IOAuthProcedureForExternalNsa::PrepareAsync\n");
	return 0;
}
uint32_t nn::account::nas::IOAuthProcedureForExternalNsa::Suspend(nn::account::detail::Uuid& _0) {
	ns_print("Stub implementation for nn::account::nas::IOAuthProcedureForExternalNsa::Suspend\n");
	return 0;
}
uint32_t nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::ApplyResponse(int8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::ApplyResponse\n");
	return 0;
}
uint32_t nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::ApplyResponseAsync(int8_t * _0, unsigned int _0_size, nn::account::detail::IAsyncContext*& _1) {
	ns_print("Stub implementation for nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::ApplyResponseAsync\n");
	return 0;
}
uint32_t nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::GetRequest(nn::account::RequestUrl *& _0, unsigned int _0_size, nn::account::CallbackUri *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::GetRequest\n");
	return 0;
}
uint32_t nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::GetRequestWithTheme(int32_t _0, nn::account::RequestUrl *& _1, unsigned int _1_size, nn::account::CallbackUri *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::GetRequestWithTheme\n");
	return 0;
}
uint32_t nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::GetUrlForIntroductionOfExtraMembership(nn::account::RequestUrl *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::GetUrlForIntroductionOfExtraMembership\n");
	return 0;
}
uint32_t nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::IsNetworkServiceAccountReplaced(bool& _0) {
	ns_print("Stub implementation for nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::IsNetworkServiceAccountReplaced\n");
	return 0;
}
uint32_t nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::PrepareAsync(nn::account::detail::IAsyncContext*& _0) {
	ns_print("Stub implementation for nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::PrepareAsync\n");
	return 0;
}
uint32_t nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::Suspend(nn::account::detail::Uuid& _0) {
	ns_print("Stub implementation for nn::account::nas::IOAuthProcedureForNintendoAccountLinkage::Suspend\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::account::profile {
	class IProfile : public IpcService {
	public:
		IProfile() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 56);
				auto temp1 = resp->GetDataPointer<nn::account::profile::ProfileBase>(8);
				unsigned int temp3;
				auto temp2 = req->GetBuffer(0x1a, 0, temp3);
				nn::account::profile::UserData* temp4 = (nn::account::profile::UserData *) new uint8_t[temp3];
				ns_print("IPC message to nn::account::profile::IProfile::Get\n");
				resp->error_code = Get(temp1, temp4, temp3);
				ARMv8::WriteBytes(temp2, (uint8_t *) temp4, temp3);
				delete[] (uint8_t *)temp4;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 56);
				auto temp1 = resp->GetDataPointer<nn::account::profile::ProfileBase>(8);
				ns_print("IPC message to nn::account::profile::IProfile::GetBase\n");
				resp->error_code = GetBase(temp1);
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::account::profile::IProfile::GetImageSize\n");
				resp->error_code = GetImageSize(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::profile::IProfile::LoadImage\n");
				resp->error_code = LoadImage(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::account::profile::IProfile", req->cmd_id);
			}
		}
		uint32_t Get(nn::account::profile::ProfileBase& _0, nn::account::profile::UserData *& _1, unsigned int _1_size);
		uint32_t GetBase(nn::account::profile::ProfileBase& _0);
		uint32_t GetImageSize(uint32_t& _0);
		uint32_t LoadImage(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
	};
	class IProfileEditor : public IpcService {
	public:
		IProfileEditor() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 56);
				auto temp1 = resp->GetDataPointer<nn::account::profile::ProfileBase>(8);
				unsigned int temp3;
				auto temp2 = req->GetBuffer(0x1a, 0, temp3);
				nn::account::profile::UserData* temp4 = (nn::account::profile::UserData *) new uint8_t[temp3];
				ns_print("IPC message to nn::account::profile::IProfileEditor::Get\n");
				resp->error_code = Get(temp1, temp4, temp3);
				ARMv8::WriteBytes(temp2, (uint8_t *) temp4, temp3);
				delete[] (uint8_t *)temp4;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 56);
				auto temp1 = resp->GetDataPointer<nn::account::profile::ProfileBase>(8);
				ns_print("IPC message to nn::account::profile::IProfileEditor::GetBase\n");
				resp->error_code = GetBase(temp1);
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::account::profile::IProfileEditor::GetImageSize\n");
				resp->error_code = GetImageSize(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::account::profile::IProfileEditor::LoadImage\n");
				resp->error_code = LoadImage(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::account::profile::UserData* temp3 = (nn::account::profile::UserData *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::account::profile::IProfileEditor::Store: nn::account::profile::ProfileBase = %s, nn::account::profile::UserData *= buffer<0x%lx>\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x38).c_str(), temp2);
				resp->error_code = Store(req->GetDataPointer<nn::account::profile::ProfileBase>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::account::profile::UserData* temp3 = (nn::account::profile::UserData *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(5, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				ns_print("IPC message to nn::account::profile::IProfileEditor::StoreWithImage: nn::account::profile::ProfileBase = %s, nn::account::profile::UserData *= buffer<0x%lx>, uint8_t *= buffer<0x%lx>\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x38).c_str(), temp2, temp5);
				resp->error_code = StoreWithImage(req->GetDataPointer<nn::account::profile::ProfileBase>(8), temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::account::profile::IProfileEditor", req->cmd_id);
			}
		}
		uint32_t Get(nn::account::profile::ProfileBase& _0, nn::account::profile::UserData *& _1, unsigned int _1_size);
		uint32_t GetBase(nn::account::profile::ProfileBase& _0);
		uint32_t GetImageSize(uint32_t& _0);
		uint32_t LoadImage(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Store(nn::account::profile::ProfileBase _0, nn::account::profile::UserData * _1, unsigned int _1_size);
		uint32_t StoreWithImage(nn::account::profile::ProfileBase _0, nn::account::profile::UserData * _1, unsigned int _1_size, uint8_t * _2, unsigned int _2_size);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::account::profile::IProfile::Get(nn::account::profile::ProfileBase& _0, nn::account::profile::UserData *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::account::profile::IProfile::Get\n");
	return 0;
}
uint32_t nn::account::profile::IProfile::GetBase(nn::account::profile::ProfileBase& _0) {
	ns_print("Stub implementation for nn::account::profile::IProfile::GetBase\n");
	return 0;
}
uint32_t nn::account::profile::IProfile::GetImageSize(uint32_t& _0) {
	ns_print("Stub implementation for nn::account::profile::IProfile::GetImageSize\n");
	return 0;
}
uint32_t nn::account::profile::IProfile::LoadImage(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::account::profile::IProfile::LoadImage\n");
	return 0;
}
uint32_t nn::account::profile::IProfileEditor::Get(nn::account::profile::ProfileBase& _0, nn::account::profile::UserData *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::account::profile::IProfileEditor::Get\n");
	return 0;
}
uint32_t nn::account::profile::IProfileEditor::GetBase(nn::account::profile::ProfileBase& _0) {
	ns_print("Stub implementation for nn::account::profile::IProfileEditor::GetBase\n");
	return 0;
}
uint32_t nn::account::profile::IProfileEditor::GetImageSize(uint32_t& _0) {
	ns_print("Stub implementation for nn::account::profile::IProfileEditor::GetImageSize\n");
	return 0;
}
uint32_t nn::account::profile::IProfileEditor::LoadImage(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::account::profile::IProfileEditor::LoadImage\n");
	return 0;
}
uint32_t nn::account::profile::IProfileEditor::Store(nn::account::profile::ProfileBase _0, nn::account::profile::UserData * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::account::profile::IProfileEditor::Store\n");
	return 0;
}
uint32_t nn::account::profile::IProfileEditor::StoreWithImage(nn::account::profile::ProfileBase _0, nn::account::profile::UserData * _1, unsigned int _1_size, uint8_t * _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::account::profile::IProfileEditor::StoreWithImage\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::ahid {
	class ICtrlSession : public IpcService {
	public:
		ICtrlSession() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::ICtrlSession::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::ICtrlSession::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::ICtrlSession::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::ICtrlSession::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::ICtrlSession::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::ICtrlSession::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::ICtrlSession::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::ICtrlSession::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::ICtrlSession::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::ICtrlSession::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::ICtrlSession::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::ICtrlSession::Unknown11\n");
				resp->error_code = Unknown11();
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::ICtrlSession::Unknown12\n");
				resp->error_code = Unknown12();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ahid::ICtrlSession", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown10();
		uint32_t Unknown11();
		uint32_t Unknown12();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6();
		uint32_t Unknown7();
		uint32_t Unknown8();
		uint32_t Unknown9();
	};
	class IReadSession : public IpcService {
	public:
		IReadSession() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::IReadSession::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ahid::IReadSession", req->cmd_id);
			}
		}
		uint32_t Unknown0();
	};
	class IServerSession : public IpcService {
	public:
		IServerSession() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::IServerSession::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::IServerSession::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::IServerSession::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::IServerSession::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ahid::IServerSession", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::ahid::ICtrlSession::Unknown0() {
	ns_print("Stub implementation for nn::ahid::ICtrlSession::Unknown0\n");
	return 0;
}
uint32_t nn::ahid::ICtrlSession::Unknown1() {
	ns_print("Stub implementation for nn::ahid::ICtrlSession::Unknown1\n");
	return 0;
}
uint32_t nn::ahid::ICtrlSession::Unknown10() {
	ns_print("Stub implementation for nn::ahid::ICtrlSession::Unknown10\n");
	return 0;
}
uint32_t nn::ahid::ICtrlSession::Unknown11() {
	ns_print("Stub implementation for nn::ahid::ICtrlSession::Unknown11\n");
	return 0;
}
uint32_t nn::ahid::ICtrlSession::Unknown12() {
	ns_print("Stub implementation for nn::ahid::ICtrlSession::Unknown12\n");
	return 0;
}
uint32_t nn::ahid::ICtrlSession::Unknown2() {
	ns_print("Stub implementation for nn::ahid::ICtrlSession::Unknown2\n");
	return 0;
}
uint32_t nn::ahid::ICtrlSession::Unknown3() {
	ns_print("Stub implementation for nn::ahid::ICtrlSession::Unknown3\n");
	return 0;
}
uint32_t nn::ahid::ICtrlSession::Unknown4() {
	ns_print("Stub implementation for nn::ahid::ICtrlSession::Unknown4\n");
	return 0;
}
uint32_t nn::ahid::ICtrlSession::Unknown5() {
	ns_print("Stub implementation for nn::ahid::ICtrlSession::Unknown5\n");
	return 0;
}
uint32_t nn::ahid::ICtrlSession::Unknown6() {
	ns_print("Stub implementation for nn::ahid::ICtrlSession::Unknown6\n");
	return 0;
}
uint32_t nn::ahid::ICtrlSession::Unknown7() {
	ns_print("Stub implementation for nn::ahid::ICtrlSession::Unknown7\n");
	return 0;
}
uint32_t nn::ahid::ICtrlSession::Unknown8() {
	ns_print("Stub implementation for nn::ahid::ICtrlSession::Unknown8\n");
	return 0;
}
uint32_t nn::ahid::ICtrlSession::Unknown9() {
	ns_print("Stub implementation for nn::ahid::ICtrlSession::Unknown9\n");
	return 0;
}
uint32_t nn::ahid::IReadSession::Unknown0() {
	ns_print("Stub implementation for nn::ahid::IReadSession::Unknown0\n");
	return 0;
}
uint32_t nn::ahid::IServerSession::Unknown0() {
	ns_print("Stub implementation for nn::ahid::IServerSession::Unknown0\n");
	return 0;
}
uint32_t nn::ahid::IServerSession::Unknown1() {
	ns_print("Stub implementation for nn::ahid::IServerSession::Unknown1\n");
	return 0;
}
uint32_t nn::ahid::IServerSession::Unknown2() {
	ns_print("Stub implementation for nn::ahid::IServerSession::Unknown2\n");
	return 0;
}
uint32_t nn::ahid::IServerSession::Unknown3() {
	ns_print("Stub implementation for nn::ahid::IServerSession::Unknown3\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::ahid::hdr {
	class ISession : public IpcService {
	public:
		ISession() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::hdr::ISession::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::hdr::ISession::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::hdr::ISession::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::hdr::ISession::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ahid::hdr::ISession::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ahid::hdr::ISession", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::ahid::hdr::ISession::Unknown0() {
	ns_print("Stub implementation for nn::ahid::hdr::ISession::Unknown0\n");
	return 0;
}
uint32_t nn::ahid::hdr::ISession::Unknown1() {
	ns_print("Stub implementation for nn::ahid::hdr::ISession::Unknown1\n");
	return 0;
}
uint32_t nn::ahid::hdr::ISession::Unknown2() {
	ns_print("Stub implementation for nn::ahid::hdr::ISession::Unknown2\n");
	return 0;
}
uint32_t nn::ahid::hdr::ISession::Unknown3() {
	ns_print("Stub implementation for nn::ahid::hdr::ISession::Unknown3\n");
	return 0;
}
uint32_t nn::ahid::hdr::ISession::Unknown4() {
	ns_print("Stub implementation for nn::ahid::hdr::ISession::Unknown4\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::am::service {
	class IAllSystemAppletProxiesService : public IpcService {
	public:
		IAllSystemAppletProxiesService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 100: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ISystemAppletProxy* temp1;
				ns_print("IPC message to nn::am::service::IAllSystemAppletProxiesService::OpenSystemAppletProxy: uint64_t = 0x%%lx, KObject = 0x%x\n", req->GetData<uint64_t>(8), req->GetCopied(0));
				resp->error_code = OpenSystemAppletProxy(req->GetData<uint64_t>(8), req->pid, IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 200: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ILibraryAppletProxy* temp1;
				ns_print("IPC message to nn::am::service::IAllSystemAppletProxiesService::OpenLibraryAppletProxyOld: uint64_t = 0x%%lx, KObject = 0x%x\n", req->GetData<uint64_t>(8), req->GetCopied(0));
				resp->error_code = OpenLibraryAppletProxyOld(req->GetData<uint64_t>(8), req->pid, IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 201: {
				resp->GenBuf(1, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x15, 0, temp2);
				nn::am::AppletAttribute* temp3 = (nn::am::AppletAttribute *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				nn::am::service::ILibraryAppletProxy* temp4;
				ns_print("IPC message to nn::am::service::IAllSystemAppletProxiesService::OpenLibraryAppletProxy: uint64_t = 0x%%lx, KObject = 0x%x, nn::am::AppletAttribute *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetCopied(0), temp2);
				resp->error_code = OpenLibraryAppletProxy(req->GetData<uint64_t>(8), req->pid, IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp3, temp2, temp4);
				delete[] (uint8_t *) temp3;
				if(temp4 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp4));
				return 0;
			}
			case 300: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IOverlayAppletProxy* temp1;
				ns_print("IPC message to nn::am::service::IAllSystemAppletProxiesService::OpenOverlayAppletProxy: uint64_t = 0x%%lx, KObject = 0x%x\n", req->GetData<uint64_t>(8), req->GetCopied(0));
				resp->error_code = OpenOverlayAppletProxy(req->GetData<uint64_t>(8), req->pid, IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 350: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IApplicationProxy* temp1;
				ns_print("IPC message to nn::am::service::IAllSystemAppletProxiesService::OpenSystemApplicationProxy: uint64_t = 0x%%lx, KObject = 0x%x\n", req->GetData<uint64_t>(8), req->GetCopied(0));
				resp->error_code = OpenSystemApplicationProxy(req->GetData<uint64_t>(8), req->pid, IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 400: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ILibraryAppletCreator* temp1;
				ns_print("IPC message to nn::am::service::IAllSystemAppletProxiesService::CreateSelfLibraryAppletCreatorForDevelop: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = CreateSelfLibraryAppletCreatorForDevelop(req->GetData<uint64_t>(8), req->pid, temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::IAllSystemAppletProxiesService", req->cmd_id);
			}
		}
		uint32_t CreateSelfLibraryAppletCreatorForDevelop(uint64_t _0, uint64_t _1, nn::am::service::ILibraryAppletCreator*& _2);
		uint32_t OpenLibraryAppletProxy(uint64_t _0, uint64_t _1, IpcService* _2, nn::am::AppletAttribute * _3, unsigned int _3_size, nn::am::service::ILibraryAppletProxy*& _4);
		uint32_t OpenLibraryAppletProxyOld(uint64_t _0, uint64_t _1, IpcService* _2, nn::am::service::ILibraryAppletProxy*& _3);
		uint32_t OpenOverlayAppletProxy(uint64_t _0, uint64_t _1, IpcService* _2, nn::am::service::IOverlayAppletProxy*& _3);
		uint32_t OpenSystemAppletProxy(uint64_t _0, uint64_t _1, IpcService* _2, nn::am::service::ISystemAppletProxy*& _3);
		uint32_t OpenSystemApplicationProxy(uint64_t _0, uint64_t _1, IpcService* _2, nn::am::service::IApplicationProxy*& _3);
	};
	class IAppletAccessor : public IpcService {
	public:
		IAppletAccessor() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::IAppletAccessor::GetAppletStateChangedEvent\n");
				resp->error_code = GetAppletStateChangedEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::am::service::IAppletAccessor::IsCompleted\n");
				resp->error_code = IsCompleted(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IAppletAccessor::Start\n");
				resp->error_code = Start();
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IAppletAccessor::RequestExit\n");
				resp->error_code = RequestExit();
				return 0;
			}
			case 25: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IAppletAccessor::Terminate\n");
				resp->error_code = Terminate();
				return 0;
			}
			case 30: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IAppletAccessor::GetResult\n");
				resp->error_code = GetResult();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::IAppletAccessor", req->cmd_id);
			}
		}
		uint32_t GetAppletStateChangedEvent(IpcService*& _0);
		uint32_t GetResult();
		uint32_t IsCompleted(bool& _0);
		uint32_t RequestExit();
		uint32_t Start();
		uint32_t Terminate();
	};
	class IApplicationAccessor : public IpcService {
	public:
		IApplicationAccessor() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::IApplicationAccessor::GetAppletStateChangedEvent\n");
				resp->error_code = GetAppletStateChangedEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::am::service::IApplicationAccessor::IsCompleted\n");
				resp->error_code = IsCompleted(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IApplicationAccessor::Start\n");
				resp->error_code = Start();
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IApplicationAccessor::RequestExit\n");
				resp->error_code = RequestExit();
				return 0;
			}
			case 25: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IApplicationAccessor::Terminate\n");
				resp->error_code = Terminate();
				return 0;
			}
			case 30: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IApplicationAccessor::GetResult\n");
				resp->error_code = GetResult();
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IApplicationAccessor::RequestForApplicationToGetForeground\n");
				resp->error_code = RequestForApplicationToGetForeground();
				return 0;
			}
			case 110: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IApplicationAccessor::TerminateAllLibraryApplets\n");
				resp->error_code = TerminateAllLibraryApplets();
				return 0;
			}
			case 111: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::am::service::IApplicationAccessor::AreAnyLibraryAppletsLeft\n");
				resp->error_code = AreAnyLibraryAppletsLeft(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 112: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IAppletAccessor* temp1;
				ns_print("IPC message to nn::am::service::IApplicationAccessor::GetCurrentLibraryApplet\n");
				resp->error_code = GetCurrentLibraryApplet(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 120: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::am::service::IApplicationAccessor::GetApplicationId\n");
				resp->error_code = GetApplicationId(*resp->GetDataPointer<nn::ncm::ApplicationId *>(8));
				return 0;
			}
			case 121: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IApplicationAccessor::PushLaunchParameter: uint32_t = 0x%x, nn::am::service::IStorage = 0x%x\n", req->GetData<uint32_t>(8), req->GetMoved(0));
				resp->error_code = PushLaunchParameter(req->GetData<uint32_t>(8), IPC::GetHandle<nn::am::service::IStorage*>(req->GetMoved(0)));
				return 0;
			}
			case 122: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::am::service::IApplicationAccessor::GetApplicationControlProperty\n");
				resp->error_code = GetApplicationControlProperty(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 123: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::am::service::IApplicationAccessor::GetApplicationLaunchProperty\n");
				resp->error_code = GetApplicationLaunchProperty(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::IApplicationAccessor", req->cmd_id);
			}
		}
		uint32_t AreAnyLibraryAppletsLeft(bool& _0);
		uint32_t GetAppletStateChangedEvent(IpcService*& _0);
		uint32_t GetApplicationControlProperty(uint8_t *& _0, unsigned int _0_size);
		uint32_t GetApplicationId(nn::ncm::ApplicationId& _0);
		uint32_t GetApplicationLaunchProperty(uint8_t *& _0, unsigned int _0_size);
		uint32_t GetCurrentLibraryApplet(nn::am::service::IAppletAccessor*& _0);
		uint32_t GetResult();
		uint32_t IsCompleted(bool& _0);
		uint32_t PushLaunchParameter(uint32_t _0, nn::am::service::IStorage* _1);
		uint32_t RequestExit();
		uint32_t RequestForApplicationToGetForeground();
		uint32_t Start();
		uint32_t Terminate();
		uint32_t TerminateAllLibraryApplets();
	};
	class IApplicationCreator : public IpcService {
	public:
		IApplicationCreator() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IApplicationAccessor* temp1;
				ns_print("IPC message to nn::am::service::IApplicationCreator::CreateApplication: nn::ncm::ApplicationId = 0x%%lx\n", req->GetData<nn::ncm::ApplicationId>(8));
				resp->error_code = CreateApplication(req->GetData<nn::ncm::ApplicationId>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IApplicationAccessor* temp1;
				ns_print("IPC message to nn::am::service::IApplicationCreator::PopLaunchRequestedApplication\n");
				resp->error_code = PopLaunchRequestedApplication(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 10: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IApplicationAccessor* temp1;
				ns_print("IPC message to nn::am::service::IApplicationCreator::CreateSystemApplication: nn::ncm::SystemApplicationId = 0x%%lx\n", req->GetData<nn::ncm::SystemApplicationId>(8));
				resp->error_code = CreateSystemApplication(req->GetData<nn::ncm::SystemApplicationId>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 100: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IApplicationAccessor* temp1;
				ns_print("IPC message to nn::am::service::IApplicationCreator::PopFloatingApplicationForDevelopment\n");
				resp->error_code = PopFloatingApplicationForDevelopment(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::IApplicationCreator", req->cmd_id);
			}
		}
		uint32_t CreateApplication(nn::ncm::ApplicationId _0, nn::am::service::IApplicationAccessor*& _1);
		uint32_t CreateSystemApplication(nn::ncm::SystemApplicationId _0, nn::am::service::IApplicationAccessor*& _1);
		uint32_t PopFloatingApplicationForDevelopment(nn::am::service::IApplicationAccessor*& _0);
		uint32_t PopLaunchRequestedApplication(nn::am::service::IApplicationAccessor*& _0);
	};
	class IApplicationFunctions : public IpcService {
	public:
		IApplicationFunctions() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 1: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IStorage* temp1;
				ns_print("IPC message to nn::am::service::IApplicationFunctions::PopLaunchParameter: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = PopLaunchParameter(req->GetData<uint32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IApplicationFunctions::CreateApplicationAndPushAndRequestToStart: nn::ncm::ApplicationId = 0x%%lx, nn::am::service::IStorage = 0x%x\n", req->GetData<nn::ncm::ApplicationId>(8), req->GetMoved(0));
				resp->error_code = CreateApplicationAndPushAndRequestToStart(req->GetData<nn::ncm::ApplicationId>(8), IPC::GetHandle<nn::am::service::IStorage*>(req->GetMoved(0)));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IApplicationFunctions::CreateApplicationAndPushAndRequestToStartForQuest: uint32_t = 0x%x, uint32_t = 0x%x, nn::ncm::ApplicationId = 0x%%lx, nn::am::service::IStorage = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<nn::ncm::ApplicationId>(0x10), req->GetMoved(0));
				resp->error_code = CreateApplicationAndPushAndRequestToStartForQuest(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<nn::ncm::ApplicationId>(0x10), IPC::GetHandle<nn::am::service::IStorage*>(req->GetMoved(0)));
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::am::service::IApplicationFunctions::EnsureSaveData: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = EnsureSaveData(req->GetData<nn::account::Uid>(8), *resp->GetDataPointer<int64_t *>(8));
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::am::service::IApplicationFunctions::GetDesiredLanguage\n");
				resp->error_code = GetDesiredLanguage(*resp->GetDataPointer<nn::settings::LanguageCode *>(8));
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IApplicationFunctions::SetTerminateResult: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = SetTerminateResult(req->GetData<uint32_t>(8));
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::am::service::IApplicationFunctions::GetDisplayVersion\n");
				resp->error_code = GetDisplayVersion(*resp->GetDataPointer<nn::oe::DisplayVersion *>(8));
				return 0;
			}
			case 24: {
				resp->GenBuf(0, 0, 2);
				ns_print("IPC message to nn::am::service::IApplicationFunctions::GetLaunchStorageInfoForDebug\n");
				resp->error_code = GetLaunchStorageInfoForDebug(*resp->GetDataPointer<nn::ncm::StorageId *>(8), *resp->GetDataPointer<nn::ncm::StorageId *>(9));
				return 0;
			}
			case 25: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::am::service::IApplicationFunctions::ExtendSaveData: uint8_t = 0x%x, nn::account::Uid = %s, int64_t = 0x%%lx, int64_t = 0x%%lx\n", req->GetData<uint8_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str(), req->GetData<int64_t>(0x20), req->GetData<int64_t>(0x28));
				resp->error_code = ExtendSaveData(req->GetData<uint8_t>(8), req->GetData<nn::account::Uid>(0x10), req->GetData<int64_t>(0x20), req->GetData<int64_t>(0x28), *resp->GetDataPointer<int64_t *>(8));
				return 0;
			}
			case 26: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::am::service::IApplicationFunctions::GetSaveDataSize: uint8_t = 0x%x, nn::account::Uid = %s\n", req->GetData<uint8_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str());
				resp->error_code = GetSaveDataSize(req->GetData<uint8_t>(8), req->GetData<nn::account::Uid>(0x10), *resp->GetDataPointer<int64_t *>(8), *resp->GetDataPointer<int64_t *>(0x10));
				return 0;
			}
			case 30: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IApplicationFunctions::BeginBlockingHomeButtonShortAndLongPressed: int64_t = 0x%%lx\n", req->GetData<int64_t>(8));
				resp->error_code = BeginBlockingHomeButtonShortAndLongPressed(req->GetData<int64_t>(8));
				return 0;
			}
			case 31: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IApplicationFunctions::EndBlockingHomeButtonShortAndLongPressed\n");
				resp->error_code = EndBlockingHomeButtonShortAndLongPressed();
				return 0;
			}
			case 32: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IApplicationFunctions::BeginBlockingHomeButton: int64_t = 0x%%lx\n", req->GetData<int64_t>(8));
				resp->error_code = BeginBlockingHomeButton(req->GetData<int64_t>(8));
				return 0;
			}
			case 33: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IApplicationFunctions::EndBlockingHomeButton\n");
				resp->error_code = EndBlockingHomeButton();
				return 0;
			}
			case 40: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::am::service::IApplicationFunctions::NotifyRunning\n");
				resp->error_code = NotifyRunning(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 50: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::am::service::IApplicationFunctions::GetPseudoDeviceId\n");
				resp->error_code = GetPseudoDeviceId(*resp->GetDataPointer<nn::util::Uuid *>(8));
				return 0;
			}
			case 60: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IApplicationFunctions::SetMediaPlaybackStateForApplication: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetMediaPlaybackStateForApplication(req->GetData<bool>(8));
				return 0;
			}
			case 65: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::am::service::IApplicationFunctions::IsGamePlayRecordingSupported\n");
				resp->error_code = IsGamePlayRecordingSupported(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 66: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IApplicationFunctions::InitializeGamePlayRecording: uint64_t = 0x%%lx, KObject = 0x%x\n", req->GetData<uint64_t>(8), req->GetCopied(0));
				resp->error_code = InitializeGamePlayRecording(req->GetData<uint64_t>(8), IPC::GetHandle<IpcService*>(req->GetCopied(0)));
				return 0;
			}
			case 67: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IApplicationFunctions::SetGamePlayRecordingState: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = SetGamePlayRecordingState(req->GetData<int32_t>(8));
				return 0;
			}
			case 70: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IApplicationFunctions::RequestToShutdown\n");
				resp->error_code = RequestToShutdown();
				return 0;
			}
			case 71: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IApplicationFunctions::RequestToReboot\n");
				resp->error_code = RequestToReboot();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::IApplicationFunctions", req->cmd_id);
			}
		}
		uint32_t BeginBlockingHomeButton(int64_t _0);
		uint32_t BeginBlockingHomeButtonShortAndLongPressed(int64_t _0);
		uint32_t CreateApplicationAndPushAndRequestToStart(nn::ncm::ApplicationId _0, nn::am::service::IStorage* _1);
		uint32_t CreateApplicationAndPushAndRequestToStartForQuest(uint32_t _0, uint32_t _1, nn::ncm::ApplicationId _2, nn::am::service::IStorage* _3);
		uint32_t EndBlockingHomeButton();
		uint32_t EndBlockingHomeButtonShortAndLongPressed();
		uint32_t EnsureSaveData(nn::account::Uid _0, int64_t& _1);
		uint32_t ExtendSaveData(uint8_t _0, nn::account::Uid _1, int64_t _2, int64_t _3, int64_t& _4);
		uint32_t GetDesiredLanguage(nn::settings::LanguageCode& _0);
		uint32_t GetDisplayVersion(nn::oe::DisplayVersion& _0);
		uint32_t GetLaunchStorageInfoForDebug(nn::ncm::StorageId& _0, nn::ncm::StorageId& _1);
		uint32_t GetPseudoDeviceId(nn::util::Uuid& _0);
		uint32_t GetSaveDataSize(uint8_t _0, nn::account::Uid _1, int64_t& _2, int64_t& _3);
		uint32_t InitializeGamePlayRecording(uint64_t _0, IpcService* _1);
		uint32_t IsGamePlayRecordingSupported(bool& _0);
		uint32_t NotifyRunning(bool& _0);
		uint32_t PopLaunchParameter(uint32_t _0, nn::am::service::IStorage*& _1);
		uint32_t RequestToReboot();
		uint32_t RequestToShutdown();
		uint32_t SetGamePlayRecordingState(int32_t _0);
		uint32_t SetMediaPlaybackStateForApplication(bool _0);
		uint32_t SetTerminateResult(uint32_t _0);
	};
	class IApplicationProxy : public IpcService {
	public:
		IApplicationProxy() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ICommonStateGetter* temp1;
				ns_print("IPC message to nn::am::service::IApplicationProxy::GetCommonStateGetter\n");
				resp->error_code = GetCommonStateGetter(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ISelfController* temp1;
				ns_print("IPC message to nn::am::service::IApplicationProxy::GetSelfController\n");
				resp->error_code = GetSelfController(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IWindowController* temp1;
				ns_print("IPC message to nn::am::service::IApplicationProxy::GetWindowController\n");
				resp->error_code = GetWindowController(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IAudioController* temp1;
				ns_print("IPC message to nn::am::service::IApplicationProxy::GetAudioController\n");
				resp->error_code = GetAudioController(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 4: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IDisplayController* temp1;
				ns_print("IPC message to nn::am::service::IApplicationProxy::GetDisplayController\n");
				resp->error_code = GetDisplayController(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 10: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IProcessWindingController* temp1;
				ns_print("IPC message to nn::am::service::IApplicationProxy::GetProcessWindingController\n");
				resp->error_code = GetProcessWindingController(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 11: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ILibraryAppletCreator* temp1;
				ns_print("IPC message to nn::am::service::IApplicationProxy::GetLibraryAppletCreator\n");
				resp->error_code = GetLibraryAppletCreator(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 20: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IApplicationFunctions* temp1;
				ns_print("IPC message to nn::am::service::IApplicationProxy::GetApplicationFunctions\n");
				resp->error_code = GetApplicationFunctions(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1000: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IDebugFunctions* temp1;
				ns_print("IPC message to nn::am::service::IApplicationProxy::GetDebugFunctions\n");
				resp->error_code = GetDebugFunctions(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::IApplicationProxy", req->cmd_id);
			}
		}
		uint32_t GetApplicationFunctions(nn::am::service::IApplicationFunctions*& _0);
		uint32_t GetAudioController(nn::am::service::IAudioController*& _0);
		uint32_t GetCommonStateGetter(nn::am::service::ICommonStateGetter*& _0);
		uint32_t GetDebugFunctions(nn::am::service::IDebugFunctions*& _0);
		uint32_t GetDisplayController(nn::am::service::IDisplayController*& _0);
		uint32_t GetLibraryAppletCreator(nn::am::service::ILibraryAppletCreator*& _0);
		uint32_t GetProcessWindingController(nn::am::service::IProcessWindingController*& _0);
		uint32_t GetSelfController(nn::am::service::ISelfController*& _0);
		uint32_t GetWindowController(nn::am::service::IWindowController*& _0);
	};
	class IApplicationProxyService : public IpcService {
	public:
		IApplicationProxyService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IApplicationProxy* temp1;
				ns_print("IPC message to nn::am::service::IApplicationProxyService::OpenApplicationProxy: uint64_t = 0x%%lx, KObject = 0x%x\n", req->GetData<uint64_t>(8), req->GetCopied(0));
				resp->error_code = OpenApplicationProxy(req->GetData<uint64_t>(8), req->pid, IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::IApplicationProxyService", req->cmd_id);
			}
		}
		uint32_t OpenApplicationProxy(uint64_t _0, uint64_t _1, IpcService* _2, nn::am::service::IApplicationProxy*& _3);
	};
	class IAudioController : public IpcService {
	public:
		IAudioController() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IAudioController::SetExpectedMasterVolume: float = %f, float = %f\n", (double) req->GetData<float>(8), (double) req->GetData<float>(0xc));
				resp->error_code = SetExpectedMasterVolume(req->GetData<float>(8), req->GetData<float>(0xc));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::am::service::IAudioController::GetMainAppletExpectedMasterVolume\n");
				resp->error_code = GetMainAppletExpectedMasterVolume(*resp->GetDataPointer<float *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::am::service::IAudioController::GetLibraryAppletExpectedMasterVolume\n");
				resp->error_code = GetLibraryAppletExpectedMasterVolume(*resp->GetDataPointer<float *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IAudioController::ChangeMainAppletMasterVolume: float = %f, int64_t = 0x%%lx\n", (double) req->GetData<float>(8), req->GetData<int64_t>(0x10));
				resp->error_code = ChangeMainAppletMasterVolume(req->GetData<float>(8), req->GetData<int64_t>(0x10));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IAudioController::SetTransparentVolumeRate: float = %f\n", (double) req->GetData<float>(8));
				resp->error_code = SetTransparentVolumeRate(req->GetData<float>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::IAudioController", req->cmd_id);
			}
		}
		uint32_t ChangeMainAppletMasterVolume(float _0, int64_t _1);
		uint32_t GetLibraryAppletExpectedMasterVolume(float& _0);
		uint32_t GetMainAppletExpectedMasterVolume(float& _0);
		uint32_t SetExpectedMasterVolume(float _0, float _1);
		uint32_t SetTransparentVolumeRate(float _0);
	};
	class ICommonStateGetter : public IpcService {
	public:
		ICommonStateGetter() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::ICommonStateGetter::GetEventHandle\n");
				resp->error_code = GetEventHandle(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::am::service::ICommonStateGetter::ReceiveMessage\n");
				resp->error_code = ReceiveMessage(*resp->GetDataPointer<nn::am::AppletMessage *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::am::service::ICommonStateGetter::GetThisAppletKind\n");
				resp->error_code = GetThisAppletKind(*resp->GetDataPointer<nn::am::service::AppletKind *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ICommonStateGetter::AllowToEnterSleep\n");
				resp->error_code = AllowToEnterSleep();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ICommonStateGetter::DisallowToEnterSleep\n");
				resp->error_code = DisallowToEnterSleep();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::am::service::ICommonStateGetter::GetOperationMode\n");
				resp->error_code = GetOperationMode(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::am::service::ICommonStateGetter::GetPerformanceMode\n");
				resp->error_code = GetPerformanceMode(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::am::service::ICommonStateGetter::GetCradleStatus\n");
				resp->error_code = GetCradleStatus(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::am::service::ICommonStateGetter::GetBootMode\n");
				resp->error_code = GetBootMode(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::am::service::ICommonStateGetter::GetCurrentFocusState\n");
				resp->error_code = GetCurrentFocusState(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ICommonStateGetter::RequestToAcquireSleepLock\n");
				resp->error_code = RequestToAcquireSleepLock();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ICommonStateGetter::ReleaseSleepLock\n");
				resp->error_code = ReleaseSleepLock();
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ICommonStateGetter::ReleaseSleepLockTransiently\n");
				resp->error_code = ReleaseSleepLockTransiently();
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::ICommonStateGetter::GetAcquiredSleepLockEvent\n");
				resp->error_code = GetAcquiredSleepLockEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ICommonStateGetter::PushToGeneralChannel: nn::am::service::IStorage = 0x%x\n", req->GetMoved(0));
				resp->error_code = PushToGeneralChannel(IPC::GetHandle<nn::am::service::IStorage*>(req->GetMoved(0)));
				return 0;
			}
			case 30: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ILockAccessor* temp1;
				ns_print("IPC message to nn::am::service::ICommonStateGetter::GetHomeButtonReaderLockAccessor\n");
				resp->error_code = GetHomeButtonReaderLockAccessor(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 31: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ILockAccessor* temp1;
				ns_print("IPC message to nn::am::service::ICommonStateGetter::GetReaderLockAccessorEx: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = GetReaderLockAccessorEx(req->GetData<int32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 40: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::am::service::ICommonStateGetter::GetCradleFwVersion\n");
				resp->error_code = GetCradleFwVersion(*resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), *resp->GetDataPointer<uint32_t *>(0x10), *resp->GetDataPointer<uint32_t *>(0x14));
				return 0;
			}
			case 50: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::am::service::ICommonStateGetter::IsVrModeEnabled\n");
				resp->error_code = IsVrModeEnabled(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 51: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ICommonStateGetter::SetVrModeEnabled: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetVrModeEnabled(req->GetData<bool>(8));
				return 0;
			}
			case 55: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::am::service::ICommonStateGetter::IsInControllerFirmwareUpdateSection\n");
				resp->error_code = IsInControllerFirmwareUpdateSection(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 60: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::am::service::ICommonStateGetter::GetDefaultDisplayResolution\n");
				resp->error_code = GetDefaultDisplayResolution(*resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<int32_t *>(0xc));
				return 0;
			}
			case 61: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::ICommonStateGetter::GetDefaultDisplayResolutionChangeEvent\n");
				resp->error_code = GetDefaultDisplayResolutionChangeEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::ICommonStateGetter", req->cmd_id);
			}
		}
		uint32_t AllowToEnterSleep();
		uint32_t DisallowToEnterSleep();
		uint32_t GetAcquiredSleepLockEvent(IpcService*& _0);
		uint32_t GetBootMode(uint8_t& _0);
		uint32_t GetCradleFwVersion(uint32_t& _0, uint32_t& _1, uint32_t& _2, uint32_t& _3);
		uint32_t GetCradleStatus(uint8_t& _0);
		uint32_t GetCurrentFocusState(uint8_t& _0);
		uint32_t GetDefaultDisplayResolution(int32_t& _0, int32_t& _1);
		uint32_t GetDefaultDisplayResolutionChangeEvent(IpcService*& _0);
		uint32_t GetEventHandle(IpcService*& _0);
		uint32_t GetHomeButtonReaderLockAccessor(nn::am::service::ILockAccessor*& _0);
		uint32_t GetOperationMode(uint8_t& _0);
		uint32_t GetPerformanceMode(uint32_t& _0);
		uint32_t GetReaderLockAccessorEx(int32_t _0, nn::am::service::ILockAccessor*& _1);
		uint32_t GetThisAppletKind(nn::am::service::AppletKind& _0);
		uint32_t IsInControllerFirmwareUpdateSection(bool& _0);
		uint32_t IsVrModeEnabled(bool& _0);
		uint32_t PushToGeneralChannel(nn::am::service::IStorage* _0);
		uint32_t ReceiveMessage(nn::am::AppletMessage& _0);
		uint32_t ReleaseSleepLock();
		uint32_t ReleaseSleepLockTransiently();
		uint32_t RequestToAcquireSleepLock();
		uint32_t SetVrModeEnabled(bool _0);
	};
	class IDebugFunctions : public IpcService {
	public:
		IDebugFunctions() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IDebugFunctions::NotifyMessageToHomeMenuForDebug: nn::am::AppletMessage = 0x%x\n", req->GetData<nn::am::AppletMessage>(8));
				resp->error_code = NotifyMessageToHomeMenuForDebug(req->GetData<nn::am::AppletMessage>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IApplicationAccessor* temp1;
				ns_print("IPC message to nn::am::service::IDebugFunctions::OpenMainApplication\n");
				resp->error_code = OpenMainApplication(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IDebugFunctions::EmulateButtonEvent: nn::am::service::EmulatedButtonEvent = 0x%x\n", req->GetData<nn::am::service::EmulatedButtonEvent>(8));
				resp->error_code = EmulateButtonEvent(req->GetData<nn::am::service::EmulatedButtonEvent>(8));
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IDebugFunctions::InvalidateTransitionLayer\n");
				resp->error_code = InvalidateTransitionLayer();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::IDebugFunctions", req->cmd_id);
			}
		}
		uint32_t EmulateButtonEvent(nn::am::service::EmulatedButtonEvent _0);
		uint32_t InvalidateTransitionLayer();
		uint32_t NotifyMessageToHomeMenuForDebug(nn::am::AppletMessage _0);
		uint32_t OpenMainApplication(nn::am::service::IApplicationAccessor*& _0);
	};
	class IDisplayController : public IpcService {
	public:
		IDisplayController() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::am::service::IDisplayController::GetLastForegroundCaptureImage\n");
				resp->error_code = GetLastForegroundCaptureImage(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IDisplayController::UpdateLastForegroundCaptureImage\n");
				resp->error_code = UpdateLastForegroundCaptureImage();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::am::service::IDisplayController::GetLastApplicationCaptureImage\n");
				resp->error_code = GetLastApplicationCaptureImage(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::am::service::IDisplayController::GetCallerAppletCaptureImage\n");
				resp->error_code = GetCallerAppletCaptureImage(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IDisplayController::UpdateCallerAppletCaptureImage\n");
				resp->error_code = UpdateCallerAppletCaptureImage();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 1);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::am::service::IDisplayController::GetLastForegroundCaptureImageEx\n");
				resp->error_code = GetLastForegroundCaptureImageEx(*resp->GetDataPointer<bool *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 1);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::am::service::IDisplayController::GetLastApplicationCaptureImageEx\n");
				resp->error_code = GetLastApplicationCaptureImageEx(*resp->GetDataPointer<bool *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 1);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::am::service::IDisplayController::GetCallerAppletCaptureImageEx\n");
				resp->error_code = GetCallerAppletCaptureImageEx(*resp->GetDataPointer<bool *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IDisplayController::TakeScreenShotOfOwnLayer: bool = 0x%x, int32_t = 0x%x\n", req->GetData<bool>(8), req->GetData<int32_t>(0xc));
				resp->error_code = TakeScreenShotOfOwnLayer(req->GetData<bool>(8), req->GetData<int32_t>(0xc));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::IDisplayController::AcquireLastApplicationCaptureBuffer\n");
				resp->error_code = AcquireLastApplicationCaptureBuffer(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IDisplayController::ReleaseLastApplicationCaptureBuffer\n");
				resp->error_code = ReleaseLastApplicationCaptureBuffer();
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::IDisplayController::AcquireLastForegroundCaptureBuffer\n");
				resp->error_code = AcquireLastForegroundCaptureBuffer(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IDisplayController::ReleaseLastForegroundCaptureBuffer\n");
				resp->error_code = ReleaseLastForegroundCaptureBuffer();
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::IDisplayController::AcquireCallerAppletCaptureBuffer\n");
				resp->error_code = AcquireCallerAppletCaptureBuffer(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IDisplayController::ReleaseCallerAppletCaptureBuffer\n");
				resp->error_code = ReleaseCallerAppletCaptureBuffer();
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 1, 1);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::IDisplayController::AcquireLastApplicationCaptureBufferEx\n");
				resp->error_code = AcquireLastApplicationCaptureBufferEx(*resp->GetDataPointer<bool *>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 1, 1);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::IDisplayController::AcquireLastForegroundCaptureBufferEx\n");
				resp->error_code = AcquireLastForegroundCaptureBufferEx(*resp->GetDataPointer<bool *>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 1, 1);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::IDisplayController::AcquireCallerAppletCaptureBufferEx\n");
				resp->error_code = AcquireCallerAppletCaptureBufferEx(*resp->GetDataPointer<bool *>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IDisplayController::ClearCaptureBuffer: bool = 0x%x, int32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<bool>(8), req->GetData<int32_t>(0xc), req->GetData<uint32_t>(0x10));
				resp->error_code = ClearCaptureBuffer(req->GetData<bool>(8), req->GetData<int32_t>(0xc), req->GetData<uint32_t>(0x10));
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IDisplayController::ClearAppletTransitionBuffer: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = ClearAppletTransitionBuffer(req->GetData<uint32_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::IDisplayController", req->cmd_id);
			}
		}
		uint32_t AcquireCallerAppletCaptureBuffer(IpcService*& _0);
		uint32_t AcquireCallerAppletCaptureBufferEx(bool& _0, IpcService*& _1);
		uint32_t AcquireLastApplicationCaptureBuffer(IpcService*& _0);
		uint32_t AcquireLastApplicationCaptureBufferEx(bool& _0, IpcService*& _1);
		uint32_t AcquireLastForegroundCaptureBuffer(IpcService*& _0);
		uint32_t AcquireLastForegroundCaptureBufferEx(bool& _0, IpcService*& _1);
		uint32_t ClearAppletTransitionBuffer(uint32_t _0);
		uint32_t ClearCaptureBuffer(bool _0, int32_t _1, uint32_t _2);
		uint32_t GetCallerAppletCaptureImage(uint8_t *& _0, unsigned int _0_size);
		uint32_t GetCallerAppletCaptureImageEx(bool& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t GetLastApplicationCaptureImage(uint8_t *& _0, unsigned int _0_size);
		uint32_t GetLastApplicationCaptureImageEx(bool& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t GetLastForegroundCaptureImage(uint8_t *& _0, unsigned int _0_size);
		uint32_t GetLastForegroundCaptureImageEx(bool& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t ReleaseCallerAppletCaptureBuffer();
		uint32_t ReleaseLastApplicationCaptureBuffer();
		uint32_t ReleaseLastForegroundCaptureBuffer();
		uint32_t TakeScreenShotOfOwnLayer(bool _0, int32_t _1);
		uint32_t UpdateCallerAppletCaptureImage();
		uint32_t UpdateLastForegroundCaptureImage();
	};
	class IGlobalStateController : public IpcService {
	public:
		IGlobalStateController() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IGlobalStateController::RequestToEnterSleep\n");
				resp->error_code = RequestToEnterSleep();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IGlobalStateController::EnterSleep\n");
				resp->error_code = EnterSleep();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IGlobalStateController::StartSleepSequence: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = StartSleepSequence(req->GetData<bool>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IGlobalStateController::StartShutdownSequence\n");
				resp->error_code = StartShutdownSequence();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IGlobalStateController::StartRebootSequence\n");
				resp->error_code = StartRebootSequence();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IGlobalStateController::LoadAndApplyIdlePolicySettings\n");
				resp->error_code = LoadAndApplyIdlePolicySettings();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IGlobalStateController::NotifyCecSettingsChanged\n");
				resp->error_code = NotifyCecSettingsChanged();
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IGlobalStateController::SetDefaultHomeButtonLongPressTime: int64_t = 0x%%lx\n", req->GetData<int64_t>(8));
				resp->error_code = SetDefaultHomeButtonLongPressTime(req->GetData<int64_t>(8));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IGlobalStateController::UpdateDefaultDisplayResolution\n");
				resp->error_code = UpdateDefaultDisplayResolution();
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::am::service::IGlobalStateController::ShouldSleepOnBoot\n");
				resp->error_code = ShouldSleepOnBoot(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::IGlobalStateController", req->cmd_id);
			}
		}
		uint32_t EnterSleep();
		uint32_t LoadAndApplyIdlePolicySettings();
		uint32_t NotifyCecSettingsChanged();
		uint32_t RequestToEnterSleep();
		uint32_t SetDefaultHomeButtonLongPressTime(int64_t _0);
		uint32_t ShouldSleepOnBoot(bool& _0);
		uint32_t StartRebootSequence();
		uint32_t StartShutdownSequence();
		uint32_t StartSleepSequence(bool _0);
		uint32_t UpdateDefaultDisplayResolution();
	};
	class IHomeMenuFunctions : public IpcService {
	public:
		IHomeMenuFunctions() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IHomeMenuFunctions::RequestToGetForeground\n");
				resp->error_code = RequestToGetForeground();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IHomeMenuFunctions::LockForeground\n");
				resp->error_code = LockForeground();
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IHomeMenuFunctions::UnlockForeground\n");
				resp->error_code = UnlockForeground();
				return 0;
			}
			case 20: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IStorage* temp1;
				ns_print("IPC message to nn::am::service::IHomeMenuFunctions::PopFromGeneralChannel\n");
				resp->error_code = PopFromGeneralChannel(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::IHomeMenuFunctions::GetPopFromGeneralChannelEvent\n");
				resp->error_code = GetPopFromGeneralChannelEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 30: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ILockAccessor* temp1;
				ns_print("IPC message to nn::am::service::IHomeMenuFunctions::GetHomeButtonWriterLockAccessor\n");
				resp->error_code = GetHomeButtonWriterLockAccessor(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 31: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ILockAccessor* temp1;
				ns_print("IPC message to nn::am::service::IHomeMenuFunctions::GetWriterLockAccessorEx: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = GetWriterLockAccessorEx(req->GetData<int32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::IHomeMenuFunctions", req->cmd_id);
			}
		}
		uint32_t GetHomeButtonWriterLockAccessor(nn::am::service::ILockAccessor*& _0);
		uint32_t GetPopFromGeneralChannelEvent(IpcService*& _0);
		uint32_t GetWriterLockAccessorEx(int32_t _0, nn::am::service::ILockAccessor*& _1);
		uint32_t LockForeground();
		uint32_t PopFromGeneralChannel(nn::am::service::IStorage*& _0);
		uint32_t RequestToGetForeground();
		uint32_t UnlockForeground();
	};
	class ILibraryAppletAccessor : public IpcService {
	public:
		ILibraryAppletAccessor() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletAccessor::GetAppletStateChangedEvent\n");
				resp->error_code = GetAppletStateChangedEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::am::service::ILibraryAppletAccessor::IsCompleted\n");
				resp->error_code = IsCompleted(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ILibraryAppletAccessor::Start\n");
				resp->error_code = Start();
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ILibraryAppletAccessor::RequestExit\n");
				resp->error_code = RequestExit();
				return 0;
			}
			case 25: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ILibraryAppletAccessor::Terminate\n");
				resp->error_code = Terminate();
				return 0;
			}
			case 30: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ILibraryAppletAccessor::GetResult\n");
				resp->error_code = GetResult();
				return 0;
			}
			case 50: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ILibraryAppletAccessor::SetOutOfFocusApplicationSuspendingEnabled: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetOutOfFocusApplicationSuspendingEnabled(req->GetData<bool>(8));
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ILibraryAppletAccessor::PushInData: nn::am::service::IStorage = 0x%x\n", req->GetMoved(0));
				resp->error_code = PushInData(IPC::GetHandle<nn::am::service::IStorage*>(req->GetMoved(0)));
				return 0;
			}
			case 101: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IStorage* temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletAccessor::PopOutData\n");
				resp->error_code = PopOutData(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 102: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ILibraryAppletAccessor::PushExtraStorage: nn::am::service::IStorage = 0x%x\n", req->GetMoved(0));
				resp->error_code = PushExtraStorage(IPC::GetHandle<nn::am::service::IStorage*>(req->GetMoved(0)));
				return 0;
			}
			case 103: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ILibraryAppletAccessor::PushInteractiveInData: nn::am::service::IStorage = 0x%x\n", req->GetMoved(0));
				resp->error_code = PushInteractiveInData(IPC::GetHandle<nn::am::service::IStorage*>(req->GetMoved(0)));
				return 0;
			}
			case 104: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IStorage* temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletAccessor::PopInteractiveOutData\n");
				resp->error_code = PopInteractiveOutData(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 105: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletAccessor::GetPopOutDataEvent\n");
				resp->error_code = GetPopOutDataEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 106: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletAccessor::GetPopInteractiveOutDataEvent\n");
				resp->error_code = GetPopInteractiveOutDataEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 110: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::am::service::ILibraryAppletAccessor::NeedsToExitProcess\n");
				resp->error_code = NeedsToExitProcess(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 120: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::am::service::ILibraryAppletAccessor::GetLibraryAppletInfo\n");
				resp->error_code = GetLibraryAppletInfo(*resp->GetDataPointer<nn::am::service::LibraryAppletInfo *>(8));
				return 0;
			}
			case 150: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ILibraryAppletAccessor::RequestForAppletToGetForeground\n");
				resp->error_code = RequestForAppletToGetForeground();
				return 0;
			}
			case 160: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::am::service::ILibraryAppletAccessor::GetIndirectLayerConsumerHandle: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = GetIndirectLayerConsumerHandle(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid, *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::ILibraryAppletAccessor", req->cmd_id);
			}
		}
		uint32_t GetAppletStateChangedEvent(IpcService*& _0);
		uint32_t GetIndirectLayerConsumerHandle(nn::applet::AppletResourceUserId _0, uint64_t _1, uint64_t& _2);
		uint32_t GetLibraryAppletInfo(nn::am::service::LibraryAppletInfo& _0);
		uint32_t GetPopInteractiveOutDataEvent(IpcService*& _0);
		uint32_t GetPopOutDataEvent(IpcService*& _0);
		uint32_t GetResult();
		uint32_t IsCompleted(bool& _0);
		uint32_t NeedsToExitProcess(bool& _0);
		uint32_t PopInteractiveOutData(nn::am::service::IStorage*& _0);
		uint32_t PopOutData(nn::am::service::IStorage*& _0);
		uint32_t PushExtraStorage(nn::am::service::IStorage* _0);
		uint32_t PushInData(nn::am::service::IStorage* _0);
		uint32_t PushInteractiveInData(nn::am::service::IStorage* _0);
		uint32_t RequestExit();
		uint32_t RequestForAppletToGetForeground();
		uint32_t SetOutOfFocusApplicationSuspendingEnabled(bool _0);
		uint32_t Start();
		uint32_t Terminate();
	};
	class ILibraryAppletCreator : public IpcService {
	public:
		ILibraryAppletCreator() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ILibraryAppletAccessor* temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletCreator::CreateLibraryApplet: uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = CreateLibraryApplet(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ILibraryAppletCreator::TerminateAllLibraryApplets\n");
				resp->error_code = TerminateAllLibraryApplets();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::am::service::ILibraryAppletCreator::AreAnyLibraryAppletsLeft\n");
				resp->error_code = AreAnyLibraryAppletsLeft(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 10: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IStorage* temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletCreator::CreateStorage: int64_t = 0x%%lx\n", req->GetData<int64_t>(8));
				resp->error_code = CreateStorage(req->GetData<int64_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 11: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IStorage* temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletCreator::CreateTransferMemoryStorage: bool = 0x%x, int64_t = 0x%%lx, KObject = 0x%x\n", req->GetData<bool>(8), req->GetData<int64_t>(0x10), req->GetCopied(0));
				resp->error_code = CreateTransferMemoryStorage(req->GetData<bool>(8), req->GetData<int64_t>(0x10), IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 12: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IStorage* temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletCreator::CreateHandleStorage: int64_t = 0x%%lx, KObject = 0x%x\n", req->GetData<int64_t>(8), req->GetCopied(0));
				resp->error_code = CreateHandleStorage(req->GetData<int64_t>(8), IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::ILibraryAppletCreator", req->cmd_id);
			}
		}
		uint32_t AreAnyLibraryAppletsLeft(bool& _0);
		uint32_t CreateHandleStorage(int64_t _0, IpcService* _1, nn::am::service::IStorage*& _2);
		uint32_t CreateLibraryApplet(uint32_t _0, uint32_t _1, nn::am::service::ILibraryAppletAccessor*& _2);
		uint32_t CreateStorage(int64_t _0, nn::am::service::IStorage*& _1);
		uint32_t CreateTransferMemoryStorage(bool _0, int64_t _1, IpcService* _2, nn::am::service::IStorage*& _3);
		uint32_t TerminateAllLibraryApplets();
	};
	class ILibraryAppletProxy : public IpcService {
	public:
		ILibraryAppletProxy() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ICommonStateGetter* temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletProxy::GetCommonStateGetter\n");
				resp->error_code = GetCommonStateGetter(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ISelfController* temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletProxy::GetSelfController\n");
				resp->error_code = GetSelfController(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IWindowController* temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletProxy::GetWindowController\n");
				resp->error_code = GetWindowController(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IAudioController* temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletProxy::GetAudioController\n");
				resp->error_code = GetAudioController(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 4: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IDisplayController* temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletProxy::GetDisplayController\n");
				resp->error_code = GetDisplayController(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 10: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IProcessWindingController* temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletProxy::GetProcessWindingController\n");
				resp->error_code = GetProcessWindingController(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 11: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ILibraryAppletCreator* temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletProxy::GetLibraryAppletCreator\n");
				resp->error_code = GetLibraryAppletCreator(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 20: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ILibraryAppletSelfAccessor* temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletProxy::OpenLibraryAppletSelfAccessor\n");
				resp->error_code = OpenLibraryAppletSelfAccessor(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1000: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IDebugFunctions* temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletProxy::GetDebugFunctions\n");
				resp->error_code = GetDebugFunctions(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::ILibraryAppletProxy", req->cmd_id);
			}
		}
		uint32_t GetAudioController(nn::am::service::IAudioController*& _0);
		uint32_t GetCommonStateGetter(nn::am::service::ICommonStateGetter*& _0);
		uint32_t GetDebugFunctions(nn::am::service::IDebugFunctions*& _0);
		uint32_t GetDisplayController(nn::am::service::IDisplayController*& _0);
		uint32_t GetLibraryAppletCreator(nn::am::service::ILibraryAppletCreator*& _0);
		uint32_t GetProcessWindingController(nn::am::service::IProcessWindingController*& _0);
		uint32_t GetSelfController(nn::am::service::ISelfController*& _0);
		uint32_t GetWindowController(nn::am::service::IWindowController*& _0);
		uint32_t OpenLibraryAppletSelfAccessor(nn::am::service::ILibraryAppletSelfAccessor*& _0);
	};
	class ILibraryAppletSelfAccessor : public IpcService {
	public:
		ILibraryAppletSelfAccessor() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IStorage* temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletSelfAccessor::PopInData\n");
				resp->error_code = PopInData(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ILibraryAppletSelfAccessor::PushOutData: nn::am::service::IStorage = 0x%x\n", req->GetMoved(0));
				resp->error_code = PushOutData(IPC::GetHandle<nn::am::service::IStorage*>(req->GetMoved(0)));
				return 0;
			}
			case 2: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IStorage* temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletSelfAccessor::PopInteractiveInData\n");
				resp->error_code = PopInteractiveInData(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ILibraryAppletSelfAccessor::PushInteractiveOutData: nn::am::service::IStorage = 0x%x\n", req->GetMoved(0));
				resp->error_code = PushInteractiveOutData(IPC::GetHandle<nn::am::service::IStorage*>(req->GetMoved(0)));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletSelfAccessor::GetPopInDataEvent\n");
				resp->error_code = GetPopInDataEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletSelfAccessor::GetPopInteractiveInDataEvent\n");
				resp->error_code = GetPopInteractiveInDataEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ILibraryAppletSelfAccessor::ExitProcessAndReturn\n");
				resp->error_code = ExitProcessAndReturn();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::am::service::ILibraryAppletSelfAccessor::GetLibraryAppletInfo\n");
				resp->error_code = GetLibraryAppletInfo(*resp->GetDataPointer<nn::am::service::LibraryAppletInfo *>(8));
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::am::service::ILibraryAppletSelfAccessor::GetMainAppletIdentityInfo\n");
				resp->error_code = GetMainAppletIdentityInfo(*resp->GetDataPointer<nn::am::service::AppletIdentityInfo *>(8));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::am::service::ILibraryAppletSelfAccessor::CanUseApplicationCore\n");
				resp->error_code = CanUseApplicationCore(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::am::service::ILibraryAppletSelfAccessor::GetCallerAppletIdentityInfo\n");
				resp->error_code = GetCallerAppletIdentityInfo(*resp->GetDataPointer<nn::am::service::AppletIdentityInfo *>(8));
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x16, 0, temp2);
				nn::ns::ApplicationControlProperty* temp3 = (nn::ns::ApplicationControlProperty *) new uint8_t[temp2];
				ns_print("IPC message to nn::am::service::ILibraryAppletSelfAccessor::GetMainAppletApplicationControlProperty\n");
				resp->error_code = GetMainAppletApplicationControlProperty(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::am::service::ILibraryAppletSelfAccessor::GetMainAppletStorageId\n");
				resp->error_code = GetMainAppletStorageId(*resp->GetDataPointer<nn::ncm::StorageId *>(8));
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::am::service::AppletIdentityInfo* temp3 = (nn::am::service::AppletIdentityInfo *) new uint8_t[temp2];
				ns_print("IPC message to nn::am::service::ILibraryAppletSelfAccessor::GetCallerAppletIdentityInfoStack\n");
				resp->error_code = GetCallerAppletIdentityInfoStack(*resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 20: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IStorage* temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletSelfAccessor::PopExtraStorage\n");
				resp->error_code = PopExtraStorage(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 25: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::ILibraryAppletSelfAccessor::GetPopExtraStorageEvent\n");
				resp->error_code = GetPopExtraStorageEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 30: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ILibraryAppletSelfAccessor::UnpopInData: nn::am::service::IStorage = 0x%x\n", req->GetMoved(0));
				resp->error_code = UnpopInData(IPC::GetHandle<nn::am::service::IStorage*>(req->GetMoved(0)));
				return 0;
			}
			case 31: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ILibraryAppletSelfAccessor::UnpopExtraStorage: nn::am::service::IStorage = 0x%x\n", req->GetMoved(0));
				resp->error_code = UnpopExtraStorage(IPC::GetHandle<nn::am::service::IStorage*>(req->GetMoved(0)));
				return 0;
			}
			case 40: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::am::service::ILibraryAppletSelfAccessor::GetIndirectLayerProducerHandle\n");
				resp->error_code = GetIndirectLayerProducerHandle(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 50: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ILibraryAppletSelfAccessor::ReportVisibleError: nn::err::ErrorCode = 0x%%lx\n", req->GetData<nn::err::ErrorCode>(8));
				resp->error_code = ReportVisibleError(req->GetData<nn::err::ErrorCode>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::ILibraryAppletSelfAccessor", req->cmd_id);
			}
		}
		uint32_t CanUseApplicationCore(bool& _0);
		uint32_t ExitProcessAndReturn();
		uint32_t GetCallerAppletIdentityInfo(nn::am::service::AppletIdentityInfo& _0);
		uint32_t GetCallerAppletIdentityInfoStack(int32_t& _0, nn::am::service::AppletIdentityInfo *& _1, unsigned int _1_size);
		uint32_t GetIndirectLayerProducerHandle(uint64_t& _0);
		uint32_t GetLibraryAppletInfo(nn::am::service::LibraryAppletInfo& _0);
		uint32_t GetMainAppletApplicationControlProperty(nn::ns::ApplicationControlProperty *& _0, unsigned int _0_size);
		uint32_t GetMainAppletIdentityInfo(nn::am::service::AppletIdentityInfo& _0);
		uint32_t GetMainAppletStorageId(nn::ncm::StorageId& _0);
		uint32_t GetPopExtraStorageEvent(IpcService*& _0);
		uint32_t GetPopInDataEvent(IpcService*& _0);
		uint32_t GetPopInteractiveInDataEvent(IpcService*& _0);
		uint32_t PopExtraStorage(nn::am::service::IStorage*& _0);
		uint32_t PopInData(nn::am::service::IStorage*& _0);
		uint32_t PopInteractiveInData(nn::am::service::IStorage*& _0);
		uint32_t PushInteractiveOutData(nn::am::service::IStorage* _0);
		uint32_t PushOutData(nn::am::service::IStorage* _0);
		uint32_t ReportVisibleError(nn::err::ErrorCode _0);
		uint32_t UnpopExtraStorage(nn::am::service::IStorage* _0);
		uint32_t UnpopInData(nn::am::service::IStorage* _0);
	};
	class ILockAccessor : public IpcService {
	public:
		ILockAccessor() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 1: {
				resp->GenBuf(0, 1, 1);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::ILockAccessor::TryLock: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = TryLock(req->GetData<bool>(8), *resp->GetDataPointer<bool *>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ILockAccessor::Unlock\n");
				resp->error_code = Unlock();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::ILockAccessor::GetEvent\n");
				resp->error_code = GetEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::ILockAccessor", req->cmd_id);
			}
		}
		uint32_t GetEvent(IpcService*& _0);
		uint32_t TryLock(bool _0, bool& _1, IpcService*& _2);
		uint32_t Unlock();
	};
	class IOverlayAppletProxy : public IpcService {
	public:
		IOverlayAppletProxy() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ICommonStateGetter* temp1;
				ns_print("IPC message to nn::am::service::IOverlayAppletProxy::GetCommonStateGetter\n");
				resp->error_code = GetCommonStateGetter(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ISelfController* temp1;
				ns_print("IPC message to nn::am::service::IOverlayAppletProxy::GetSelfController\n");
				resp->error_code = GetSelfController(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IWindowController* temp1;
				ns_print("IPC message to nn::am::service::IOverlayAppletProxy::GetWindowController\n");
				resp->error_code = GetWindowController(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IAudioController* temp1;
				ns_print("IPC message to nn::am::service::IOverlayAppletProxy::GetAudioController\n");
				resp->error_code = GetAudioController(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 4: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IDisplayController* temp1;
				ns_print("IPC message to nn::am::service::IOverlayAppletProxy::GetDisplayController\n");
				resp->error_code = GetDisplayController(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 10: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IProcessWindingController* temp1;
				ns_print("IPC message to nn::am::service::IOverlayAppletProxy::GetProcessWindingController\n");
				resp->error_code = GetProcessWindingController(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 11: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ILibraryAppletCreator* temp1;
				ns_print("IPC message to nn::am::service::IOverlayAppletProxy::GetLibraryAppletCreator\n");
				resp->error_code = GetLibraryAppletCreator(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 20: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IOverlayFunctions* temp1;
				ns_print("IPC message to nn::am::service::IOverlayAppletProxy::GetOverlayFunctions\n");
				resp->error_code = GetOverlayFunctions(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1000: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IDebugFunctions* temp1;
				ns_print("IPC message to nn::am::service::IOverlayAppletProxy::GetDebugFunctions\n");
				resp->error_code = GetDebugFunctions(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::IOverlayAppletProxy", req->cmd_id);
			}
		}
		uint32_t GetAudioController(nn::am::service::IAudioController*& _0);
		uint32_t GetCommonStateGetter(nn::am::service::ICommonStateGetter*& _0);
		uint32_t GetDebugFunctions(nn::am::service::IDebugFunctions*& _0);
		uint32_t GetDisplayController(nn::am::service::IDisplayController*& _0);
		uint32_t GetLibraryAppletCreator(nn::am::service::ILibraryAppletCreator*& _0);
		uint32_t GetOverlayFunctions(nn::am::service::IOverlayFunctions*& _0);
		uint32_t GetProcessWindingController(nn::am::service::IProcessWindingController*& _0);
		uint32_t GetSelfController(nn::am::service::ISelfController*& _0);
		uint32_t GetWindowController(nn::am::service::IWindowController*& _0);
	};
	class IOverlayFunctions : public IpcService {
	public:
		IOverlayFunctions() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IOverlayFunctions::BeginToWatchShortHomeButtonMessage\n");
				resp->error_code = BeginToWatchShortHomeButtonMessage();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IOverlayFunctions::EndToWatchShortHomeButtonMessage\n");
				resp->error_code = EndToWatchShortHomeButtonMessage();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::am::service::IOverlayFunctions::GetApplicationIdForLogo\n");
				resp->error_code = GetApplicationIdForLogo(*resp->GetDataPointer<nn::ncm::ApplicationId *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IOverlayFunctions::SetGpuTimeSliceBoost: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = SetGpuTimeSliceBoost(req->GetData<uint64_t>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IOverlayFunctions::SetAutoSleepTimeAndDimmingTimeEnabled: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetAutoSleepTimeAndDimmingTimeEnabled(req->GetData<bool>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IOverlayFunctions::TerminateApplicationAndSetReason: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = TerminateApplicationAndSetReason(req->GetData<uint32_t>(8));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IOverlayFunctions::SetScreenShotPermissionGlobally: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetScreenShotPermissionGlobally(req->GetData<bool>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::IOverlayFunctions", req->cmd_id);
			}
		}
		uint32_t BeginToWatchShortHomeButtonMessage();
		uint32_t EndToWatchShortHomeButtonMessage();
		uint32_t GetApplicationIdForLogo(nn::ncm::ApplicationId& _0);
		uint32_t SetAutoSleepTimeAndDimmingTimeEnabled(bool _0);
		uint32_t SetGpuTimeSliceBoost(uint64_t _0);
		uint32_t SetScreenShotPermissionGlobally(bool _0);
		uint32_t TerminateApplicationAndSetReason(uint32_t _0);
	};
	class IProcessWindingController : public IpcService {
	public:
		IProcessWindingController() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::am::service::IProcessWindingController::GetLaunchReason\n");
				resp->error_code = GetLaunchReason(*resp->GetDataPointer<nn::am::service::AppletProcessLaunchReason *>(8));
				return 0;
			}
			case 11: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ILibraryAppletAccessor* temp1;
				ns_print("IPC message to nn::am::service::IProcessWindingController::OpenCallingLibraryApplet\n");
				resp->error_code = OpenCallingLibraryApplet(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IProcessWindingController::PushContext: nn::am::service::IStorage = 0x%x\n", req->GetMoved(0));
				resp->error_code = PushContext(IPC::GetHandle<nn::am::service::IStorage*>(req->GetMoved(0)));
				return 0;
			}
			case 22: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IStorage* temp1;
				ns_print("IPC message to nn::am::service::IProcessWindingController::PopContext\n");
				resp->error_code = PopContext(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IProcessWindingController::CancelWindingReservation\n");
				resp->error_code = CancelWindingReservation();
				return 0;
			}
			case 30: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IProcessWindingController::WindAndDoReserved\n");
				resp->error_code = WindAndDoReserved();
				return 0;
			}
			case 40: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IProcessWindingController::ReserveToStartAndWaitAndUnwindThis: nn::am::service::ILibraryAppletAccessor = 0x%x\n", req->GetMoved(0));
				resp->error_code = ReserveToStartAndWaitAndUnwindThis(IPC::GetHandle<nn::am::service::ILibraryAppletAccessor*>(req->GetMoved(0)));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::IProcessWindingController", req->cmd_id);
			}
		}
		uint32_t CancelWindingReservation();
		uint32_t GetLaunchReason(nn::am::service::AppletProcessLaunchReason& _0);
		uint32_t OpenCallingLibraryApplet(nn::am::service::ILibraryAppletAccessor*& _0);
		uint32_t PopContext(nn::am::service::IStorage*& _0);
		uint32_t PushContext(nn::am::service::IStorage* _0);
		uint32_t ReserveToStartAndWaitAndUnwindThis(nn::am::service::ILibraryAppletAccessor* _0);
		uint32_t WindAndDoReserved();
	};
	class ISelfController : public IpcService {
	public:
		ISelfController() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::Exit\n");
				resp->error_code = Exit();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::LockExit\n");
				resp->error_code = LockExit();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::UnlockExit\n");
				resp->error_code = UnlockExit();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::EnterFatalSection\n");
				resp->error_code = EnterFatalSection();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::LeaveFatalSection\n");
				resp->error_code = LeaveFatalSection();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::ISelfController::GetLibraryAppletLaunchableEvent\n");
				resp->error_code = GetLibraryAppletLaunchableEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::SetScreenShotPermission: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = SetScreenShotPermission(req->GetData<int32_t>(8));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::SetOperationModeChangedNotification: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetOperationModeChangedNotification(req->GetData<bool>(8));
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::SetPerformanceModeChangedNotification: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetPerformanceModeChangedNotification(req->GetData<bool>(8));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::SetFocusHandlingMode: bool = 0x%x, bool = 0x%x, bool = 0x%x\n", req->GetData<bool>(8), req->GetData<bool>(9), req->GetData<bool>(0xa));
				resp->error_code = SetFocusHandlingMode(req->GetData<bool>(8), req->GetData<bool>(9), req->GetData<bool>(0xa));
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::SetRestartMessageEnabled: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetRestartMessageEnabled(req->GetData<bool>(8));
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::SetScreenShotAppletIdentityInfo: nn::am::service::AppletIdentityInfo = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = SetScreenShotAppletIdentityInfo(req->GetData<nn::am::service::AppletIdentityInfo>(8));
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::SetOutOfFocusSuspendingEnabled: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetOutOfFocusSuspendingEnabled(req->GetData<bool>(8));
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::SetControllerFirmwareUpdateSection: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetControllerFirmwareUpdateSection(req->GetData<bool>(8));
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::SetRequiresCaptureButtonShortPressedMessage: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetRequiresCaptureButtonShortPressedMessage(req->GetData<bool>(8));
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::SetScreenShotImageOrientation: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = SetScreenShotImageOrientation(req->GetData<int32_t>(8));
				return 0;
			}
			case 40: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::am::service::ISelfController::CreateManagedDisplayLayer\n");
				resp->error_code = CreateManagedDisplayLayer(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 50: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::SetHandlesRequestToDisplay: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetHandlesRequestToDisplay(req->GetData<bool>(8));
				return 0;
			}
			case 51: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::ApproveToDisplay\n");
				resp->error_code = ApproveToDisplay();
				return 0;
			}
			case 60: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::OverrideAutoSleepTimeAndDimmingTime: int32_t = 0x%x, int32_t = 0x%x, int32_t = 0x%x, int32_t = 0x%x\n", req->GetData<int32_t>(8), req->GetData<int32_t>(0xc), req->GetData<int32_t>(0x10), req->GetData<int32_t>(0x14));
				resp->error_code = OverrideAutoSleepTimeAndDimmingTime(req->GetData<int32_t>(8), req->GetData<int32_t>(0xc), req->GetData<int32_t>(0x10), req->GetData<int32_t>(0x14));
				return 0;
			}
			case 61: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::SetMediaPlaybackState: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetMediaPlaybackState(req->GetData<bool>(8));
				return 0;
			}
			case 62: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::SetIdleTimeDetectionExtension: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = SetIdleTimeDetectionExtension(req->GetData<uint32_t>(8));
				return 0;
			}
			case 63: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::am::service::ISelfController::GetIdleTimeDetectionExtension\n");
				resp->error_code = GetIdleTimeDetectionExtension(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 64: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::SetInputDetectionSourceSet: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = SetInputDetectionSourceSet(req->GetData<uint32_t>(8));
				return 0;
			}
			case 65: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::ISelfController::ReportUserIsActive\n");
				resp->error_code = ReportUserIsActive();
				return 0;
			}
			case 66: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::am::service::ISelfController::GetCurrentIlluminance\n");
				resp->error_code = GetCurrentIlluminance(*resp->GetDataPointer<float *>(8));
				return 0;
			}
			case 67: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::am::service::ISelfController::IsIlluminanceAvailable\n");
				resp->error_code = IsIlluminanceAvailable(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::ISelfController", req->cmd_id);
			}
		}
		uint32_t ApproveToDisplay();
		uint32_t CreateManagedDisplayLayer(uint64_t& _0);
		uint32_t EnterFatalSection();
		uint32_t Exit();
		uint32_t GetCurrentIlluminance(float& _0);
		uint32_t GetIdleTimeDetectionExtension(uint32_t& _0);
		uint32_t GetLibraryAppletLaunchableEvent(IpcService*& _0);
		uint32_t IsIlluminanceAvailable(bool& _0);
		uint32_t LeaveFatalSection();
		uint32_t LockExit();
		uint32_t OverrideAutoSleepTimeAndDimmingTime(int32_t _0, int32_t _1, int32_t _2, int32_t _3);
		uint32_t ReportUserIsActive();
		uint32_t SetControllerFirmwareUpdateSection(bool _0);
		uint32_t SetFocusHandlingMode(bool _0, bool _1, bool _2);
		uint32_t SetHandlesRequestToDisplay(bool _0);
		uint32_t SetIdleTimeDetectionExtension(uint32_t _0);
		uint32_t SetInputDetectionSourceSet(uint32_t _0);
		uint32_t SetMediaPlaybackState(bool _0);
		uint32_t SetOperationModeChangedNotification(bool _0);
		uint32_t SetOutOfFocusSuspendingEnabled(bool _0);
		uint32_t SetPerformanceModeChangedNotification(bool _0);
		uint32_t SetRequiresCaptureButtonShortPressedMessage(bool _0);
		uint32_t SetRestartMessageEnabled(bool _0);
		uint32_t SetScreenShotAppletIdentityInfo(nn::am::service::AppletIdentityInfo _0);
		uint32_t SetScreenShotImageOrientation(int32_t _0);
		uint32_t SetScreenShotPermission(int32_t _0);
		uint32_t UnlockExit();
	};
	class IStorage : public IpcService {
	public:
		IStorage() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IStorageAccessor* temp1;
				ns_print("IPC message to nn::am::service::IStorage::Open\n");
				resp->error_code = Open(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ITransferStorageAccessor* temp1;
				ns_print("IPC message to nn::am::service::IStorage::OpenTransferStorage\n");
				resp->error_code = OpenTransferStorage(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::IStorage", req->cmd_id);
			}
		}
		uint32_t Open(nn::am::service::IStorageAccessor*& _0);
		uint32_t OpenTransferStorage(nn::am::service::ITransferStorageAccessor*& _0);
	};
	class IStorageAccessor : public IpcService {
	public:
		IStorageAccessor() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::am::service::IStorageAccessor::GetSize\n");
				resp->error_code = GetSize(*resp->GetDataPointer<int64_t *>(8));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::am::service::IStorageAccessor::Write: int64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<int64_t>(8), temp2);
				resp->error_code = Write(req->GetData<int64_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::am::service::IStorageAccessor::Read: int64_t = 0x%%lx\n", req->GetData<int64_t>(8));
				resp->error_code = Read(req->GetData<int64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::IStorageAccessor", req->cmd_id);
			}
		}
		uint32_t GetSize(int64_t& _0);
		uint32_t Read(int64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Write(int64_t _0, uint8_t * _1, unsigned int _1_size);
	};
	class ISystemAppletProxy : public IpcService {
	public:
		ISystemAppletProxy() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ICommonStateGetter* temp1;
				ns_print("IPC message to nn::am::service::ISystemAppletProxy::GetCommonStateGetter\n");
				resp->error_code = GetCommonStateGetter(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ISelfController* temp1;
				ns_print("IPC message to nn::am::service::ISystemAppletProxy::GetSelfController\n");
				resp->error_code = GetSelfController(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IWindowController* temp1;
				ns_print("IPC message to nn::am::service::ISystemAppletProxy::GetWindowController\n");
				resp->error_code = GetWindowController(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IAudioController* temp1;
				ns_print("IPC message to nn::am::service::ISystemAppletProxy::GetAudioController\n");
				resp->error_code = GetAudioController(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 4: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IDisplayController* temp1;
				ns_print("IPC message to nn::am::service::ISystemAppletProxy::GetDisplayController\n");
				resp->error_code = GetDisplayController(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 10: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IProcessWindingController* temp1;
				ns_print("IPC message to nn::am::service::ISystemAppletProxy::GetProcessWindingController\n");
				resp->error_code = GetProcessWindingController(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 11: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::ILibraryAppletCreator* temp1;
				ns_print("IPC message to nn::am::service::ISystemAppletProxy::GetLibraryAppletCreator\n");
				resp->error_code = GetLibraryAppletCreator(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 20: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IHomeMenuFunctions* temp1;
				ns_print("IPC message to nn::am::service::ISystemAppletProxy::GetHomeMenuFunctions\n");
				resp->error_code = GetHomeMenuFunctions(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 21: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IGlobalStateController* temp1;
				ns_print("IPC message to nn::am::service::ISystemAppletProxy::GetGlobalStateController\n");
				resp->error_code = GetGlobalStateController(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 22: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IApplicationCreator* temp1;
				ns_print("IPC message to nn::am::service::ISystemAppletProxy::GetApplicationCreator\n");
				resp->error_code = GetApplicationCreator(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1000: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IDebugFunctions* temp1;
				ns_print("IPC message to nn::am::service::ISystemAppletProxy::GetDebugFunctions\n");
				resp->error_code = GetDebugFunctions(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::ISystemAppletProxy", req->cmd_id);
			}
		}
		uint32_t GetApplicationCreator(nn::am::service::IApplicationCreator*& _0);
		uint32_t GetAudioController(nn::am::service::IAudioController*& _0);
		uint32_t GetCommonStateGetter(nn::am::service::ICommonStateGetter*& _0);
		uint32_t GetDebugFunctions(nn::am::service::IDebugFunctions*& _0);
		uint32_t GetDisplayController(nn::am::service::IDisplayController*& _0);
		uint32_t GetGlobalStateController(nn::am::service::IGlobalStateController*& _0);
		uint32_t GetHomeMenuFunctions(nn::am::service::IHomeMenuFunctions*& _0);
		uint32_t GetLibraryAppletCreator(nn::am::service::ILibraryAppletCreator*& _0);
		uint32_t GetProcessWindingController(nn::am::service::IProcessWindingController*& _0);
		uint32_t GetSelfController(nn::am::service::ISelfController*& _0);
		uint32_t GetWindowController(nn::am::service::IWindowController*& _0);
	};
	class ITransferStorageAccessor : public IpcService {
	public:
		ITransferStorageAccessor() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::am::service::ITransferStorageAccessor::GetSize\n");
				resp->error_code = GetSize(*resp->GetDataPointer<int64_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 1, 8);
				IpcService *temp1;
				ns_print("IPC message to nn::am::service::ITransferStorageAccessor::GetHandle\n");
				resp->error_code = GetHandle(*resp->GetDataPointer<uint64_t *>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::ITransferStorageAccessor", req->cmd_id);
			}
		}
		uint32_t GetHandle(uint64_t& _0, IpcService*& _1);
		uint32_t GetSize(int64_t& _0);
	};
	class IWindow : public IpcService {
	public:
		IWindow() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 12345: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IWindow::Unknown12345\n");
				resp->error_code = Unknown12345();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::IWindow", req->cmd_id);
			}
		}
		uint32_t Unknown12345();
	};
	class IWindowController : public IpcService {
	public:
		IWindowController() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::am::service::IWindow* temp1;
				ns_print("IPC message to nn::am::service::IWindowController::CreateWindow: nn::am::service::WindowCreationOption = 0x%x\n", req->GetData<nn::am::service::WindowCreationOption>(8));
				resp->error_code = CreateWindow(req->GetData<nn::am::service::WindowCreationOption>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::am::service::IWindowController::GetAppletResourceUserId\n");
				resp->error_code = GetAppletResourceUserId(*resp->GetDataPointer<nn::applet::AppletResourceUserId *>(8));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IWindowController::AcquireForegroundRights\n");
				resp->error_code = AcquireForegroundRights();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IWindowController::ReleaseForegroundRights\n");
				resp->error_code = ReleaseForegroundRights();
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::am::service::IWindowController::RejectToChangeIntoBackground\n");
				resp->error_code = RejectToChangeIntoBackground();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::am::service::IWindowController", req->cmd_id);
			}
		}
		uint32_t AcquireForegroundRights();
		uint32_t CreateWindow(nn::am::service::WindowCreationOption _0, nn::am::service::IWindow*& _1);
		uint32_t GetAppletResourceUserId(nn::applet::AppletResourceUserId& _0);
		uint32_t RejectToChangeIntoBackground();
		uint32_t ReleaseForegroundRights();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::am::service::IAllSystemAppletProxiesService::CreateSelfLibraryAppletCreatorForDevelop(uint64_t _0, uint64_t _1, nn::am::service::ILibraryAppletCreator*& _2) {
	ns_print("Stub implementation for nn::am::service::IAllSystemAppletProxiesService::CreateSelfLibraryAppletCreatorForDevelop\n");
	return 0;
}
uint32_t nn::am::service::IAllSystemAppletProxiesService::OpenLibraryAppletProxy(uint64_t _0, uint64_t _1, IpcService* _2, nn::am::AppletAttribute * _3, unsigned int _3_size, nn::am::service::ILibraryAppletProxy*& _4) {
	ns_print("Stub implementation for nn::am::service::IAllSystemAppletProxiesService::OpenLibraryAppletProxy\n");
	return 0;
}
uint32_t nn::am::service::IAllSystemAppletProxiesService::OpenLibraryAppletProxyOld(uint64_t _0, uint64_t _1, IpcService* _2, nn::am::service::ILibraryAppletProxy*& _3) {
	ns_print("Stub implementation for nn::am::service::IAllSystemAppletProxiesService::OpenLibraryAppletProxyOld\n");
	return 0;
}
uint32_t nn::am::service::IAllSystemAppletProxiesService::OpenOverlayAppletProxy(uint64_t _0, uint64_t _1, IpcService* _2, nn::am::service::IOverlayAppletProxy*& _3) {
	ns_print("Stub implementation for nn::am::service::IAllSystemAppletProxiesService::OpenOverlayAppletProxy\n");
	return 0;
}
uint32_t nn::am::service::IAllSystemAppletProxiesService::OpenSystemAppletProxy(uint64_t _0, uint64_t _1, IpcService* _2, nn::am::service::ISystemAppletProxy*& _3) {
	ns_print("Stub implementation for nn::am::service::IAllSystemAppletProxiesService::OpenSystemAppletProxy\n");
	return 0;
}
uint32_t nn::am::service::IAllSystemAppletProxiesService::OpenSystemApplicationProxy(uint64_t _0, uint64_t _1, IpcService* _2, nn::am::service::IApplicationProxy*& _3) {
	ns_print("Stub implementation for nn::am::service::IAllSystemAppletProxiesService::OpenSystemApplicationProxy\n");
	return 0;
}
uint32_t nn::am::service::IAppletAccessor::GetAppletStateChangedEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::am::service::IAppletAccessor::GetAppletStateChangedEvent\n");
	return 0;
}
uint32_t nn::am::service::IAppletAccessor::GetResult() {
	ns_print("Stub implementation for nn::am::service::IAppletAccessor::GetResult\n");
	return 0;
}
uint32_t nn::am::service::IAppletAccessor::IsCompleted(bool& _0) {
	ns_print("Stub implementation for nn::am::service::IAppletAccessor::IsCompleted\n");
	return 0;
}
uint32_t nn::am::service::IAppletAccessor::RequestExit() {
	ns_print("Stub implementation for nn::am::service::IAppletAccessor::RequestExit\n");
	return 0;
}
uint32_t nn::am::service::IAppletAccessor::Start() {
	ns_print("Stub implementation for nn::am::service::IAppletAccessor::Start\n");
	return 0;
}
uint32_t nn::am::service::IAppletAccessor::Terminate() {
	ns_print("Stub implementation for nn::am::service::IAppletAccessor::Terminate\n");
	return 0;
}
uint32_t nn::am::service::IApplicationAccessor::AreAnyLibraryAppletsLeft(bool& _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationAccessor::AreAnyLibraryAppletsLeft\n");
	return 0;
}
uint32_t nn::am::service::IApplicationAccessor::GetAppletStateChangedEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationAccessor::GetAppletStateChangedEvent\n");
	return 0;
}
uint32_t nn::am::service::IApplicationAccessor::GetApplicationControlProperty(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::am::service::IApplicationAccessor::GetApplicationControlProperty\n");
	return 0;
}
uint32_t nn::am::service::IApplicationAccessor::GetApplicationId(nn::ncm::ApplicationId& _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationAccessor::GetApplicationId\n");
	return 0;
}
uint32_t nn::am::service::IApplicationAccessor::GetApplicationLaunchProperty(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::am::service::IApplicationAccessor::GetApplicationLaunchProperty\n");
	return 0;
}
uint32_t nn::am::service::IApplicationAccessor::GetCurrentLibraryApplet(nn::am::service::IAppletAccessor*& _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationAccessor::GetCurrentLibraryApplet\n");
	return 0;
}
uint32_t nn::am::service::IApplicationAccessor::GetResult() {
	ns_print("Stub implementation for nn::am::service::IApplicationAccessor::GetResult\n");
	return 0;
}
uint32_t nn::am::service::IApplicationAccessor::IsCompleted(bool& _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationAccessor::IsCompleted\n");
	return 0;
}
uint32_t nn::am::service::IApplicationAccessor::PushLaunchParameter(uint32_t _0, nn::am::service::IStorage* _1) {
	ns_print("Stub implementation for nn::am::service::IApplicationAccessor::PushLaunchParameter\n");
	return 0;
}
uint32_t nn::am::service::IApplicationAccessor::RequestExit() {
	ns_print("Stub implementation for nn::am::service::IApplicationAccessor::RequestExit\n");
	return 0;
}
uint32_t nn::am::service::IApplicationAccessor::RequestForApplicationToGetForeground() {
	ns_print("Stub implementation for nn::am::service::IApplicationAccessor::RequestForApplicationToGetForeground\n");
	return 0;
}
uint32_t nn::am::service::IApplicationAccessor::Start() {
	ns_print("Stub implementation for nn::am::service::IApplicationAccessor::Start\n");
	return 0;
}
uint32_t nn::am::service::IApplicationAccessor::Terminate() {
	ns_print("Stub implementation for nn::am::service::IApplicationAccessor::Terminate\n");
	return 0;
}
uint32_t nn::am::service::IApplicationAccessor::TerminateAllLibraryApplets() {
	ns_print("Stub implementation for nn::am::service::IApplicationAccessor::TerminateAllLibraryApplets\n");
	return 0;
}
uint32_t nn::am::service::IApplicationCreator::CreateApplication(nn::ncm::ApplicationId _0, nn::am::service::IApplicationAccessor*& _1) {
	ns_print("Stub implementation for nn::am::service::IApplicationCreator::CreateApplication\n");
	return 0;
}
uint32_t nn::am::service::IApplicationCreator::CreateSystemApplication(nn::ncm::SystemApplicationId _0, nn::am::service::IApplicationAccessor*& _1) {
	ns_print("Stub implementation for nn::am::service::IApplicationCreator::CreateSystemApplication\n");
	return 0;
}
uint32_t nn::am::service::IApplicationCreator::PopFloatingApplicationForDevelopment(nn::am::service::IApplicationAccessor*& _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationCreator::PopFloatingApplicationForDevelopment\n");
	return 0;
}
uint32_t nn::am::service::IApplicationCreator::PopLaunchRequestedApplication(nn::am::service::IApplicationAccessor*& _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationCreator::PopLaunchRequestedApplication\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::BeginBlockingHomeButton(int64_t _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::BeginBlockingHomeButton\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::BeginBlockingHomeButtonShortAndLongPressed(int64_t _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::BeginBlockingHomeButtonShortAndLongPressed\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::CreateApplicationAndPushAndRequestToStart(nn::ncm::ApplicationId _0, nn::am::service::IStorage* _1) {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::CreateApplicationAndPushAndRequestToStart\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::CreateApplicationAndPushAndRequestToStartForQuest(uint32_t _0, uint32_t _1, nn::ncm::ApplicationId _2, nn::am::service::IStorage* _3) {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::CreateApplicationAndPushAndRequestToStartForQuest\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::EndBlockingHomeButton() {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::EndBlockingHomeButton\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::EndBlockingHomeButtonShortAndLongPressed() {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::EndBlockingHomeButtonShortAndLongPressed\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::EnsureSaveData(nn::account::Uid _0, int64_t& _1) {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::EnsureSaveData\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::ExtendSaveData(uint8_t _0, nn::account::Uid _1, int64_t _2, int64_t _3, int64_t& _4) {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::ExtendSaveData\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::GetDesiredLanguage(nn::settings::LanguageCode& _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::GetDesiredLanguage\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::GetDisplayVersion(nn::oe::DisplayVersion& _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::GetDisplayVersion\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::GetLaunchStorageInfoForDebug(nn::ncm::StorageId& _0, nn::ncm::StorageId& _1) {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::GetLaunchStorageInfoForDebug\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::GetPseudoDeviceId(nn::util::Uuid& _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::GetPseudoDeviceId\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::GetSaveDataSize(uint8_t _0, nn::account::Uid _1, int64_t& _2, int64_t& _3) {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::GetSaveDataSize\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::InitializeGamePlayRecording(uint64_t _0, IpcService* _1) {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::InitializeGamePlayRecording\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::IsGamePlayRecordingSupported(bool& _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::IsGamePlayRecordingSupported\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::NotifyRunning(bool& _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::NotifyRunning\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::PopLaunchParameter(uint32_t _0, nn::am::service::IStorage*& _1) {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::PopLaunchParameter\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::RequestToReboot() {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::RequestToReboot\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::RequestToShutdown() {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::RequestToShutdown\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::SetGamePlayRecordingState(int32_t _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::SetGamePlayRecordingState\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::SetMediaPlaybackStateForApplication(bool _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::SetMediaPlaybackStateForApplication\n");
	return 0;
}
uint32_t nn::am::service::IApplicationFunctions::SetTerminateResult(uint32_t _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationFunctions::SetTerminateResult\n");
	return 0;
}
uint32_t nn::am::service::IApplicationProxy::GetApplicationFunctions(nn::am::service::IApplicationFunctions*& _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationProxy::GetApplicationFunctions\n");
	return 0;
}
uint32_t nn::am::service::IApplicationProxy::GetAudioController(nn::am::service::IAudioController*& _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationProxy::GetAudioController\n");
	return 0;
}
uint32_t nn::am::service::IApplicationProxy::GetCommonStateGetter(nn::am::service::ICommonStateGetter*& _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationProxy::GetCommonStateGetter\n");
	return 0;
}
uint32_t nn::am::service::IApplicationProxy::GetDebugFunctions(nn::am::service::IDebugFunctions*& _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationProxy::GetDebugFunctions\n");
	return 0;
}
uint32_t nn::am::service::IApplicationProxy::GetDisplayController(nn::am::service::IDisplayController*& _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationProxy::GetDisplayController\n");
	return 0;
}
uint32_t nn::am::service::IApplicationProxy::GetLibraryAppletCreator(nn::am::service::ILibraryAppletCreator*& _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationProxy::GetLibraryAppletCreator\n");
	return 0;
}
uint32_t nn::am::service::IApplicationProxy::GetProcessWindingController(nn::am::service::IProcessWindingController*& _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationProxy::GetProcessWindingController\n");
	return 0;
}
uint32_t nn::am::service::IApplicationProxy::GetSelfController(nn::am::service::ISelfController*& _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationProxy::GetSelfController\n");
	return 0;
}
uint32_t nn::am::service::IApplicationProxy::GetWindowController(nn::am::service::IWindowController*& _0) {
	ns_print("Stub implementation for nn::am::service::IApplicationProxy::GetWindowController\n");
	return 0;
}
uint32_t nn::am::service::IApplicationProxyService::OpenApplicationProxy(uint64_t _0, uint64_t _1, IpcService* _2, nn::am::service::IApplicationProxy*& _3) {
	ns_print("Stub implementation for nn::am::service::IApplicationProxyService::OpenApplicationProxy\n");
	return 0;
}
uint32_t nn::am::service::IAudioController::ChangeMainAppletMasterVolume(float _0, int64_t _1) {
	ns_print("Stub implementation for nn::am::service::IAudioController::ChangeMainAppletMasterVolume\n");
	return 0;
}
uint32_t nn::am::service::IAudioController::GetLibraryAppletExpectedMasterVolume(float& _0) {
	ns_print("Stub implementation for nn::am::service::IAudioController::GetLibraryAppletExpectedMasterVolume\n");
	return 0;
}
uint32_t nn::am::service::IAudioController::GetMainAppletExpectedMasterVolume(float& _0) {
	ns_print("Stub implementation for nn::am::service::IAudioController::GetMainAppletExpectedMasterVolume\n");
	return 0;
}
uint32_t nn::am::service::IAudioController::SetExpectedMasterVolume(float _0, float _1) {
	ns_print("Stub implementation for nn::am::service::IAudioController::SetExpectedMasterVolume\n");
	return 0;
}
uint32_t nn::am::service::IAudioController::SetTransparentVolumeRate(float _0) {
	ns_print("Stub implementation for nn::am::service::IAudioController::SetTransparentVolumeRate\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::AllowToEnterSleep() {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::AllowToEnterSleep\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::DisallowToEnterSleep() {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::DisallowToEnterSleep\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::GetAcquiredSleepLockEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::GetAcquiredSleepLockEvent\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::GetBootMode(uint8_t& _0) {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::GetBootMode\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::GetCradleFwVersion(uint32_t& _0, uint32_t& _1, uint32_t& _2, uint32_t& _3) {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::GetCradleFwVersion\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::GetCradleStatus(uint8_t& _0) {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::GetCradleStatus\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::GetCurrentFocusState(uint8_t& _0) {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::GetCurrentFocusState\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::GetDefaultDisplayResolution(int32_t& _0, int32_t& _1) {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::GetDefaultDisplayResolution\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::GetDefaultDisplayResolutionChangeEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::GetDefaultDisplayResolutionChangeEvent\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::GetEventHandle(IpcService*& _0) {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::GetEventHandle\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::GetHomeButtonReaderLockAccessor(nn::am::service::ILockAccessor*& _0) {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::GetHomeButtonReaderLockAccessor\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::GetOperationMode(uint8_t& _0) {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::GetOperationMode\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::GetPerformanceMode(uint32_t& _0) {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::GetPerformanceMode\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::GetReaderLockAccessorEx(int32_t _0, nn::am::service::ILockAccessor*& _1) {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::GetReaderLockAccessorEx\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::GetThisAppletKind(nn::am::service::AppletKind& _0) {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::GetThisAppletKind\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::IsInControllerFirmwareUpdateSection(bool& _0) {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::IsInControllerFirmwareUpdateSection\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::IsVrModeEnabled(bool& _0) {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::IsVrModeEnabled\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::PushToGeneralChannel(nn::am::service::IStorage* _0) {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::PushToGeneralChannel\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::ReceiveMessage(nn::am::AppletMessage& _0) {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::ReceiveMessage\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::ReleaseSleepLock() {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::ReleaseSleepLock\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::ReleaseSleepLockTransiently() {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::ReleaseSleepLockTransiently\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::RequestToAcquireSleepLock() {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::RequestToAcquireSleepLock\n");
	return 0;
}
uint32_t nn::am::service::ICommonStateGetter::SetVrModeEnabled(bool _0) {
	ns_print("Stub implementation for nn::am::service::ICommonStateGetter::SetVrModeEnabled\n");
	return 0;
}
uint32_t nn::am::service::IDebugFunctions::EmulateButtonEvent(nn::am::service::EmulatedButtonEvent _0) {
	ns_print("Stub implementation for nn::am::service::IDebugFunctions::EmulateButtonEvent\n");
	return 0;
}
uint32_t nn::am::service::IDebugFunctions::InvalidateTransitionLayer() {
	ns_print("Stub implementation for nn::am::service::IDebugFunctions::InvalidateTransitionLayer\n");
	return 0;
}
uint32_t nn::am::service::IDebugFunctions::NotifyMessageToHomeMenuForDebug(nn::am::AppletMessage _0) {
	ns_print("Stub implementation for nn::am::service::IDebugFunctions::NotifyMessageToHomeMenuForDebug\n");
	return 0;
}
uint32_t nn::am::service::IDebugFunctions::OpenMainApplication(nn::am::service::IApplicationAccessor*& _0) {
	ns_print("Stub implementation for nn::am::service::IDebugFunctions::OpenMainApplication\n");
	return 0;
}
uint32_t nn::am::service::IDisplayController::AcquireCallerAppletCaptureBuffer(IpcService*& _0) {
	ns_print("Stub implementation for nn::am::service::IDisplayController::AcquireCallerAppletCaptureBuffer\n");
	return 0;
}
uint32_t nn::am::service::IDisplayController::AcquireCallerAppletCaptureBufferEx(bool& _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::am::service::IDisplayController::AcquireCallerAppletCaptureBufferEx\n");
	return 0;
}
uint32_t nn::am::service::IDisplayController::AcquireLastApplicationCaptureBuffer(IpcService*& _0) {
	ns_print("Stub implementation for nn::am::service::IDisplayController::AcquireLastApplicationCaptureBuffer\n");
	return 0;
}
uint32_t nn::am::service::IDisplayController::AcquireLastApplicationCaptureBufferEx(bool& _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::am::service::IDisplayController::AcquireLastApplicationCaptureBufferEx\n");
	return 0;
}
uint32_t nn::am::service::IDisplayController::AcquireLastForegroundCaptureBuffer(IpcService*& _0) {
	ns_print("Stub implementation for nn::am::service::IDisplayController::AcquireLastForegroundCaptureBuffer\n");
	return 0;
}
uint32_t nn::am::service::IDisplayController::AcquireLastForegroundCaptureBufferEx(bool& _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::am::service::IDisplayController::AcquireLastForegroundCaptureBufferEx\n");
	return 0;
}
uint32_t nn::am::service::IDisplayController::ClearAppletTransitionBuffer(uint32_t _0) {
	ns_print("Stub implementation for nn::am::service::IDisplayController::ClearAppletTransitionBuffer\n");
	return 0;
}
uint32_t nn::am::service::IDisplayController::ClearCaptureBuffer(bool _0, int32_t _1, uint32_t _2) {
	ns_print("Stub implementation for nn::am::service::IDisplayController::ClearCaptureBuffer\n");
	return 0;
}
uint32_t nn::am::service::IDisplayController::GetCallerAppletCaptureImage(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::am::service::IDisplayController::GetCallerAppletCaptureImage\n");
	return 0;
}
uint32_t nn::am::service::IDisplayController::GetCallerAppletCaptureImageEx(bool& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::am::service::IDisplayController::GetCallerAppletCaptureImageEx\n");
	return 0;
}
uint32_t nn::am::service::IDisplayController::GetLastApplicationCaptureImage(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::am::service::IDisplayController::GetLastApplicationCaptureImage\n");
	return 0;
}
uint32_t nn::am::service::IDisplayController::GetLastApplicationCaptureImageEx(bool& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::am::service::IDisplayController::GetLastApplicationCaptureImageEx\n");
	return 0;
}
uint32_t nn::am::service::IDisplayController::GetLastForegroundCaptureImage(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::am::service::IDisplayController::GetLastForegroundCaptureImage\n");
	return 0;
}
uint32_t nn::am::service::IDisplayController::GetLastForegroundCaptureImageEx(bool& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::am::service::IDisplayController::GetLastForegroundCaptureImageEx\n");
	return 0;
}
uint32_t nn::am::service::IDisplayController::ReleaseCallerAppletCaptureBuffer() {
	ns_print("Stub implementation for nn::am::service::IDisplayController::ReleaseCallerAppletCaptureBuffer\n");
	return 0;
}
uint32_t nn::am::service::IDisplayController::ReleaseLastApplicationCaptureBuffer() {
	ns_print("Stub implementation for nn::am::service::IDisplayController::ReleaseLastApplicationCaptureBuffer\n");
	return 0;
}
uint32_t nn::am::service::IDisplayController::ReleaseLastForegroundCaptureBuffer() {
	ns_print("Stub implementation for nn::am::service::IDisplayController::ReleaseLastForegroundCaptureBuffer\n");
	return 0;
}
uint32_t nn::am::service::IDisplayController::TakeScreenShotOfOwnLayer(bool _0, int32_t _1) {
	ns_print("Stub implementation for nn::am::service::IDisplayController::TakeScreenShotOfOwnLayer\n");
	return 0;
}
uint32_t nn::am::service::IDisplayController::UpdateCallerAppletCaptureImage() {
	ns_print("Stub implementation for nn::am::service::IDisplayController::UpdateCallerAppletCaptureImage\n");
	return 0;
}
uint32_t nn::am::service::IDisplayController::UpdateLastForegroundCaptureImage() {
	ns_print("Stub implementation for nn::am::service::IDisplayController::UpdateLastForegroundCaptureImage\n");
	return 0;
}
uint32_t nn::am::service::IGlobalStateController::EnterSleep() {
	ns_print("Stub implementation for nn::am::service::IGlobalStateController::EnterSleep\n");
	return 0;
}
uint32_t nn::am::service::IGlobalStateController::LoadAndApplyIdlePolicySettings() {
	ns_print("Stub implementation for nn::am::service::IGlobalStateController::LoadAndApplyIdlePolicySettings\n");
	return 0;
}
uint32_t nn::am::service::IGlobalStateController::NotifyCecSettingsChanged() {
	ns_print("Stub implementation for nn::am::service::IGlobalStateController::NotifyCecSettingsChanged\n");
	return 0;
}
uint32_t nn::am::service::IGlobalStateController::RequestToEnterSleep() {
	ns_print("Stub implementation for nn::am::service::IGlobalStateController::RequestToEnterSleep\n");
	return 0;
}
uint32_t nn::am::service::IGlobalStateController::SetDefaultHomeButtonLongPressTime(int64_t _0) {
	ns_print("Stub implementation for nn::am::service::IGlobalStateController::SetDefaultHomeButtonLongPressTime\n");
	return 0;
}
uint32_t nn::am::service::IGlobalStateController::ShouldSleepOnBoot(bool& _0) {
	ns_print("Stub implementation for nn::am::service::IGlobalStateController::ShouldSleepOnBoot\n");
	return 0;
}
uint32_t nn::am::service::IGlobalStateController::StartRebootSequence() {
	ns_print("Stub implementation for nn::am::service::IGlobalStateController::StartRebootSequence\n");
	return 0;
}
uint32_t nn::am::service::IGlobalStateController::StartShutdownSequence() {
	ns_print("Stub implementation for nn::am::service::IGlobalStateController::StartShutdownSequence\n");
	return 0;
}
uint32_t nn::am::service::IGlobalStateController::StartSleepSequence(bool _0) {
	ns_print("Stub implementation for nn::am::service::IGlobalStateController::StartSleepSequence\n");
	return 0;
}
uint32_t nn::am::service::IGlobalStateController::UpdateDefaultDisplayResolution() {
	ns_print("Stub implementation for nn::am::service::IGlobalStateController::UpdateDefaultDisplayResolution\n");
	return 0;
}
uint32_t nn::am::service::IHomeMenuFunctions::GetHomeButtonWriterLockAccessor(nn::am::service::ILockAccessor*& _0) {
	ns_print("Stub implementation for nn::am::service::IHomeMenuFunctions::GetHomeButtonWriterLockAccessor\n");
	return 0;
}
uint32_t nn::am::service::IHomeMenuFunctions::GetPopFromGeneralChannelEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::am::service::IHomeMenuFunctions::GetPopFromGeneralChannelEvent\n");
	return 0;
}
uint32_t nn::am::service::IHomeMenuFunctions::GetWriterLockAccessorEx(int32_t _0, nn::am::service::ILockAccessor*& _1) {
	ns_print("Stub implementation for nn::am::service::IHomeMenuFunctions::GetWriterLockAccessorEx\n");
	return 0;
}
uint32_t nn::am::service::IHomeMenuFunctions::LockForeground() {
	ns_print("Stub implementation for nn::am::service::IHomeMenuFunctions::LockForeground\n");
	return 0;
}
uint32_t nn::am::service::IHomeMenuFunctions::PopFromGeneralChannel(nn::am::service::IStorage*& _0) {
	ns_print("Stub implementation for nn::am::service::IHomeMenuFunctions::PopFromGeneralChannel\n");
	return 0;
}
uint32_t nn::am::service::IHomeMenuFunctions::RequestToGetForeground() {
	ns_print("Stub implementation for nn::am::service::IHomeMenuFunctions::RequestToGetForeground\n");
	return 0;
}
uint32_t nn::am::service::IHomeMenuFunctions::UnlockForeground() {
	ns_print("Stub implementation for nn::am::service::IHomeMenuFunctions::UnlockForeground\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletAccessor::GetAppletStateChangedEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletAccessor::GetAppletStateChangedEvent\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletAccessor::GetIndirectLayerConsumerHandle(nn::applet::AppletResourceUserId _0, uint64_t _1, uint64_t& _2) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletAccessor::GetIndirectLayerConsumerHandle\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletAccessor::GetLibraryAppletInfo(nn::am::service::LibraryAppletInfo& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletAccessor::GetLibraryAppletInfo\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletAccessor::GetPopInteractiveOutDataEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletAccessor::GetPopInteractiveOutDataEvent\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletAccessor::GetPopOutDataEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletAccessor::GetPopOutDataEvent\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletAccessor::GetResult() {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletAccessor::GetResult\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletAccessor::IsCompleted(bool& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletAccessor::IsCompleted\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletAccessor::NeedsToExitProcess(bool& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletAccessor::NeedsToExitProcess\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletAccessor::PopInteractiveOutData(nn::am::service::IStorage*& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletAccessor::PopInteractiveOutData\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletAccessor::PopOutData(nn::am::service::IStorage*& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletAccessor::PopOutData\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletAccessor::PushExtraStorage(nn::am::service::IStorage* _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletAccessor::PushExtraStorage\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletAccessor::PushInData(nn::am::service::IStorage* _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletAccessor::PushInData\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletAccessor::PushInteractiveInData(nn::am::service::IStorage* _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletAccessor::PushInteractiveInData\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletAccessor::RequestExit() {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletAccessor::RequestExit\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletAccessor::RequestForAppletToGetForeground() {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletAccessor::RequestForAppletToGetForeground\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletAccessor::SetOutOfFocusApplicationSuspendingEnabled(bool _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletAccessor::SetOutOfFocusApplicationSuspendingEnabled\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletAccessor::Start() {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletAccessor::Start\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletAccessor::Terminate() {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletAccessor::Terminate\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletCreator::AreAnyLibraryAppletsLeft(bool& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletCreator::AreAnyLibraryAppletsLeft\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletCreator::CreateHandleStorage(int64_t _0, IpcService* _1, nn::am::service::IStorage*& _2) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletCreator::CreateHandleStorage\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletCreator::CreateLibraryApplet(uint32_t _0, uint32_t _1, nn::am::service::ILibraryAppletAccessor*& _2) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletCreator::CreateLibraryApplet\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletCreator::CreateStorage(int64_t _0, nn::am::service::IStorage*& _1) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletCreator::CreateStorage\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletCreator::CreateTransferMemoryStorage(bool _0, int64_t _1, IpcService* _2, nn::am::service::IStorage*& _3) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletCreator::CreateTransferMemoryStorage\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletCreator::TerminateAllLibraryApplets() {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletCreator::TerminateAllLibraryApplets\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletProxy::GetAudioController(nn::am::service::IAudioController*& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletProxy::GetAudioController\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletProxy::GetCommonStateGetter(nn::am::service::ICommonStateGetter*& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletProxy::GetCommonStateGetter\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletProxy::GetDebugFunctions(nn::am::service::IDebugFunctions*& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletProxy::GetDebugFunctions\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletProxy::GetDisplayController(nn::am::service::IDisplayController*& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletProxy::GetDisplayController\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletProxy::GetLibraryAppletCreator(nn::am::service::ILibraryAppletCreator*& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletProxy::GetLibraryAppletCreator\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletProxy::GetProcessWindingController(nn::am::service::IProcessWindingController*& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletProxy::GetProcessWindingController\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletProxy::GetSelfController(nn::am::service::ISelfController*& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletProxy::GetSelfController\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletProxy::GetWindowController(nn::am::service::IWindowController*& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletProxy::GetWindowController\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletProxy::OpenLibraryAppletSelfAccessor(nn::am::service::ILibraryAppletSelfAccessor*& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletProxy::OpenLibraryAppletSelfAccessor\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletSelfAccessor::CanUseApplicationCore(bool& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletSelfAccessor::CanUseApplicationCore\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletSelfAccessor::ExitProcessAndReturn() {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletSelfAccessor::ExitProcessAndReturn\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletSelfAccessor::GetCallerAppletIdentityInfo(nn::am::service::AppletIdentityInfo& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletSelfAccessor::GetCallerAppletIdentityInfo\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletSelfAccessor::GetCallerAppletIdentityInfoStack(int32_t& _0, nn::am::service::AppletIdentityInfo *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletSelfAccessor::GetCallerAppletIdentityInfoStack\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletSelfAccessor::GetIndirectLayerProducerHandle(uint64_t& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletSelfAccessor::GetIndirectLayerProducerHandle\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletSelfAccessor::GetLibraryAppletInfo(nn::am::service::LibraryAppletInfo& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletSelfAccessor::GetLibraryAppletInfo\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletSelfAccessor::GetMainAppletApplicationControlProperty(nn::ns::ApplicationControlProperty *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletSelfAccessor::GetMainAppletApplicationControlProperty\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletSelfAccessor::GetMainAppletIdentityInfo(nn::am::service::AppletIdentityInfo& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletSelfAccessor::GetMainAppletIdentityInfo\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletSelfAccessor::GetMainAppletStorageId(nn::ncm::StorageId& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletSelfAccessor::GetMainAppletStorageId\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletSelfAccessor::GetPopExtraStorageEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletSelfAccessor::GetPopExtraStorageEvent\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletSelfAccessor::GetPopInDataEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletSelfAccessor::GetPopInDataEvent\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletSelfAccessor::GetPopInteractiveInDataEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletSelfAccessor::GetPopInteractiveInDataEvent\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletSelfAccessor::PopExtraStorage(nn::am::service::IStorage*& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletSelfAccessor::PopExtraStorage\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletSelfAccessor::PopInData(nn::am::service::IStorage*& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletSelfAccessor::PopInData\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletSelfAccessor::PopInteractiveInData(nn::am::service::IStorage*& _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletSelfAccessor::PopInteractiveInData\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletSelfAccessor::PushInteractiveOutData(nn::am::service::IStorage* _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletSelfAccessor::PushInteractiveOutData\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletSelfAccessor::PushOutData(nn::am::service::IStorage* _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletSelfAccessor::PushOutData\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletSelfAccessor::ReportVisibleError(nn::err::ErrorCode _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletSelfAccessor::ReportVisibleError\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletSelfAccessor::UnpopExtraStorage(nn::am::service::IStorage* _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletSelfAccessor::UnpopExtraStorage\n");
	return 0;
}
uint32_t nn::am::service::ILibraryAppletSelfAccessor::UnpopInData(nn::am::service::IStorage* _0) {
	ns_print("Stub implementation for nn::am::service::ILibraryAppletSelfAccessor::UnpopInData\n");
	return 0;
}
uint32_t nn::am::service::ILockAccessor::GetEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::am::service::ILockAccessor::GetEvent\n");
	return 0;
}
uint32_t nn::am::service::ILockAccessor::TryLock(bool _0, bool& _1, IpcService*& _2) {
	ns_print("Stub implementation for nn::am::service::ILockAccessor::TryLock\n");
	return 0;
}
uint32_t nn::am::service::ILockAccessor::Unlock() {
	ns_print("Stub implementation for nn::am::service::ILockAccessor::Unlock\n");
	return 0;
}
uint32_t nn::am::service::IOverlayAppletProxy::GetAudioController(nn::am::service::IAudioController*& _0) {
	ns_print("Stub implementation for nn::am::service::IOverlayAppletProxy::GetAudioController\n");
	return 0;
}
uint32_t nn::am::service::IOverlayAppletProxy::GetCommonStateGetter(nn::am::service::ICommonStateGetter*& _0) {
	ns_print("Stub implementation for nn::am::service::IOverlayAppletProxy::GetCommonStateGetter\n");
	return 0;
}
uint32_t nn::am::service::IOverlayAppletProxy::GetDebugFunctions(nn::am::service::IDebugFunctions*& _0) {
	ns_print("Stub implementation for nn::am::service::IOverlayAppletProxy::GetDebugFunctions\n");
	return 0;
}
uint32_t nn::am::service::IOverlayAppletProxy::GetDisplayController(nn::am::service::IDisplayController*& _0) {
	ns_print("Stub implementation for nn::am::service::IOverlayAppletProxy::GetDisplayController\n");
	return 0;
}
uint32_t nn::am::service::IOverlayAppletProxy::GetLibraryAppletCreator(nn::am::service::ILibraryAppletCreator*& _0) {
	ns_print("Stub implementation for nn::am::service::IOverlayAppletProxy::GetLibraryAppletCreator\n");
	return 0;
}
uint32_t nn::am::service::IOverlayAppletProxy::GetOverlayFunctions(nn::am::service::IOverlayFunctions*& _0) {
	ns_print("Stub implementation for nn::am::service::IOverlayAppletProxy::GetOverlayFunctions\n");
	return 0;
}
uint32_t nn::am::service::IOverlayAppletProxy::GetProcessWindingController(nn::am::service::IProcessWindingController*& _0) {
	ns_print("Stub implementation for nn::am::service::IOverlayAppletProxy::GetProcessWindingController\n");
	return 0;
}
uint32_t nn::am::service::IOverlayAppletProxy::GetSelfController(nn::am::service::ISelfController*& _0) {
	ns_print("Stub implementation for nn::am::service::IOverlayAppletProxy::GetSelfController\n");
	return 0;
}
uint32_t nn::am::service::IOverlayAppletProxy::GetWindowController(nn::am::service::IWindowController*& _0) {
	ns_print("Stub implementation for nn::am::service::IOverlayAppletProxy::GetWindowController\n");
	return 0;
}
uint32_t nn::am::service::IOverlayFunctions::BeginToWatchShortHomeButtonMessage() {
	ns_print("Stub implementation for nn::am::service::IOverlayFunctions::BeginToWatchShortHomeButtonMessage\n");
	return 0;
}
uint32_t nn::am::service::IOverlayFunctions::EndToWatchShortHomeButtonMessage() {
	ns_print("Stub implementation for nn::am::service::IOverlayFunctions::EndToWatchShortHomeButtonMessage\n");
	return 0;
}
uint32_t nn::am::service::IOverlayFunctions::GetApplicationIdForLogo(nn::ncm::ApplicationId& _0) {
	ns_print("Stub implementation for nn::am::service::IOverlayFunctions::GetApplicationIdForLogo\n");
	return 0;
}
uint32_t nn::am::service::IOverlayFunctions::SetAutoSleepTimeAndDimmingTimeEnabled(bool _0) {
	ns_print("Stub implementation for nn::am::service::IOverlayFunctions::SetAutoSleepTimeAndDimmingTimeEnabled\n");
	return 0;
}
uint32_t nn::am::service::IOverlayFunctions::SetGpuTimeSliceBoost(uint64_t _0) {
	ns_print("Stub implementation for nn::am::service::IOverlayFunctions::SetGpuTimeSliceBoost\n");
	return 0;
}
uint32_t nn::am::service::IOverlayFunctions::SetScreenShotPermissionGlobally(bool _0) {
	ns_print("Stub implementation for nn::am::service::IOverlayFunctions::SetScreenShotPermissionGlobally\n");
	return 0;
}
uint32_t nn::am::service::IOverlayFunctions::TerminateApplicationAndSetReason(uint32_t _0) {
	ns_print("Stub implementation for nn::am::service::IOverlayFunctions::TerminateApplicationAndSetReason\n");
	return 0;
}
uint32_t nn::am::service::IProcessWindingController::CancelWindingReservation() {
	ns_print("Stub implementation for nn::am::service::IProcessWindingController::CancelWindingReservation\n");
	return 0;
}
uint32_t nn::am::service::IProcessWindingController::GetLaunchReason(nn::am::service::AppletProcessLaunchReason& _0) {
	ns_print("Stub implementation for nn::am::service::IProcessWindingController::GetLaunchReason\n");
	return 0;
}
uint32_t nn::am::service::IProcessWindingController::OpenCallingLibraryApplet(nn::am::service::ILibraryAppletAccessor*& _0) {
	ns_print("Stub implementation for nn::am::service::IProcessWindingController::OpenCallingLibraryApplet\n");
	return 0;
}
uint32_t nn::am::service::IProcessWindingController::PopContext(nn::am::service::IStorage*& _0) {
	ns_print("Stub implementation for nn::am::service::IProcessWindingController::PopContext\n");
	return 0;
}
uint32_t nn::am::service::IProcessWindingController::PushContext(nn::am::service::IStorage* _0) {
	ns_print("Stub implementation for nn::am::service::IProcessWindingController::PushContext\n");
	return 0;
}
uint32_t nn::am::service::IProcessWindingController::ReserveToStartAndWaitAndUnwindThis(nn::am::service::ILibraryAppletAccessor* _0) {
	ns_print("Stub implementation for nn::am::service::IProcessWindingController::ReserveToStartAndWaitAndUnwindThis\n");
	return 0;
}
uint32_t nn::am::service::IProcessWindingController::WindAndDoReserved() {
	ns_print("Stub implementation for nn::am::service::IProcessWindingController::WindAndDoReserved\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::ApproveToDisplay() {
	ns_print("Stub implementation for nn::am::service::ISelfController::ApproveToDisplay\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::CreateManagedDisplayLayer(uint64_t& _0) {
	ns_print("Stub implementation for nn::am::service::ISelfController::CreateManagedDisplayLayer\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::EnterFatalSection() {
	ns_print("Stub implementation for nn::am::service::ISelfController::EnterFatalSection\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::Exit() {
	ns_print("Stub implementation for nn::am::service::ISelfController::Exit\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::GetCurrentIlluminance(float& _0) {
	ns_print("Stub implementation for nn::am::service::ISelfController::GetCurrentIlluminance\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::GetIdleTimeDetectionExtension(uint32_t& _0) {
	ns_print("Stub implementation for nn::am::service::ISelfController::GetIdleTimeDetectionExtension\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::GetLibraryAppletLaunchableEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::am::service::ISelfController::GetLibraryAppletLaunchableEvent\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::IsIlluminanceAvailable(bool& _0) {
	ns_print("Stub implementation for nn::am::service::ISelfController::IsIlluminanceAvailable\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::LeaveFatalSection() {
	ns_print("Stub implementation for nn::am::service::ISelfController::LeaveFatalSection\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::LockExit() {
	ns_print("Stub implementation for nn::am::service::ISelfController::LockExit\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::OverrideAutoSleepTimeAndDimmingTime(int32_t _0, int32_t _1, int32_t _2, int32_t _3) {
	ns_print("Stub implementation for nn::am::service::ISelfController::OverrideAutoSleepTimeAndDimmingTime\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::ReportUserIsActive() {
	ns_print("Stub implementation for nn::am::service::ISelfController::ReportUserIsActive\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::SetControllerFirmwareUpdateSection(bool _0) {
	ns_print("Stub implementation for nn::am::service::ISelfController::SetControllerFirmwareUpdateSection\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::SetFocusHandlingMode(bool _0, bool _1, bool _2) {
	ns_print("Stub implementation for nn::am::service::ISelfController::SetFocusHandlingMode\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::SetHandlesRequestToDisplay(bool _0) {
	ns_print("Stub implementation for nn::am::service::ISelfController::SetHandlesRequestToDisplay\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::SetIdleTimeDetectionExtension(uint32_t _0) {
	ns_print("Stub implementation for nn::am::service::ISelfController::SetIdleTimeDetectionExtension\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::SetInputDetectionSourceSet(uint32_t _0) {
	ns_print("Stub implementation for nn::am::service::ISelfController::SetInputDetectionSourceSet\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::SetMediaPlaybackState(bool _0) {
	ns_print("Stub implementation for nn::am::service::ISelfController::SetMediaPlaybackState\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::SetOperationModeChangedNotification(bool _0) {
	ns_print("Stub implementation for nn::am::service::ISelfController::SetOperationModeChangedNotification\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::SetOutOfFocusSuspendingEnabled(bool _0) {
	ns_print("Stub implementation for nn::am::service::ISelfController::SetOutOfFocusSuspendingEnabled\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::SetPerformanceModeChangedNotification(bool _0) {
	ns_print("Stub implementation for nn::am::service::ISelfController::SetPerformanceModeChangedNotification\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::SetRequiresCaptureButtonShortPressedMessage(bool _0) {
	ns_print("Stub implementation for nn::am::service::ISelfController::SetRequiresCaptureButtonShortPressedMessage\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::SetRestartMessageEnabled(bool _0) {
	ns_print("Stub implementation for nn::am::service::ISelfController::SetRestartMessageEnabled\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::SetScreenShotAppletIdentityInfo(nn::am::service::AppletIdentityInfo _0) {
	ns_print("Stub implementation for nn::am::service::ISelfController::SetScreenShotAppletIdentityInfo\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::SetScreenShotImageOrientation(int32_t _0) {
	ns_print("Stub implementation for nn::am::service::ISelfController::SetScreenShotImageOrientation\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::SetScreenShotPermission(int32_t _0) {
	ns_print("Stub implementation for nn::am::service::ISelfController::SetScreenShotPermission\n");
	return 0;
}
uint32_t nn::am::service::ISelfController::UnlockExit() {
	ns_print("Stub implementation for nn::am::service::ISelfController::UnlockExit\n");
	return 0;
}
uint32_t nn::am::service::IStorage::Open(nn::am::service::IStorageAccessor*& _0) {
	ns_print("Stub implementation for nn::am::service::IStorage::Open\n");
	return 0;
}
uint32_t nn::am::service::IStorage::OpenTransferStorage(nn::am::service::ITransferStorageAccessor*& _0) {
	ns_print("Stub implementation for nn::am::service::IStorage::OpenTransferStorage\n");
	return 0;
}
uint32_t nn::am::service::IStorageAccessor::GetSize(int64_t& _0) {
	ns_print("Stub implementation for nn::am::service::IStorageAccessor::GetSize\n");
	return 0;
}
uint32_t nn::am::service::IStorageAccessor::Read(int64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::am::service::IStorageAccessor::Read\n");
	return 0;
}
uint32_t nn::am::service::IStorageAccessor::Write(int64_t _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::am::service::IStorageAccessor::Write\n");
	return 0;
}
uint32_t nn::am::service::ISystemAppletProxy::GetApplicationCreator(nn::am::service::IApplicationCreator*& _0) {
	ns_print("Stub implementation for nn::am::service::ISystemAppletProxy::GetApplicationCreator\n");
	return 0;
}
uint32_t nn::am::service::ISystemAppletProxy::GetAudioController(nn::am::service::IAudioController*& _0) {
	ns_print("Stub implementation for nn::am::service::ISystemAppletProxy::GetAudioController\n");
	return 0;
}
uint32_t nn::am::service::ISystemAppletProxy::GetCommonStateGetter(nn::am::service::ICommonStateGetter*& _0) {
	ns_print("Stub implementation for nn::am::service::ISystemAppletProxy::GetCommonStateGetter\n");
	return 0;
}
uint32_t nn::am::service::ISystemAppletProxy::GetDebugFunctions(nn::am::service::IDebugFunctions*& _0) {
	ns_print("Stub implementation for nn::am::service::ISystemAppletProxy::GetDebugFunctions\n");
	return 0;
}
uint32_t nn::am::service::ISystemAppletProxy::GetDisplayController(nn::am::service::IDisplayController*& _0) {
	ns_print("Stub implementation for nn::am::service::ISystemAppletProxy::GetDisplayController\n");
	return 0;
}
uint32_t nn::am::service::ISystemAppletProxy::GetGlobalStateController(nn::am::service::IGlobalStateController*& _0) {
	ns_print("Stub implementation for nn::am::service::ISystemAppletProxy::GetGlobalStateController\n");
	return 0;
}
uint32_t nn::am::service::ISystemAppletProxy::GetHomeMenuFunctions(nn::am::service::IHomeMenuFunctions*& _0) {
	ns_print("Stub implementation for nn::am::service::ISystemAppletProxy::GetHomeMenuFunctions\n");
	return 0;
}
uint32_t nn::am::service::ISystemAppletProxy::GetLibraryAppletCreator(nn::am::service::ILibraryAppletCreator*& _0) {
	ns_print("Stub implementation for nn::am::service::ISystemAppletProxy::GetLibraryAppletCreator\n");
	return 0;
}
uint32_t nn::am::service::ISystemAppletProxy::GetProcessWindingController(nn::am::service::IProcessWindingController*& _0) {
	ns_print("Stub implementation for nn::am::service::ISystemAppletProxy::GetProcessWindingController\n");
	return 0;
}
uint32_t nn::am::service::ISystemAppletProxy::GetSelfController(nn::am::service::ISelfController*& _0) {
	ns_print("Stub implementation for nn::am::service::ISystemAppletProxy::GetSelfController\n");
	return 0;
}
uint32_t nn::am::service::ISystemAppletProxy::GetWindowController(nn::am::service::IWindowController*& _0) {
	ns_print("Stub implementation for nn::am::service::ISystemAppletProxy::GetWindowController\n");
	return 0;
}
uint32_t nn::am::service::ITransferStorageAccessor::GetHandle(uint64_t& _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::am::service::ITransferStorageAccessor::GetHandle\n");
	return 0;
}
uint32_t nn::am::service::ITransferStorageAccessor::GetSize(int64_t& _0) {
	ns_print("Stub implementation for nn::am::service::ITransferStorageAccessor::GetSize\n");
	return 0;
}
uint32_t nn::am::service::IWindow::Unknown12345() {
	ns_print("Stub implementation for nn::am::service::IWindow::Unknown12345\n");
	return 0;
}
uint32_t nn::am::service::IWindowController::AcquireForegroundRights() {
	ns_print("Stub implementation for nn::am::service::IWindowController::AcquireForegroundRights\n");
	return 0;
}
uint32_t nn::am::service::IWindowController::CreateWindow(nn::am::service::WindowCreationOption _0, nn::am::service::IWindow*& _1) {
	ns_print("Stub implementation for nn::am::service::IWindowController::CreateWindow\n");
	return 0;
}
uint32_t nn::am::service::IWindowController::GetAppletResourceUserId(nn::applet::AppletResourceUserId& _0) {
	ns_print("Stub implementation for nn::am::service::IWindowController::GetAppletResourceUserId\n");
	return 0;
}
uint32_t nn::am::service::IWindowController::RejectToChangeIntoBackground() {
	ns_print("Stub implementation for nn::am::service::IWindowController::RejectToChangeIntoBackground\n");
	return 0;
}
uint32_t nn::am::service::IWindowController::ReleaseForegroundRights() {
	ns_print("Stub implementation for nn::am::service::IWindowController::ReleaseForegroundRights\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::aocsrv::detail {
	class IAddOnContentManager : public IpcService {
	public:
		IAddOnContentManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::aocsrv::detail::IAddOnContentManager::CountAddOnContentByApplicationId: nn::ncm::ApplicationId = 0x%%lx\n", req->GetData<nn::ncm::ApplicationId>(8));
				resp->error_code = CountAddOnContentByApplicationId(req->GetData<nn::ncm::ApplicationId>(8), *resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				int32_t* temp3 = (int32_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::aocsrv::detail::IAddOnContentManager::ListAddOnContentByApplicationId: int32_t = 0x%x, int32_t = 0x%x, nn::ncm::ApplicationId = 0x%%lx\n", req->GetData<int32_t>(8), req->GetData<int32_t>(0xc), req->GetData<nn::ncm::ApplicationId>(0x10));
				resp->error_code = ListAddOnContentByApplicationId(req->GetData<int32_t>(8), req->GetData<int32_t>(0xc), req->GetData<nn::ncm::ApplicationId>(0x10), *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::aocsrv::detail::IAddOnContentManager::CountAddOnContent: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = CountAddOnContent(req->GetData<uint64_t>(8), req->pid, *resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				int32_t* temp3 = (int32_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::aocsrv::detail::IAddOnContentManager::ListAddOnContent: int32_t = 0x%x, int32_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<int32_t>(8), req->GetData<int32_t>(0xc), req->GetData<uint64_t>(0x10));
				resp->error_code = ListAddOnContent(req->GetData<int32_t>(8), req->GetData<int32_t>(0xc), req->GetData<uint64_t>(0x10), req->pid, *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::aocsrv::detail::IAddOnContentManager::GetAddOnContentBaseIdByApplicationId: nn::ncm::ApplicationId = 0x%%lx\n", req->GetData<nn::ncm::ApplicationId>(8));
				resp->error_code = GetAddOnContentBaseIdByApplicationId(req->GetData<nn::ncm::ApplicationId>(8), *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::aocsrv::detail::IAddOnContentManager::GetAddOnContentBaseId: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetAddOnContentBaseId(req->GetData<uint64_t>(8), req->pid, *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::aocsrv::detail::IAddOnContentManager::PrepareAddOnContentByApplicationId: int32_t = 0x%x, nn::ncm::ApplicationId = 0x%%lx\n", req->GetData<int32_t>(8), req->GetData<nn::ncm::ApplicationId>(0x10));
				resp->error_code = PrepareAddOnContentByApplicationId(req->GetData<int32_t>(8), req->GetData<nn::ncm::ApplicationId>(0x10));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::aocsrv::detail::IAddOnContentManager::PrepareAddOnContent: int32_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<int32_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = PrepareAddOnContent(req->GetData<int32_t>(8), req->GetData<uint64_t>(0x10), req->pid);
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::aocsrv::detail::IAddOnContentManager", req->cmd_id);
			}
		}
		uint32_t CountAddOnContent(uint64_t _0, uint64_t _1, int32_t& _2);
		uint32_t CountAddOnContentByApplicationId(nn::ncm::ApplicationId _0, int32_t& _1);
		uint32_t GetAddOnContentBaseId(uint64_t _0, uint64_t _1, uint64_t& _2);
		uint32_t GetAddOnContentBaseIdByApplicationId(nn::ncm::ApplicationId _0, uint64_t& _1);
		uint32_t ListAddOnContent(int32_t _0, int32_t _1, uint64_t _2, uint64_t _3, int32_t& _4, int32_t *& _5, unsigned int _5_size);
		uint32_t ListAddOnContentByApplicationId(int32_t _0, int32_t _1, nn::ncm::ApplicationId _2, int32_t& _3, int32_t *& _4, unsigned int _4_size);
		uint32_t PrepareAddOnContent(int32_t _0, uint64_t _1, uint64_t _2);
		uint32_t PrepareAddOnContentByApplicationId(int32_t _0, nn::ncm::ApplicationId _1);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::aocsrv::detail::IAddOnContentManager::CountAddOnContent(uint64_t _0, uint64_t _1, int32_t& _2) {
	ns_print("Stub implementation for nn::aocsrv::detail::IAddOnContentManager::CountAddOnContent\n");
	return 0;
}
uint32_t nn::aocsrv::detail::IAddOnContentManager::CountAddOnContentByApplicationId(nn::ncm::ApplicationId _0, int32_t& _1) {
	ns_print("Stub implementation for nn::aocsrv::detail::IAddOnContentManager::CountAddOnContentByApplicationId\n");
	return 0;
}
uint32_t nn::aocsrv::detail::IAddOnContentManager::GetAddOnContentBaseId(uint64_t _0, uint64_t _1, uint64_t& _2) {
	ns_print("Stub implementation for nn::aocsrv::detail::IAddOnContentManager::GetAddOnContentBaseId\n");
	return 0;
}
uint32_t nn::aocsrv::detail::IAddOnContentManager::GetAddOnContentBaseIdByApplicationId(nn::ncm::ApplicationId _0, uint64_t& _1) {
	ns_print("Stub implementation for nn::aocsrv::detail::IAddOnContentManager::GetAddOnContentBaseIdByApplicationId\n");
	return 0;
}
uint32_t nn::aocsrv::detail::IAddOnContentManager::ListAddOnContent(int32_t _0, int32_t _1, uint64_t _2, uint64_t _3, int32_t& _4, int32_t *& _5, unsigned int _5_size) {
	ns_print("Stub implementation for nn::aocsrv::detail::IAddOnContentManager::ListAddOnContent\n");
	return 0;
}
uint32_t nn::aocsrv::detail::IAddOnContentManager::ListAddOnContentByApplicationId(int32_t _0, int32_t _1, nn::ncm::ApplicationId _2, int32_t& _3, int32_t *& _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::aocsrv::detail::IAddOnContentManager::ListAddOnContentByApplicationId\n");
	return 0;
}
uint32_t nn::aocsrv::detail::IAddOnContentManager::PrepareAddOnContent(int32_t _0, uint64_t _1, uint64_t _2) {
	ns_print("Stub implementation for nn::aocsrv::detail::IAddOnContentManager::PrepareAddOnContent\n");
	return 0;
}
uint32_t nn::aocsrv::detail::IAddOnContentManager::PrepareAddOnContentByApplicationId(int32_t _0, nn::ncm::ApplicationId _1) {
	ns_print("Stub implementation for nn::aocsrv::detail::IAddOnContentManager::PrepareAddOnContentByApplicationId\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::apm {
	class IManager : public IpcService {
	public:
		IManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::apm::ISession* temp1;
				ns_print("IPC message to nn::apm::IManager::OpenSession\n");
				resp->error_code = OpenSession(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::apm::IManager::GetPerformanceMode\n");
				resp->error_code = GetPerformanceMode(*resp->GetDataPointer<nn::apm::PerformanceMode *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::apm::IManager", req->cmd_id);
			}
		}
		uint32_t GetPerformanceMode(nn::apm::PerformanceMode& _0);
		uint32_t OpenSession(nn::apm::ISession*& _0);
	};
	class IManagerPrivileged : public IpcService {
	public:
		IManagerPrivileged() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::apm::ISession* temp1;
				ns_print("IPC message to nn::apm::IManagerPrivileged::OpenSession\n");
				resp->error_code = OpenSession(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::apm::IManagerPrivileged", req->cmd_id);
			}
		}
		uint32_t OpenSession(nn::apm::ISession*& _0);
	};
	class ISession : public IpcService {
	public:
		ISession() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::apm::ISession::SetPerformanceConfiguration: nn::apm::PerformanceMode = 0x%x, nn::apm::PerformanceConfiguration = 0x%x\n", req->GetData<nn::apm::PerformanceMode>(8), req->GetData<nn::apm::PerformanceConfiguration>(0xc));
				resp->error_code = SetPerformanceConfiguration(req->GetData<nn::apm::PerformanceMode>(8), req->GetData<nn::apm::PerformanceConfiguration>(0xc));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::apm::ISession::GetPerformanceConfiguration: nn::apm::PerformanceMode = 0x%x\n", req->GetData<nn::apm::PerformanceMode>(8));
				resp->error_code = GetPerformanceConfiguration(req->GetData<nn::apm::PerformanceMode>(8), *resp->GetDataPointer<nn::apm::PerformanceConfiguration *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::apm::ISession", req->cmd_id);
			}
		}
		uint32_t GetPerformanceConfiguration(nn::apm::PerformanceMode _0, nn::apm::PerformanceConfiguration& _1);
		uint32_t SetPerformanceConfiguration(nn::apm::PerformanceMode _0, nn::apm::PerformanceConfiguration _1);
	};
	class ISystemManager : public IpcService {
	public:
		ISystemManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::apm::ISystemManager::RequestPerformanceMode: nn::apm::PerformanceMode = 0x%x\n", req->GetData<nn::apm::PerformanceMode>(8));
				resp->error_code = RequestPerformanceMode(req->GetData<nn::apm::PerformanceMode>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::apm::ISystemManager::GetPerformanceEvent: nn::apm::EventTarget = 0x%x\n", req->GetData<nn::apm::EventTarget>(8));
				resp->error_code = GetPerformanceEvent(req->GetData<nn::apm::EventTarget>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 40);
				auto temp1 = resp->GetDataPointer<nn::apm::ThrottlingState>(8);
				ns_print("IPC message to nn::apm::ISystemManager::GetThrottlingState\n");
				resp->error_code = GetThrottlingState(temp1);
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 40);
				auto temp1 = resp->GetDataPointer<nn::apm::ThrottlingState>(8);
				ns_print("IPC message to nn::apm::ISystemManager::GetLastThrottlingState\n");
				resp->error_code = GetLastThrottlingState(temp1);
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::apm::ISystemManager::ClearLastThrottlingState\n");
				resp->error_code = ClearLastThrottlingState();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::apm::ISystemManager", req->cmd_id);
			}
		}
		uint32_t ClearLastThrottlingState();
		uint32_t GetLastThrottlingState(nn::apm::ThrottlingState& _0);
		uint32_t GetPerformanceEvent(nn::apm::EventTarget _0, IpcService*& _1);
		uint32_t GetThrottlingState(nn::apm::ThrottlingState& _0);
		uint32_t RequestPerformanceMode(nn::apm::PerformanceMode _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::apm::IManager::GetPerformanceMode(nn::apm::PerformanceMode& _0) {
	ns_print("Stub implementation for nn::apm::IManager::GetPerformanceMode\n");
	return 0;
}
uint32_t nn::apm::IManager::OpenSession(nn::apm::ISession*& _0) {
	ns_print("Stub implementation for nn::apm::IManager::OpenSession\n");
	return 0;
}
uint32_t nn::apm::IManagerPrivileged::OpenSession(nn::apm::ISession*& _0) {
	ns_print("Stub implementation for nn::apm::IManagerPrivileged::OpenSession\n");
	return 0;
}
uint32_t nn::apm::ISession::GetPerformanceConfiguration(nn::apm::PerformanceMode _0, nn::apm::PerformanceConfiguration& _1) {
	ns_print("Stub implementation for nn::apm::ISession::GetPerformanceConfiguration\n");
	return 0;
}
uint32_t nn::apm::ISession::SetPerformanceConfiguration(nn::apm::PerformanceMode _0, nn::apm::PerformanceConfiguration _1) {
	ns_print("Stub implementation for nn::apm::ISession::SetPerformanceConfiguration\n");
	return 0;
}
uint32_t nn::apm::ISystemManager::ClearLastThrottlingState() {
	ns_print("Stub implementation for nn::apm::ISystemManager::ClearLastThrottlingState\n");
	return 0;
}
uint32_t nn::apm::ISystemManager::GetLastThrottlingState(nn::apm::ThrottlingState& _0) {
	ns_print("Stub implementation for nn::apm::ISystemManager::GetLastThrottlingState\n");
	return 0;
}
uint32_t nn::apm::ISystemManager::GetPerformanceEvent(nn::apm::EventTarget _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::apm::ISystemManager::GetPerformanceEvent\n");
	return 0;
}
uint32_t nn::apm::ISystemManager::GetThrottlingState(nn::apm::ThrottlingState& _0) {
	ns_print("Stub implementation for nn::apm::ISystemManager::GetThrottlingState\n");
	return 0;
}
uint32_t nn::apm::ISystemManager::RequestPerformanceMode(nn::apm::PerformanceMode _0) {
	ns_print("Stub implementation for nn::apm::ISystemManager::RequestPerformanceMode\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::arp::detail {
	class IReader : public IpcService {
	public:
		IReader() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::arp::detail::IReader::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::arp::detail::IReader::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::arp::detail::IReader::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::arp::detail::IReader::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::arp::detail::IReader", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3();
	};
	class IRegistrar : public IpcService {
	public:
		IRegistrar() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::arp::detail::IRegistrar::Unknown0: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown0(req->GetData<uint64_t>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::arp::detail::IRegistrar::Unknown1: uint128_t = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = Unknown1(req->GetData<uint128_t>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::arp::detail::IRegistrar::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::arp::detail::IRegistrar", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0);
		uint32_t Unknown1(uint128_t _0);
		uint32_t Unknown2();
	};
	class IWriter : public IpcService {
	public:
		IWriter() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::arp::detail::IWriter::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::arp::detail::IWriter::Unknown1: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown1(req->GetData<uint64_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::arp::detail::IWriter", req->cmd_id);
			}
		}
		uint32_t Unknown0(IUnknown*& _0);
		uint32_t Unknown1(uint64_t _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::arp::detail::IReader::Unknown0() {
	ns_print("Stub implementation for nn::arp::detail::IReader::Unknown0\n");
	return 0;
}
uint32_t nn::arp::detail::IReader::Unknown1() {
	ns_print("Stub implementation for nn::arp::detail::IReader::Unknown1\n");
	return 0;
}
uint32_t nn::arp::detail::IReader::Unknown2() {
	ns_print("Stub implementation for nn::arp::detail::IReader::Unknown2\n");
	return 0;
}
uint32_t nn::arp::detail::IReader::Unknown3() {
	ns_print("Stub implementation for nn::arp::detail::IReader::Unknown3\n");
	return 0;
}
uint32_t nn::arp::detail::IRegistrar::Unknown0(uint64_t _0) {
	ns_print("Stub implementation for nn::arp::detail::IRegistrar::Unknown0\n");
	return 0;
}
uint32_t nn::arp::detail::IRegistrar::Unknown1(uint128_t _0) {
	ns_print("Stub implementation for nn::arp::detail::IRegistrar::Unknown1\n");
	return 0;
}
uint32_t nn::arp::detail::IRegistrar::Unknown2() {
	ns_print("Stub implementation for nn::arp::detail::IRegistrar::Unknown2\n");
	return 0;
}
uint32_t nn::arp::detail::IWriter::Unknown0(IUnknown*& _0) {
	ns_print("Stub implementation for nn::arp::detail::IWriter::Unknown0\n");
	return 0;
}
uint32_t nn::arp::detail::IWriter::Unknown1(uint64_t _0) {
	ns_print("Stub implementation for nn::arp::detail::IWriter::Unknown1\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::audio::detail {
	class IAudioDebugManager : public IpcService {
	public:
		IAudioDebugManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioDebugManager::Unknown0: uint32_t = 0x%x, uint64_t = 0x%%lx, KObject = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10), req->GetCopied(0));
				resp->error_code = Unknown0(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10), IPC::GetHandle<IpcService*>(req->GetCopied(0)));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioDebugManager::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioDebugManager::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioDebugManager::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::audio::detail::IAudioDebugManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t _0, uint64_t _1, IpcService* _2);
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3();
	};
	class IAudioDevice : public IpcService {
	public:
		IAudioDevice() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::audio::detail::IAudioDevice::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::audio::detail::IAudioDevice::Unknown1: uint32_t = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), temp2);
				resp->error_code = Unknown1(req->GetData<uint32_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::audio::detail::IAudioDevice::Unknown2: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown2(temp3, temp2, *resp->GetDataPointer<uint32_t *>(8));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::audio::detail::IAudioDevice::Unknown3\n");
				resp->error_code = Unknown3(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::audio::detail::IAudioDevice::Unknown4\n");
				resp->error_code = Unknown4(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::audio::detail::IAudioDevice::Unknown5\n");
				resp->error_code = Unknown5(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::audio::detail::IAudioDevice::Unknown6\n");
				resp->error_code = Unknown6(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::audio::detail::IAudioDevice::Unknown7: uint32_t = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), temp2);
				resp->error_code = Unknown7(req->GetData<uint32_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::audio::detail::IAudioDevice::Unknown8: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown8(temp3, temp2, *resp->GetDataPointer<uint32_t *>(8));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::audio::detail::IAudioDevice::Unknown10\n");
				resp->error_code = Unknown10(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::audio::detail::IAudioDevice::Unknown11\n");
				resp->error_code = Unknown11(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::audio::detail::IAudioDevice::Unknown12\n");
				resp->error_code = Unknown12(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::audio::detail::IAudioDevice", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown1(uint32_t _0, uint8_t * _1, unsigned int _1_size);
		uint32_t Unknown10(uint8_t *& _0, unsigned int _0_size);
		uint32_t Unknown11(IpcService*& _0);
		uint32_t Unknown12(IpcService*& _0);
		uint32_t Unknown2(uint8_t * _0, unsigned int _0_size, uint32_t& _1);
		uint32_t Unknown3(uint8_t *& _0, unsigned int _0_size);
		uint32_t Unknown4(IpcService*& _0);
		uint32_t Unknown5(uint32_t& _0);
		uint32_t Unknown6(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown7(uint32_t _0, uint8_t * _1, unsigned int _1_size);
		uint32_t Unknown8(uint8_t * _0, unsigned int _0_size, uint32_t& _1);
	};
	class IAudioIn : public IpcService {
	public:
		IAudioIn() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::audio::detail::IAudioIn::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioIn::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioIn::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::audio::detail::IAudioIn::Unknown3: uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), temp2);
				resp->error_code = Unknown3(req->GetData<uint64_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::audio::detail::IAudioIn::Unknown4\n");
				resp->error_code = Unknown4(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::audio::detail::IAudioIn::Unknown5\n");
				resp->error_code = Unknown5(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::audio::detail::IAudioIn::Unknown6: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown6(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::audio::detail::IAudioIn::Unknown7: uint64_t = 0x%%lx, KObject = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetCopied(0), temp2);
				resp->error_code = Unknown7(req->GetData<uint64_t>(8), IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::audio::detail::IAudioIn::Unknown8: uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), temp2);
				resp->error_code = Unknown8(req->GetData<uint64_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::audio::detail::IAudioIn::Unknown9\n");
				resp->error_code = Unknown9(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::audio::detail::IAudioIn::Unknown10: uint64_t = 0x%%lx, KObject = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetCopied(0), temp2);
				resp->error_code = Unknown10(req->GetData<uint64_t>(8), IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::audio::detail::IAudioIn", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t& _0);
		uint32_t Unknown1();
		uint32_t Unknown10(uint64_t _0, IpcService* _1, uint8_t * _2, unsigned int _2_size);
		uint32_t Unknown2();
		uint32_t Unknown3(uint64_t _0, uint8_t * _1, unsigned int _1_size);
		uint32_t Unknown4(IpcService*& _0);
		uint32_t Unknown5(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown6(uint64_t _0, uint8_t& _1);
		uint32_t Unknown7(uint64_t _0, IpcService* _1, uint8_t * _2, unsigned int _2_size);
		uint32_t Unknown8(uint64_t _0, uint8_t * _1, unsigned int _1_size);
		uint32_t Unknown9(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
	};
	class IAudioInManager : public IpcService {
	public:
		IAudioInManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::audio::detail::IAudioInManager::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(1, 0, 16);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				IUnknown* temp4;
				unsigned int temp6;
				auto temp5 = req->GetBuffer(6, 0, temp6);
				uint8_t* temp7 = (uint8_t *) new uint8_t[temp6];
				ns_print("IPC message to nn::audio::detail::IAudioInManager::Unknown1: uint64_t = 0x%%lx, uint64_t = 0x%%lx, KObject = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->GetCopied(0), temp2);
				resp->error_code = Unknown1(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->pid, IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp3, temp2, *resp->GetDataPointer<uint128_t *>(8), temp4, temp7, temp6);
				delete[] (uint8_t *) temp3;
				if(temp4 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp4));
				ARMv8::WriteBytes(temp5, (uint8_t *) temp7, temp6);
				delete[] (uint8_t *)temp7;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::audio::detail::IAudioInManager::Unknown2\n");
				resp->error_code = Unknown2(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(1, 0, 16);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				IUnknown* temp4;
				unsigned int temp6;
				auto temp5 = req->GetBuffer(0x22, 0, temp6);
				uint8_t* temp7 = (uint8_t *) new uint8_t[temp6];
				ns_print("IPC message to nn::audio::detail::IAudioInManager::Unknown3: uint64_t = 0x%%lx, uint64_t = 0x%%lx, KObject = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->GetCopied(0), temp2);
				resp->error_code = Unknown3(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->pid, IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp3, temp2, *resp->GetDataPointer<uint128_t *>(8), temp4, temp7, temp6);
				delete[] (uint8_t *) temp3;
				if(temp4 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp4));
				ARMv8::WriteBytes(temp5, (uint8_t *) temp7, temp6);
				delete[] (uint8_t *)temp7;
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::audio::detail::IAudioInManager::Unknown4\n");
				resp->error_code = Unknown4(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::audio::detail::IAudioInManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown1(uint64_t _0, uint64_t _1, uint64_t _2, IpcService* _3, uint8_t * _4, unsigned int _4_size, uint128_t& _5, IUnknown*& _6, uint8_t *& _7, unsigned int _7_size);
		uint32_t Unknown2(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown3(uint64_t _0, uint64_t _1, uint64_t _2, IpcService* _3, uint8_t * _4, unsigned int _4_size, uint128_t& _5, IUnknown*& _6, uint8_t *& _7, unsigned int _7_size);
		uint32_t Unknown4(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
	};
	class IAudioInManagerForApplet : public IpcService {
	public:
		IAudioInManagerForApplet() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::audio::detail::IAudioInManagerForApplet::Unknown0: uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Unknown0(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::audio::detail::IAudioInManagerForApplet::Unknown1: uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Unknown1(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::audio::detail::IAudioInManagerForApplet::Unknown2: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown2(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioInManagerForApplet::Unknown3: uint32_t = 0x%x, uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint64_t>(0x18));
				resp->error_code = Unknown3(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint64_t>(0x18));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::audio::detail::IAudioInManagerForApplet", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0, uint64_t _1, IpcService*& _2);
		uint32_t Unknown1(uint64_t _0, uint64_t _1, IpcService*& _2);
		uint32_t Unknown2(uint64_t _0, uint32_t& _1);
		uint32_t Unknown3(uint32_t _0, uint64_t _1, uint64_t _2);
	};
	class IAudioInManagerForDebugger : public IpcService {
	public:
		IAudioInManagerForDebugger() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioInManagerForDebugger::Unknown0: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown0(req->GetData<uint64_t>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioInManagerForDebugger::Unknown1: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown1(req->GetData<uint64_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::audio::detail::IAudioInManagerForDebugger", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0);
		uint32_t Unknown1(uint64_t _0);
	};
	class IAudioOut : public IpcService {
	public:
		IAudioOut() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::audio::detail::IAudioOut::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioOut::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioOut::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::audio::detail::IAudioOut::Unknown3: uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), temp2);
				resp->error_code = Unknown3(req->GetData<uint64_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::audio::detail::IAudioOut::Unknown4\n");
				resp->error_code = Unknown4(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::audio::detail::IAudioOut::Unknown5\n");
				resp->error_code = Unknown5(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::audio::detail::IAudioOut::Unknown6: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown6(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::audio::detail::IAudioOut::Unknown7: uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), temp2);
				resp->error_code = Unknown7(req->GetData<uint64_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::audio::detail::IAudioOut::Unknown8\n");
				resp->error_code = Unknown8(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::audio::detail::IAudioOut", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t& _0);
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3(uint64_t _0, uint8_t * _1, unsigned int _1_size);
		uint32_t Unknown4(IpcService*& _0);
		uint32_t Unknown5(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown6(uint64_t _0, uint8_t& _1);
		uint32_t Unknown7(uint64_t _0, uint8_t * _1, unsigned int _1_size);
		uint32_t Unknown8(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
	};
	class IAudioOutManager : public IpcService {
	public:
		IAudioOutManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::audio::detail::IAudioOutManager::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(1, 0, 16);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				IUnknown* temp4;
				unsigned int temp6;
				auto temp5 = req->GetBuffer(6, 0, temp6);
				uint8_t* temp7 = (uint8_t *) new uint8_t[temp6];
				ns_print("IPC message to nn::audio::detail::IAudioOutManager::Unknown1: uint64_t = 0x%%lx, uint64_t = 0x%%lx, KObject = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->GetCopied(0), temp2);
				resp->error_code = Unknown1(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->pid, IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp3, temp2, *resp->GetDataPointer<uint128_t *>(8), temp4, temp7, temp6);
				delete[] (uint8_t *) temp3;
				if(temp4 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp4));
				ARMv8::WriteBytes(temp5, (uint8_t *) temp7, temp6);
				delete[] (uint8_t *)temp7;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::audio::detail::IAudioOutManager::Unknown2\n");
				resp->error_code = Unknown2(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(1, 0, 16);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				IUnknown* temp4;
				unsigned int temp6;
				auto temp5 = req->GetBuffer(0x22, 0, temp6);
				uint8_t* temp7 = (uint8_t *) new uint8_t[temp6];
				ns_print("IPC message to nn::audio::detail::IAudioOutManager::Unknown3: uint64_t = 0x%%lx, uint64_t = 0x%%lx, KObject = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->GetCopied(0), temp2);
				resp->error_code = Unknown3(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->pid, IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp3, temp2, *resp->GetDataPointer<uint128_t *>(8), temp4, temp7, temp6);
				delete[] (uint8_t *) temp3;
				if(temp4 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp4));
				ARMv8::WriteBytes(temp5, (uint8_t *) temp7, temp6);
				delete[] (uint8_t *)temp7;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::audio::detail::IAudioOutManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown1(uint64_t _0, uint64_t _1, uint64_t _2, IpcService* _3, uint8_t * _4, unsigned int _4_size, uint128_t& _5, IUnknown*& _6, uint8_t *& _7, unsigned int _7_size);
		uint32_t Unknown2(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown3(uint64_t _0, uint64_t _1, uint64_t _2, IpcService* _3, uint8_t * _4, unsigned int _4_size, uint128_t& _5, IUnknown*& _6, uint8_t *& _7, unsigned int _7_size);
	};
	class IAudioOutManagerForApplet : public IpcService {
	public:
		IAudioOutManagerForApplet() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::audio::detail::IAudioOutManagerForApplet::Unknown0: uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Unknown0(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::audio::detail::IAudioOutManagerForApplet::Unknown1: uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Unknown1(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::audio::detail::IAudioOutManagerForApplet::Unknown2: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown2(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioOutManagerForApplet::Unknown3: uint32_t = 0x%x, uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint64_t>(0x18));
				resp->error_code = Unknown3(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint64_t>(0x18));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::audio::detail::IAudioOutManagerForApplet", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0, uint64_t _1, IpcService*& _2);
		uint32_t Unknown1(uint64_t _0, uint64_t _1, IpcService*& _2);
		uint32_t Unknown2(uint64_t _0, uint32_t& _1);
		uint32_t Unknown3(uint32_t _0, uint64_t _1, uint64_t _2);
	};
	class IAudioOutManagerForDebugger : public IpcService {
	public:
		IAudioOutManagerForDebugger() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioOutManagerForDebugger::Unknown0: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown0(req->GetData<uint64_t>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioOutManagerForDebugger::Unknown1: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown1(req->GetData<uint64_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::audio::detail::IAudioOutManagerForDebugger", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0);
		uint32_t Unknown1(uint64_t _0);
	};
	class IAudioRenderer : public IpcService {
	public:
		IAudioRenderer() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::audio::detail::IAudioRenderer::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::audio::detail::IAudioRenderer::Unknown1\n");
				resp->error_code = Unknown1(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::audio::detail::IAudioRenderer::Unknown2\n");
				resp->error_code = Unknown2(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::audio::detail::IAudioRenderer::Unknown3\n");
				resp->error_code = Unknown3(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				unsigned int temp8;
				auto temp7 = req->GetBuffer(6, 1, temp8);
				uint8_t* temp9 = (uint8_t *) new uint8_t[temp8];
				ns_print("IPC message to nn::audio::detail::IAudioRenderer::Unknown4: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown4(temp3, temp2, temp6, temp5, temp9, temp8);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				ARMv8::WriteBytes(temp7, (uint8_t *) temp9, temp8);
				delete[] (uint8_t *)temp9;
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioRenderer::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioRenderer::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::audio::detail::IAudioRenderer::Unknown7\n");
				resp->error_code = Unknown7(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioRenderer::Unknown8: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown8(req->GetData<uint32_t>(8));
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::audio::detail::IAudioRenderer::Unknown9\n");
				resp->error_code = Unknown9(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x22, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				unsigned int temp8;
				auto temp7 = req->GetBuffer(0x22, 1, temp8);
				uint8_t* temp9 = (uint8_t *) new uint8_t[temp8];
				ns_print("IPC message to nn::audio::detail::IAudioRenderer::Unknown10: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown10(temp3, temp2, temp6, temp5, temp9, temp8);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				ARMv8::WriteBytes(temp7, (uint8_t *) temp9, temp8);
				delete[] (uint8_t *)temp9;
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioRenderer::Unknown11\n");
				resp->error_code = Unknown11();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::audio::detail::IAudioRenderer", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t& _0);
		uint32_t Unknown1(uint32_t& _0);
		uint32_t Unknown10(uint8_t * _0, unsigned int _0_size, uint8_t *& _1, unsigned int _1_size, uint8_t *& _2, unsigned int _2_size);
		uint32_t Unknown11();
		uint32_t Unknown2(uint32_t& _0);
		uint32_t Unknown3(uint32_t& _0);
		uint32_t Unknown4(uint8_t * _0, unsigned int _0_size, uint8_t *& _1, unsigned int _1_size, uint8_t *& _2, unsigned int _2_size);
		uint32_t Unknown5();
		uint32_t Unknown6();
		uint32_t Unknown7(IpcService*& _0);
		uint32_t Unknown8(uint32_t _0);
		uint32_t Unknown9(uint32_t& _0);
	};
	class IAudioRendererManager : public IpcService {
	public:
		IAudioRendererManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::audio::detail::IAudioRendererManager::Unknown0: uint8_t[0x34] = %s, uint64_t = 0x%%lx, uint64_t = 0x%%lx, KObject = 0x%x, KObject = 0x%x\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x34).c_str(), req->GetData<uint64_t>(0x40), req->GetData<uint64_t>(0x48), req->GetCopied(0), req->GetCopied(1));
				resp->error_code = Unknown0(req->GetDataPointer<uint8_t *>(8), req->GetData<uint64_t>(0x40), req->GetData<uint64_t>(0x48), req->pid, IPC::GetHandle<IpcService*>(req->GetCopied(0)), IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::audio::detail::IAudioRendererManager::Unknown1: uint8_t[0x34] = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x34).c_str());
				resp->error_code = Unknown1(req->GetDataPointer<uint8_t *>(8), *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::audio::detail::IAudioRendererManager::Unknown2: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown2(req->GetData<uint64_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::audio::detail::IAudioRendererManager::Unknown3: uint8_t[0x34] = %s, uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint64_t = 0x%%lx, KObject = 0x%x\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x34).c_str(), req->GetData<uint64_t>(0x40), req->GetData<uint64_t>(0x48), req->GetData<uint64_t>(0x50), req->GetCopied(0));
				resp->error_code = Unknown3(req->GetDataPointer<uint8_t *>(8), req->GetData<uint64_t>(0x40), req->GetData<uint64_t>(0x48), req->GetData<uint64_t>(0x50), req->pid, IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::audio::detail::IAudioRendererManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint8_t * _0, uint64_t _1, uint64_t _2, uint64_t _3, IpcService* _4, IpcService* _5, IUnknown*& _6);
		uint32_t Unknown1(uint8_t * _0, uint64_t& _1);
		uint32_t Unknown2(uint64_t _0, IUnknown*& _1);
		uint32_t Unknown3(uint8_t * _0, uint64_t _1, uint64_t _2, uint64_t _3, uint64_t _4, IpcService* _5, IUnknown*& _6);
	};
	class IAudioRendererManagerForApplet : public IpcService {
	public:
		IAudioRendererManagerForApplet() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::audio::detail::IAudioRendererManagerForApplet::Unknown0: uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Unknown0(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::audio::detail::IAudioRendererManagerForApplet::Unknown1: uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Unknown1(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::audio::detail::IAudioRendererManagerForApplet::Unknown2: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown2(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioRendererManagerForApplet::Unknown3: uint32_t = 0x%x, uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint64_t>(0x18));
				resp->error_code = Unknown3(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint64_t>(0x18));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioRendererManagerForApplet::Unknown4: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown4(req->GetData<uint64_t>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioRendererManagerForApplet::Unknown5: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown5(req->GetData<uint64_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::audio::detail::IAudioRendererManagerForApplet", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0, uint64_t _1, IpcService*& _2);
		uint32_t Unknown1(uint64_t _0, uint64_t _1, IpcService*& _2);
		uint32_t Unknown2(uint64_t _0, uint32_t& _1);
		uint32_t Unknown3(uint32_t _0, uint64_t _1, uint64_t _2);
		uint32_t Unknown4(uint64_t _0);
		uint32_t Unknown5(uint64_t _0);
	};
	class IAudioRendererManagerForDebugger : public IpcService {
	public:
		IAudioRendererManagerForDebugger() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioRendererManagerForDebugger::Unknown0: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown0(req->GetData<uint64_t>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IAudioRendererManagerForDebugger::Unknown1: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown1(req->GetData<uint64_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::audio::detail::IAudioRendererManagerForDebugger", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0);
		uint32_t Unknown1(uint64_t _0);
	};
	class IFinalOutputRecorder : public IpcService {
	public:
		IFinalOutputRecorder() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::audio::detail::IFinalOutputRecorder::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IFinalOutputRecorder::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IFinalOutputRecorder::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::audio::detail::IFinalOutputRecorder::Unknown3: uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), temp2);
				resp->error_code = Unknown3(req->GetData<uint64_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::audio::detail::IFinalOutputRecorder::Unknown4\n");
				resp->error_code = Unknown4(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 16);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::audio::detail::IFinalOutputRecorder::Unknown5\n");
				resp->error_code = Unknown5(*resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint64_t *>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::audio::detail::IFinalOutputRecorder::Unknown6: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown6(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::audio::detail::IFinalOutputRecorder::Unknown7: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown7(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::audio::detail::IFinalOutputRecorder::Unknown8: uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), temp2);
				resp->error_code = Unknown8(req->GetData<uint64_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 16);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::audio::detail::IFinalOutputRecorder::Unknown9\n");
				resp->error_code = Unknown9(*resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint64_t *>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::audio::detail::IFinalOutputRecorder", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t& _0);
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3(uint64_t _0, uint8_t * _1, unsigned int _1_size);
		uint32_t Unknown4(IpcService*& _0);
		uint32_t Unknown5(uint32_t& _0, uint64_t& _1, uint8_t *& _2, unsigned int _2_size);
		uint32_t Unknown6(uint64_t _0, uint8_t& _1);
		uint32_t Unknown7(uint64_t _0, uint64_t& _1);
		uint32_t Unknown8(uint64_t _0, uint8_t * _1, unsigned int _1_size);
		uint32_t Unknown9(uint32_t& _0, uint64_t& _1, uint8_t *& _2, unsigned int _2_size);
	};
	class IFinalOutputRecorderManager : public IpcService {
	public:
		IFinalOutputRecorderManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 16);
				IUnknown* temp1;
				ns_print("IPC message to nn::audio::detail::IFinalOutputRecorderManager::Unknown0: uint64_t = 0x%%lx, uint64_t = 0x%%lx, KObject = 0x%x\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->GetCopied(0));
				resp->error_code = Unknown0(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), IPC::GetHandle<IpcService*>(req->GetCopied(0)), *resp->GetDataPointer<uint128_t *>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::audio::detail::IFinalOutputRecorderManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0, uint64_t _1, IpcService* _2, uint128_t& _3, IUnknown*& _4);
	};
	class IFinalOutputRecorderManagerForApplet : public IpcService {
	public:
		IFinalOutputRecorderManagerForApplet() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::audio::detail::IFinalOutputRecorderManagerForApplet::Unknown0: uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Unknown0(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::audio::detail::IFinalOutputRecorderManagerForApplet::Unknown1: uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Unknown1(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::audio::detail::IFinalOutputRecorderManagerForApplet", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0, uint64_t _1, IpcService*& _2);
		uint32_t Unknown1(uint64_t _0, uint64_t _1, IpcService*& _2);
	};
	class IFinalOutputRecorderManagerForDebugger : public IpcService {
	public:
		IFinalOutputRecorderManagerForDebugger() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IFinalOutputRecorderManagerForDebugger::Unknown0: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown0(req->GetData<uint64_t>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audio::detail::IFinalOutputRecorderManagerForDebugger::Unknown1: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown1(req->GetData<uint64_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::audio::detail::IFinalOutputRecorderManagerForDebugger", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0);
		uint32_t Unknown1(uint64_t _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::audio::detail::IAudioDebugManager::Unknown0(uint32_t _0, uint64_t _1, IpcService* _2) {
	ns_print("Stub implementation for nn::audio::detail::IAudioDebugManager::Unknown0\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioDebugManager::Unknown1() {
	ns_print("Stub implementation for nn::audio::detail::IAudioDebugManager::Unknown1\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioDebugManager::Unknown2() {
	ns_print("Stub implementation for nn::audio::detail::IAudioDebugManager::Unknown2\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioDebugManager::Unknown3() {
	ns_print("Stub implementation for nn::audio::detail::IAudioDebugManager::Unknown3\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioDevice::Unknown0(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioDevice::Unknown0\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioDevice::Unknown1(uint32_t _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioDevice::Unknown1\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioDevice::Unknown10(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioDevice::Unknown10\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioDevice::Unknown11(IpcService*& _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioDevice::Unknown11\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioDevice::Unknown12(IpcService*& _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioDevice::Unknown12\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioDevice::Unknown2(uint8_t * _0, unsigned int _0_size, uint32_t& _1) {
	ns_print("Stub implementation for nn::audio::detail::IAudioDevice::Unknown2\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioDevice::Unknown3(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioDevice::Unknown3\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioDevice::Unknown4(IpcService*& _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioDevice::Unknown4\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioDevice::Unknown5(uint32_t& _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioDevice::Unknown5\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioDevice::Unknown6(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioDevice::Unknown6\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioDevice::Unknown7(uint32_t _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioDevice::Unknown7\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioDevice::Unknown8(uint8_t * _0, unsigned int _0_size, uint32_t& _1) {
	ns_print("Stub implementation for nn::audio::detail::IAudioDevice::Unknown8\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioIn::Unknown0(uint32_t& _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioIn::Unknown0\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioIn::Unknown1() {
	ns_print("Stub implementation for nn::audio::detail::IAudioIn::Unknown1\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioIn::Unknown10(uint64_t _0, IpcService* _1, uint8_t * _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioIn::Unknown10\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioIn::Unknown2() {
	ns_print("Stub implementation for nn::audio::detail::IAudioIn::Unknown2\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioIn::Unknown3(uint64_t _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioIn::Unknown3\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioIn::Unknown4(IpcService*& _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioIn::Unknown4\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioIn::Unknown5(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioIn::Unknown5\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioIn::Unknown6(uint64_t _0, uint8_t& _1) {
	ns_print("Stub implementation for nn::audio::detail::IAudioIn::Unknown6\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioIn::Unknown7(uint64_t _0, IpcService* _1, uint8_t * _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioIn::Unknown7\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioIn::Unknown8(uint64_t _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioIn::Unknown8\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioIn::Unknown9(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioIn::Unknown9\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioInManager::Unknown0(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioInManager::Unknown0\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioInManager::Unknown1(uint64_t _0, uint64_t _1, uint64_t _2, IpcService* _3, uint8_t * _4, unsigned int _4_size, uint128_t& _5, IUnknown*& _6, uint8_t *& _7, unsigned int _7_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioInManager::Unknown1\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioInManager::Unknown2(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioInManager::Unknown2\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioInManager::Unknown3(uint64_t _0, uint64_t _1, uint64_t _2, IpcService* _3, uint8_t * _4, unsigned int _4_size, uint128_t& _5, IUnknown*& _6, uint8_t *& _7, unsigned int _7_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioInManager::Unknown3\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioInManager::Unknown4(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioInManager::Unknown4\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioInManagerForApplet::Unknown0(uint64_t _0, uint64_t _1, IpcService*& _2) {
	ns_print("Stub implementation for nn::audio::detail::IAudioInManagerForApplet::Unknown0\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioInManagerForApplet::Unknown1(uint64_t _0, uint64_t _1, IpcService*& _2) {
	ns_print("Stub implementation for nn::audio::detail::IAudioInManagerForApplet::Unknown1\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioInManagerForApplet::Unknown2(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::audio::detail::IAudioInManagerForApplet::Unknown2\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioInManagerForApplet::Unknown3(uint32_t _0, uint64_t _1, uint64_t _2) {
	ns_print("Stub implementation for nn::audio::detail::IAudioInManagerForApplet::Unknown3\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioInManagerForDebugger::Unknown0(uint64_t _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioInManagerForDebugger::Unknown0\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioInManagerForDebugger::Unknown1(uint64_t _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioInManagerForDebugger::Unknown1\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioOut::Unknown0(uint32_t& _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioOut::Unknown0\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioOut::Unknown1() {
	ns_print("Stub implementation for nn::audio::detail::IAudioOut::Unknown1\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioOut::Unknown2() {
	ns_print("Stub implementation for nn::audio::detail::IAudioOut::Unknown2\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioOut::Unknown3(uint64_t _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioOut::Unknown3\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioOut::Unknown4(IpcService*& _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioOut::Unknown4\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioOut::Unknown5(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioOut::Unknown5\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioOut::Unknown6(uint64_t _0, uint8_t& _1) {
	ns_print("Stub implementation for nn::audio::detail::IAudioOut::Unknown6\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioOut::Unknown7(uint64_t _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioOut::Unknown7\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioOut::Unknown8(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioOut::Unknown8\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioOutManager::Unknown0(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioOutManager::Unknown0\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioOutManager::Unknown1(uint64_t _0, uint64_t _1, uint64_t _2, IpcService* _3, uint8_t * _4, unsigned int _4_size, uint128_t& _5, IUnknown*& _6, uint8_t *& _7, unsigned int _7_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioOutManager::Unknown1\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioOutManager::Unknown2(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioOutManager::Unknown2\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioOutManager::Unknown3(uint64_t _0, uint64_t _1, uint64_t _2, IpcService* _3, uint8_t * _4, unsigned int _4_size, uint128_t& _5, IUnknown*& _6, uint8_t *& _7, unsigned int _7_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioOutManager::Unknown3\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioOutManagerForApplet::Unknown0(uint64_t _0, uint64_t _1, IpcService*& _2) {
	ns_print("Stub implementation for nn::audio::detail::IAudioOutManagerForApplet::Unknown0\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioOutManagerForApplet::Unknown1(uint64_t _0, uint64_t _1, IpcService*& _2) {
	ns_print("Stub implementation for nn::audio::detail::IAudioOutManagerForApplet::Unknown1\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioOutManagerForApplet::Unknown2(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::audio::detail::IAudioOutManagerForApplet::Unknown2\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioOutManagerForApplet::Unknown3(uint32_t _0, uint64_t _1, uint64_t _2) {
	ns_print("Stub implementation for nn::audio::detail::IAudioOutManagerForApplet::Unknown3\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioOutManagerForDebugger::Unknown0(uint64_t _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioOutManagerForDebugger::Unknown0\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioOutManagerForDebugger::Unknown1(uint64_t _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioOutManagerForDebugger::Unknown1\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRenderer::Unknown0(uint32_t& _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioRenderer::Unknown0\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRenderer::Unknown1(uint32_t& _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioRenderer::Unknown1\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRenderer::Unknown10(uint8_t * _0, unsigned int _0_size, uint8_t *& _1, unsigned int _1_size, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioRenderer::Unknown10\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRenderer::Unknown11() {
	ns_print("Stub implementation for nn::audio::detail::IAudioRenderer::Unknown11\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRenderer::Unknown2(uint32_t& _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioRenderer::Unknown2\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRenderer::Unknown3(uint32_t& _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioRenderer::Unknown3\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRenderer::Unknown4(uint8_t * _0, unsigned int _0_size, uint8_t *& _1, unsigned int _1_size, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::audio::detail::IAudioRenderer::Unknown4\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRenderer::Unknown5() {
	ns_print("Stub implementation for nn::audio::detail::IAudioRenderer::Unknown5\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRenderer::Unknown6() {
	ns_print("Stub implementation for nn::audio::detail::IAudioRenderer::Unknown6\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRenderer::Unknown7(IpcService*& _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioRenderer::Unknown7\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRenderer::Unknown8(uint32_t _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioRenderer::Unknown8\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRenderer::Unknown9(uint32_t& _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioRenderer::Unknown9\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRendererManager::Unknown0(uint8_t * _0, uint64_t _1, uint64_t _2, uint64_t _3, IpcService* _4, IpcService* _5, IUnknown*& _6) {
	ns_print("Stub implementation for nn::audio::detail::IAudioRendererManager::Unknown0\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRendererManager::Unknown1(uint8_t * _0, uint64_t& _1) {
	ns_print("Stub implementation for nn::audio::detail::IAudioRendererManager::Unknown1\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRendererManager::Unknown2(uint64_t _0, IUnknown*& _1) {
	ns_print("Stub implementation for nn::audio::detail::IAudioRendererManager::Unknown2\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRendererManager::Unknown3(uint8_t * _0, uint64_t _1, uint64_t _2, uint64_t _3, uint64_t _4, IpcService* _5, IUnknown*& _6) {
	ns_print("Stub implementation for nn::audio::detail::IAudioRendererManager::Unknown3\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRendererManagerForApplet::Unknown0(uint64_t _0, uint64_t _1, IpcService*& _2) {
	ns_print("Stub implementation for nn::audio::detail::IAudioRendererManagerForApplet::Unknown0\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRendererManagerForApplet::Unknown1(uint64_t _0, uint64_t _1, IpcService*& _2) {
	ns_print("Stub implementation for nn::audio::detail::IAudioRendererManagerForApplet::Unknown1\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRendererManagerForApplet::Unknown2(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::audio::detail::IAudioRendererManagerForApplet::Unknown2\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRendererManagerForApplet::Unknown3(uint32_t _0, uint64_t _1, uint64_t _2) {
	ns_print("Stub implementation for nn::audio::detail::IAudioRendererManagerForApplet::Unknown3\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRendererManagerForApplet::Unknown4(uint64_t _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioRendererManagerForApplet::Unknown4\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRendererManagerForApplet::Unknown5(uint64_t _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioRendererManagerForApplet::Unknown5\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRendererManagerForDebugger::Unknown0(uint64_t _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioRendererManagerForDebugger::Unknown0\n");
	return 0;
}
uint32_t nn::audio::detail::IAudioRendererManagerForDebugger::Unknown1(uint64_t _0) {
	ns_print("Stub implementation for nn::audio::detail::IAudioRendererManagerForDebugger::Unknown1\n");
	return 0;
}
uint32_t nn::audio::detail::IFinalOutputRecorder::Unknown0(uint32_t& _0) {
	ns_print("Stub implementation for nn::audio::detail::IFinalOutputRecorder::Unknown0\n");
	return 0;
}
uint32_t nn::audio::detail::IFinalOutputRecorder::Unknown1() {
	ns_print("Stub implementation for nn::audio::detail::IFinalOutputRecorder::Unknown1\n");
	return 0;
}
uint32_t nn::audio::detail::IFinalOutputRecorder::Unknown2() {
	ns_print("Stub implementation for nn::audio::detail::IFinalOutputRecorder::Unknown2\n");
	return 0;
}
uint32_t nn::audio::detail::IFinalOutputRecorder::Unknown3(uint64_t _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::audio::detail::IFinalOutputRecorder::Unknown3\n");
	return 0;
}
uint32_t nn::audio::detail::IFinalOutputRecorder::Unknown4(IpcService*& _0) {
	ns_print("Stub implementation for nn::audio::detail::IFinalOutputRecorder::Unknown4\n");
	return 0;
}
uint32_t nn::audio::detail::IFinalOutputRecorder::Unknown5(uint32_t& _0, uint64_t& _1, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::audio::detail::IFinalOutputRecorder::Unknown5\n");
	return 0;
}
uint32_t nn::audio::detail::IFinalOutputRecorder::Unknown6(uint64_t _0, uint8_t& _1) {
	ns_print("Stub implementation for nn::audio::detail::IFinalOutputRecorder::Unknown6\n");
	return 0;
}
uint32_t nn::audio::detail::IFinalOutputRecorder::Unknown7(uint64_t _0, uint64_t& _1) {
	ns_print("Stub implementation for nn::audio::detail::IFinalOutputRecorder::Unknown7\n");
	return 0;
}
uint32_t nn::audio::detail::IFinalOutputRecorder::Unknown8(uint64_t _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::audio::detail::IFinalOutputRecorder::Unknown8\n");
	return 0;
}
uint32_t nn::audio::detail::IFinalOutputRecorder::Unknown9(uint32_t& _0, uint64_t& _1, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::audio::detail::IFinalOutputRecorder::Unknown9\n");
	return 0;
}
uint32_t nn::audio::detail::IFinalOutputRecorderManager::Unknown0(uint64_t _0, uint64_t _1, IpcService* _2, uint128_t& _3, IUnknown*& _4) {
	ns_print("Stub implementation for nn::audio::detail::IFinalOutputRecorderManager::Unknown0\n");
	return 0;
}
uint32_t nn::audio::detail::IFinalOutputRecorderManagerForApplet::Unknown0(uint64_t _0, uint64_t _1, IpcService*& _2) {
	ns_print("Stub implementation for nn::audio::detail::IFinalOutputRecorderManagerForApplet::Unknown0\n");
	return 0;
}
uint32_t nn::audio::detail::IFinalOutputRecorderManagerForApplet::Unknown1(uint64_t _0, uint64_t _1, IpcService*& _2) {
	ns_print("Stub implementation for nn::audio::detail::IFinalOutputRecorderManagerForApplet::Unknown1\n");
	return 0;
}
uint32_t nn::audio::detail::IFinalOutputRecorderManagerForDebugger::Unknown0(uint64_t _0) {
	ns_print("Stub implementation for nn::audio::detail::IFinalOutputRecorderManagerForDebugger::Unknown0\n");
	return 0;
}
uint32_t nn::audio::detail::IFinalOutputRecorderManagerForDebugger::Unknown1(uint64_t _0) {
	ns_print("Stub implementation for nn::audio::detail::IFinalOutputRecorderManagerForDebugger::Unknown1\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::audioctrl::detail {
	class IAudioController : public IpcService {
	public:
		IAudioController() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown0: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown0(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown1: uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Unknown1(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown2\n");
				resp->error_code = Unknown2(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown3\n");
				resp->error_code = Unknown3(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown5: uint8_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint8_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Unknown5(req->GetData<uint8_t>(8), req->GetData<uint32_t>(0xc));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown8\n");
				resp->error_code = Unknown8(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown9: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown9(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown10: uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Unknown10(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown11: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown11(req->GetData<uint32_t>(8));
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown12\n");
				resp->error_code = Unknown12(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown13: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown13(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown14: uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Unknown14(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown15: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown15(req->GetData<uint32_t>(8));
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown16: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown16(req->GetData<uint8_t>(8));
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown17: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown17(req->GetData<uint32_t>(8));
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown18\n");
				resp->error_code = Unknown18(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown19\n");
				resp->error_code = Unknown19(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown20\n");
				resp->error_code = Unknown20(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown21\n");
				resp->error_code = Unknown21(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::audioctrl::detail::IAudioController::Unknown22\n");
				resp->error_code = Unknown22();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::audioctrl::detail::IAudioController", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t _0, uint32_t& _1);
		uint32_t Unknown1(uint32_t _0, uint32_t _1);
		uint32_t Unknown10(uint32_t _0, uint32_t _1);
		uint32_t Unknown11(uint32_t _0);
		uint32_t Unknown12(uint32_t& _0);
		uint32_t Unknown13(uint32_t _0, uint32_t& _1);
		uint32_t Unknown14(uint32_t _0, uint32_t _1);
		uint32_t Unknown15(uint32_t _0);
		uint32_t Unknown16(uint8_t _0);
		uint32_t Unknown17(uint32_t _0);
		uint32_t Unknown18(uint32_t& _0);
		uint32_t Unknown19(IpcService*& _0);
		uint32_t Unknown2(uint32_t& _0);
		uint32_t Unknown20(IpcService*& _0);
		uint32_t Unknown21(uint32_t& _0);
		uint32_t Unknown22();
		uint32_t Unknown3(uint32_t& _0);
		uint32_t Unknown4();
		uint32_t Unknown5(uint8_t _0, uint32_t _1);
		uint32_t Unknown6();
		uint32_t Unknown7();
		uint32_t Unknown8(uint32_t& _0);
		uint32_t Unknown9(uint32_t _0, uint32_t& _1);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::audioctrl::detail::IAudioController::Unknown0(uint32_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown0\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown1(uint32_t _0, uint32_t _1) {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown1\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown10(uint32_t _0, uint32_t _1) {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown10\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown11(uint32_t _0) {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown11\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown12(uint32_t& _0) {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown12\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown13(uint32_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown13\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown14(uint32_t _0, uint32_t _1) {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown14\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown15(uint32_t _0) {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown15\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown16(uint8_t _0) {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown16\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown17(uint32_t _0) {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown17\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown18(uint32_t& _0) {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown18\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown19(IpcService*& _0) {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown19\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown2(uint32_t& _0) {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown2\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown20(IpcService*& _0) {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown20\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown21(uint32_t& _0) {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown21\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown22() {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown22\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown3(uint32_t& _0) {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown3\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown4() {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown4\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown5(uint8_t _0, uint32_t _1) {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown5\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown6() {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown6\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown7() {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown7\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown8(uint32_t& _0) {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown8\n");
	return 0;
}
uint32_t nn::audioctrl::detail::IAudioController::Unknown9(uint32_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::audioctrl::detail::IAudioController::Unknown9\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::bcat::detail::ipc {
	class IBcatService : public IpcService {
	public:
		IBcatService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 10100: {
				resp->GenBuf(1, 0, 0);
				nn::bcat::detail::ipc::IDeliveryCacheProgressService* temp1;
				ns_print("IPC message to nn::bcat::detail::ipc::IBcatService::RequestSyncDeliveryCache\n");
				resp->error_code = RequestSyncDeliveryCache(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 20100: {
				resp->GenBuf(1, 0, 0);
				nn::bcat::detail::ipc::IDeliveryCacheProgressService* temp1;
				ns_print("IPC message to nn::bcat::detail::ipc::IBcatService::RequestSyncDeliveryCacheWithApplicationId: uint32_t = 0x%x, nn::ApplicationId = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<nn::ApplicationId>(0x10));
				resp->error_code = RequestSyncDeliveryCacheWithApplicationId(req->GetData<uint32_t>(8), req->GetData<nn::ApplicationId>(0x10), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 30100: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::bcat::detail::ipc::IBcatService::SetPassphrase: nn::ApplicationId = 0x%%lx, int8_t *= buffer<0x%lx>\n", req->GetData<nn::ApplicationId>(8), temp2);
				resp->error_code = SetPassphrase(req->GetData<nn::ApplicationId>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 30200: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bcat::detail::ipc::IBcatService::RegisterBackgroundDeliveryTask: uint32_t = 0x%x, nn::ApplicationId = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<nn::ApplicationId>(0x10));
				resp->error_code = RegisterBackgroundDeliveryTask(req->GetData<uint32_t>(8), req->GetData<nn::ApplicationId>(0x10));
				return 0;
			}
			case 30201: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bcat::detail::ipc::IBcatService::UnregisterBackgroundDeliveryTask: nn::ApplicationId = 0x%%lx\n", req->GetData<nn::ApplicationId>(8));
				resp->error_code = UnregisterBackgroundDeliveryTask(req->GetData<nn::ApplicationId>(8));
				return 0;
			}
			case 30202: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bcat::detail::ipc::IBcatService::BlockDeliveryTask: nn::ApplicationId = 0x%%lx\n", req->GetData<nn::ApplicationId>(8));
				resp->error_code = BlockDeliveryTask(req->GetData<nn::ApplicationId>(8));
				return 0;
			}
			case 30203: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bcat::detail::ipc::IBcatService::UnblockDeliveryTask: nn::ApplicationId = 0x%%lx\n", req->GetData<nn::ApplicationId>(8));
				resp->error_code = UnblockDeliveryTask(req->GetData<nn::ApplicationId>(8));
				return 0;
			}
			case 90100: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::bcat::TaskInfo* temp3 = (nn::bcat::TaskInfo *) new uint8_t[temp2];
				ns_print("IPC message to nn::bcat::detail::ipc::IBcatService::EnumerateBackgroundDeliveryTask\n");
				resp->error_code = EnumerateBackgroundDeliveryTask(*resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 90200: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::bcat::detail::ipc::IBcatService::GetDeliveryList: nn::ApplicationId = 0x%%lx\n", req->GetData<nn::ApplicationId>(8));
				resp->error_code = GetDeliveryList(req->GetData<nn::ApplicationId>(8), *resp->GetDataPointer<uint64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 90201: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bcat::detail::ipc::IBcatService::ClearDeliveryCacheStorage: nn::ApplicationId = 0x%%lx\n", req->GetData<nn::ApplicationId>(8));
				resp->error_code = ClearDeliveryCacheStorage(req->GetData<nn::ApplicationId>(8));
				return 0;
			}
			case 90300: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::bcat::PushNotificationLog* temp3 = (nn::bcat::PushNotificationLog *) new uint8_t[temp2];
				ns_print("IPC message to nn::bcat::detail::ipc::IBcatService::GetPushNotificationLog\n");
				resp->error_code = GetPushNotificationLog(*resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::bcat::detail::ipc::IBcatService", req->cmd_id);
			}
		}
		uint32_t BlockDeliveryTask(nn::ApplicationId _0);
		uint32_t ClearDeliveryCacheStorage(nn::ApplicationId _0);
		uint32_t EnumerateBackgroundDeliveryTask(int32_t& _0, nn::bcat::TaskInfo *& _1, unsigned int _1_size);
		uint32_t GetDeliveryList(nn::ApplicationId _0, uint64_t& _1, uint8_t *& _2, unsigned int _2_size);
		uint32_t GetPushNotificationLog(int32_t& _0, nn::bcat::PushNotificationLog *& _1, unsigned int _1_size);
		uint32_t RegisterBackgroundDeliveryTask(uint32_t _0, nn::ApplicationId _1);
		uint32_t RequestSyncDeliveryCache(nn::bcat::detail::ipc::IDeliveryCacheProgressService*& _0);
		uint32_t RequestSyncDeliveryCacheWithApplicationId(uint32_t _0, nn::ApplicationId _1, nn::bcat::detail::ipc::IDeliveryCacheProgressService*& _2);
		uint32_t SetPassphrase(nn::ApplicationId _0, int8_t * _1, unsigned int _1_size);
		uint32_t UnblockDeliveryTask(nn::ApplicationId _0);
		uint32_t UnregisterBackgroundDeliveryTask(nn::ApplicationId _0);
	};
	class IDeliveryCacheDirectoryService : public IpcService {
	public:
		IDeliveryCacheDirectoryService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bcat::detail::ipc::IDeliveryCacheDirectoryService::Open: nn::bcat::DirectoryName = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x20).c_str());
				resp->error_code = Open(req->GetDataPointer<nn::bcat::DirectoryName>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::bcat::DeliveryCacheDirectoryEntry* temp3 = (nn::bcat::DeliveryCacheDirectoryEntry *) new uint8_t[temp2];
				ns_print("IPC message to nn::bcat::detail::ipc::IDeliveryCacheDirectoryService::Read\n");
				resp->error_code = Read(*resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::bcat::detail::ipc::IDeliveryCacheDirectoryService::GetCount\n");
				resp->error_code = GetCount(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::bcat::detail::ipc::IDeliveryCacheDirectoryService", req->cmd_id);
			}
		}
		uint32_t GetCount(int32_t& _0);
		uint32_t Open(nn::bcat::DirectoryName _0);
		uint32_t Read(int32_t& _0, nn::bcat::DeliveryCacheDirectoryEntry *& _1, unsigned int _1_size);
	};
	class IDeliveryCacheFileService : public IpcService {
	public:
		IDeliveryCacheFileService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bcat::detail::ipc::IDeliveryCacheFileService::Open: nn::bcat::DirectoryName = %s, nn::bcat::FileName = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x20).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x28), 0x20).c_str());
				resp->error_code = Open(req->GetDataPointer<nn::bcat::DirectoryName>(8), req->GetDataPointer<nn::bcat::FileName>(0x28));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::bcat::detail::ipc::IDeliveryCacheFileService::Read: int64_t = 0x%%lx\n", req->GetData<int64_t>(8));
				resp->error_code = Read(req->GetData<int64_t>(8), *resp->GetDataPointer<uint64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::bcat::detail::ipc::IDeliveryCacheFileService::GetSize\n");
				resp->error_code = GetSize(*resp->GetDataPointer<int64_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::bcat::detail::ipc::IDeliveryCacheFileService::GetDigest\n");
				resp->error_code = GetDigest(*resp->GetDataPointer<nn::bcat::Digest *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::bcat::detail::ipc::IDeliveryCacheFileService", req->cmd_id);
			}
		}
		uint32_t GetDigest(nn::bcat::Digest& _0);
		uint32_t GetSize(int64_t& _0);
		uint32_t Open(nn::bcat::DirectoryName _0, nn::bcat::FileName _1);
		uint32_t Read(int64_t _0, uint64_t& _1, uint8_t *& _2, unsigned int _2_size);
	};
	class IDeliveryCacheProgressService : public IpcService {
	public:
		IDeliveryCacheProgressService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::bcat::detail::ipc::IDeliveryCacheProgressService::GetEvent\n");
				resp->error_code = GetEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::bcat::detail::DeliveryCacheProgressImpl* temp3 = (nn::bcat::detail::DeliveryCacheProgressImpl *) new uint8_t[temp2];
				ns_print("IPC message to nn::bcat::detail::ipc::IDeliveryCacheProgressService::GetImpl\n");
				resp->error_code = GetImpl(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::bcat::detail::ipc::IDeliveryCacheProgressService", req->cmd_id);
			}
		}
		uint32_t GetEvent(IpcService*& _0);
		uint32_t GetImpl(nn::bcat::detail::DeliveryCacheProgressImpl *& _0, unsigned int _0_size);
	};
	class IDeliveryCacheStorageService : public IpcService {
	public:
		IDeliveryCacheStorageService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::bcat::detail::ipc::IDeliveryCacheFileService* temp1;
				ns_print("IPC message to nn::bcat::detail::ipc::IDeliveryCacheStorageService::CreateFileService\n");
				resp->error_code = CreateFileService(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(1, 0, 0);
				nn::bcat::detail::ipc::IDeliveryCacheDirectoryService* temp1;
				ns_print("IPC message to nn::bcat::detail::ipc::IDeliveryCacheStorageService::CreateDirectoryService\n");
				resp->error_code = CreateDirectoryService(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::bcat::DirectoryName* temp3 = (nn::bcat::DirectoryName *) new uint8_t[temp2];
				ns_print("IPC message to nn::bcat::detail::ipc::IDeliveryCacheStorageService::EnumerateDeliveryCacheDirectory\n");
				resp->error_code = EnumerateDeliveryCacheDirectory(*resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::bcat::detail::ipc::IDeliveryCacheStorageService", req->cmd_id);
			}
		}
		uint32_t CreateDirectoryService(nn::bcat::detail::ipc::IDeliveryCacheDirectoryService*& _0);
		uint32_t CreateFileService(nn::bcat::detail::ipc::IDeliveryCacheFileService*& _0);
		uint32_t EnumerateDeliveryCacheDirectory(int32_t& _0, nn::bcat::DirectoryName *& _1, unsigned int _1_size);
	};
	class IServiceCreator : public IpcService {
	public:
		IServiceCreator() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::bcat::detail::ipc::IBcatService* temp1;
				ns_print("IPC message to nn::bcat::detail::ipc::IServiceCreator::CreateBcatService: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = CreateBcatService(req->GetData<uint64_t>(8), req->pid, temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(1, 0, 0);
				nn::bcat::detail::ipc::IDeliveryCacheStorageService* temp1;
				ns_print("IPC message to nn::bcat::detail::ipc::IServiceCreator::CreateDeliveryCacheStorageService: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = CreateDeliveryCacheStorageService(req->GetData<uint64_t>(8), req->pid, temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(1, 0, 0);
				nn::bcat::detail::ipc::IDeliveryCacheStorageService* temp1;
				ns_print("IPC message to nn::bcat::detail::ipc::IServiceCreator::CreateDeliveryCacheStorageServiceWithApplicationId: nn::ApplicationId = 0x%%lx\n", req->GetData<nn::ApplicationId>(8));
				resp->error_code = CreateDeliveryCacheStorageServiceWithApplicationId(req->GetData<nn::ApplicationId>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::bcat::detail::ipc::IServiceCreator", req->cmd_id);
			}
		}
		uint32_t CreateBcatService(uint64_t _0, uint64_t _1, nn::bcat::detail::ipc::IBcatService*& _2);
		uint32_t CreateDeliveryCacheStorageService(uint64_t _0, uint64_t _1, nn::bcat::detail::ipc::IDeliveryCacheStorageService*& _2);
		uint32_t CreateDeliveryCacheStorageServiceWithApplicationId(nn::ApplicationId _0, nn::bcat::detail::ipc::IDeliveryCacheStorageService*& _1);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::bcat::detail::ipc::IBcatService::BlockDeliveryTask(nn::ApplicationId _0) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IBcatService::BlockDeliveryTask\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IBcatService::ClearDeliveryCacheStorage(nn::ApplicationId _0) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IBcatService::ClearDeliveryCacheStorage\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IBcatService::EnumerateBackgroundDeliveryTask(int32_t& _0, nn::bcat::TaskInfo *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IBcatService::EnumerateBackgroundDeliveryTask\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IBcatService::GetDeliveryList(nn::ApplicationId _0, uint64_t& _1, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IBcatService::GetDeliveryList\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IBcatService::GetPushNotificationLog(int32_t& _0, nn::bcat::PushNotificationLog *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IBcatService::GetPushNotificationLog\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IBcatService::RegisterBackgroundDeliveryTask(uint32_t _0, nn::ApplicationId _1) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IBcatService::RegisterBackgroundDeliveryTask\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IBcatService::RequestSyncDeliveryCache(nn::bcat::detail::ipc::IDeliveryCacheProgressService*& _0) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IBcatService::RequestSyncDeliveryCache\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IBcatService::RequestSyncDeliveryCacheWithApplicationId(uint32_t _0, nn::ApplicationId _1, nn::bcat::detail::ipc::IDeliveryCacheProgressService*& _2) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IBcatService::RequestSyncDeliveryCacheWithApplicationId\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IBcatService::SetPassphrase(nn::ApplicationId _0, int8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IBcatService::SetPassphrase\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IBcatService::UnblockDeliveryTask(nn::ApplicationId _0) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IBcatService::UnblockDeliveryTask\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IBcatService::UnregisterBackgroundDeliveryTask(nn::ApplicationId _0) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IBcatService::UnregisterBackgroundDeliveryTask\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IDeliveryCacheDirectoryService::GetCount(int32_t& _0) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IDeliveryCacheDirectoryService::GetCount\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IDeliveryCacheDirectoryService::Open(nn::bcat::DirectoryName _0) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IDeliveryCacheDirectoryService::Open\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IDeliveryCacheDirectoryService::Read(int32_t& _0, nn::bcat::DeliveryCacheDirectoryEntry *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IDeliveryCacheDirectoryService::Read\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IDeliveryCacheFileService::GetDigest(nn::bcat::Digest& _0) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IDeliveryCacheFileService::GetDigest\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IDeliveryCacheFileService::GetSize(int64_t& _0) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IDeliveryCacheFileService::GetSize\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IDeliveryCacheFileService::Open(nn::bcat::DirectoryName _0, nn::bcat::FileName _1) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IDeliveryCacheFileService::Open\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IDeliveryCacheFileService::Read(int64_t _0, uint64_t& _1, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IDeliveryCacheFileService::Read\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IDeliveryCacheProgressService::GetEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IDeliveryCacheProgressService::GetEvent\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IDeliveryCacheProgressService::GetImpl(nn::bcat::detail::DeliveryCacheProgressImpl *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IDeliveryCacheProgressService::GetImpl\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IDeliveryCacheStorageService::CreateDirectoryService(nn::bcat::detail::ipc::IDeliveryCacheDirectoryService*& _0) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IDeliveryCacheStorageService::CreateDirectoryService\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IDeliveryCacheStorageService::CreateFileService(nn::bcat::detail::ipc::IDeliveryCacheFileService*& _0) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IDeliveryCacheStorageService::CreateFileService\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IDeliveryCacheStorageService::EnumerateDeliveryCacheDirectory(int32_t& _0, nn::bcat::DirectoryName *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IDeliveryCacheStorageService::EnumerateDeliveryCacheDirectory\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IServiceCreator::CreateBcatService(uint64_t _0, uint64_t _1, nn::bcat::detail::ipc::IBcatService*& _2) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IServiceCreator::CreateBcatService\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IServiceCreator::CreateDeliveryCacheStorageService(uint64_t _0, uint64_t _1, nn::bcat::detail::ipc::IDeliveryCacheStorageService*& _2) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IServiceCreator::CreateDeliveryCacheStorageService\n");
	return 0;
}
uint32_t nn::bcat::detail::ipc::IServiceCreator::CreateDeliveryCacheStorageServiceWithApplicationId(nn::ApplicationId _0, nn::bcat::detail::ipc::IDeliveryCacheStorageService*& _1) {
	ns_print("Stub implementation for nn::bcat::detail::ipc::IServiceCreator::CreateDeliveryCacheStorageServiceWithApplicationId\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::bgtc {
	class IStateControlService : public IpcService {
	public:
		IStateControlService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 1: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::bgtc::IStateControlService::Unknown1\n");
				resp->error_code = Unknown1(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::bgtc::IStateControlService::Unknown2\n");
				resp->error_code = Unknown2(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bgtc::IStateControlService::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bgtc::IStateControlService::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bgtc::IStateControlService::Unknown5: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown5(req->GetData<uint8_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::bgtc::IStateControlService", req->cmd_id);
			}
		}
		uint32_t Unknown1(uint32_t& _0);
		uint32_t Unknown2(IpcService*& _0);
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5(uint8_t _0);
	};
	class ITaskService : public IpcService {
	public:
		ITaskService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bgtc::ITaskService::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bgtc::ITaskService::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::bgtc::ITaskService::Unknown3\n");
				resp->error_code = Unknown3(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::bgtc::ITaskService::Unknown4\n");
				resp->error_code = Unknown4(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bgtc::ITaskService::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::bgtc::ITaskService::Unknown6\n");
				resp->error_code = Unknown6(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bgtc::ITaskService::Unknown11: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown11(req->GetData<uint32_t>(8));
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::bgtc::ITaskService::Unknown12\n");
				resp->error_code = Unknown12(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bgtc::ITaskService::Unknown13\n");
				resp->error_code = Unknown13();
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::bgtc::ITaskService::Unknown14\n");
				resp->error_code = Unknown14(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bgtc::ITaskService::Unknown15: uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Unknown15(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::bgtc::ITaskService::Unknown101\n");
				resp->error_code = Unknown101(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 102: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::bgtc::ITaskService::Unknown102\n");
				resp->error_code = Unknown102(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 103: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::bgtc::ITaskService::Unknown103\n");
				resp->error_code = Unknown103(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::bgtc::ITaskService", req->cmd_id);
			}
		}
		uint32_t Unknown1();
		uint32_t Unknown101(uint32_t& _0);
		uint32_t Unknown102(uint8_t& _0);
		uint32_t Unknown103(uint8_t& _0);
		uint32_t Unknown11(uint32_t _0);
		uint32_t Unknown12(uint32_t& _0);
		uint32_t Unknown13();
		uint32_t Unknown14(IpcService*& _0);
		uint32_t Unknown15(uint32_t _0, uint32_t _1);
		uint32_t Unknown2();
		uint32_t Unknown3(IpcService*& _0);
		uint32_t Unknown4(uint8_t& _0);
		uint32_t Unknown5();
		uint32_t Unknown6(uint8_t& _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::bgtc::IStateControlService::Unknown1(uint32_t& _0) {
	ns_print("Stub implementation for nn::bgtc::IStateControlService::Unknown1\n");
	return 0;
}
uint32_t nn::bgtc::IStateControlService::Unknown2(IpcService*& _0) {
	ns_print("Stub implementation for nn::bgtc::IStateControlService::Unknown2\n");
	return 0;
}
uint32_t nn::bgtc::IStateControlService::Unknown3() {
	ns_print("Stub implementation for nn::bgtc::IStateControlService::Unknown3\n");
	return 0;
}
uint32_t nn::bgtc::IStateControlService::Unknown4() {
	ns_print("Stub implementation for nn::bgtc::IStateControlService::Unknown4\n");
	return 0;
}
uint32_t nn::bgtc::IStateControlService::Unknown5(uint8_t _0) {
	ns_print("Stub implementation for nn::bgtc::IStateControlService::Unknown5\n");
	return 0;
}
uint32_t nn::bgtc::ITaskService::Unknown1() {
	ns_print("Stub implementation for nn::bgtc::ITaskService::Unknown1\n");
	return 0;
}
uint32_t nn::bgtc::ITaskService::Unknown101(uint32_t& _0) {
	ns_print("Stub implementation for nn::bgtc::ITaskService::Unknown101\n");
	return 0;
}
uint32_t nn::bgtc::ITaskService::Unknown102(uint8_t& _0) {
	ns_print("Stub implementation for nn::bgtc::ITaskService::Unknown102\n");
	return 0;
}
uint32_t nn::bgtc::ITaskService::Unknown103(uint8_t& _0) {
	ns_print("Stub implementation for nn::bgtc::ITaskService::Unknown103\n");
	return 0;
}
uint32_t nn::bgtc::ITaskService::Unknown11(uint32_t _0) {
	ns_print("Stub implementation for nn::bgtc::ITaskService::Unknown11\n");
	return 0;
}
uint32_t nn::bgtc::ITaskService::Unknown12(uint32_t& _0) {
	ns_print("Stub implementation for nn::bgtc::ITaskService::Unknown12\n");
	return 0;
}
uint32_t nn::bgtc::ITaskService::Unknown13() {
	ns_print("Stub implementation for nn::bgtc::ITaskService::Unknown13\n");
	return 0;
}
uint32_t nn::bgtc::ITaskService::Unknown14(IpcService*& _0) {
	ns_print("Stub implementation for nn::bgtc::ITaskService::Unknown14\n");
	return 0;
}
uint32_t nn::bgtc::ITaskService::Unknown15(uint32_t _0, uint32_t _1) {
	ns_print("Stub implementation for nn::bgtc::ITaskService::Unknown15\n");
	return 0;
}
uint32_t nn::bgtc::ITaskService::Unknown2() {
	ns_print("Stub implementation for nn::bgtc::ITaskService::Unknown2\n");
	return 0;
}
uint32_t nn::bgtc::ITaskService::Unknown3(IpcService*& _0) {
	ns_print("Stub implementation for nn::bgtc::ITaskService::Unknown3\n");
	return 0;
}
uint32_t nn::bgtc::ITaskService::Unknown4(uint8_t& _0) {
	ns_print("Stub implementation for nn::bgtc::ITaskService::Unknown4\n");
	return 0;
}
uint32_t nn::bgtc::ITaskService::Unknown5() {
	ns_print("Stub implementation for nn::bgtc::ITaskService::Unknown5\n");
	return 0;
}
uint32_t nn::bgtc::ITaskService::Unknown6(uint8_t& _0) {
	ns_print("Stub implementation for nn::bgtc::ITaskService::Unknown6\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::bluetooth {
	class IBluetoothDriver : public IpcService {
	public:
		IBluetoothDriver() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown1\n");
				resp->error_code = Unknown1(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown11: uint8_t[6] = %s\n", read_string(req->GetDataPointer<uint8_t *>(0xc), 6).c_str());
				resp->error_code = Unknown11(req->GetDataPointer<uint8_t *>(0xc));
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown12: uint8_t[6] = %s\n", read_string(req->GetDataPointer<uint8_t *>(0xc), 6).c_str());
				resp->error_code = Unknown12(req->GetDataPointer<uint8_t *>(0xc));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown13\n");
				resp->error_code = Unknown13();
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown14\n");
				resp->error_code = Unknown14();
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown15\n");
				resp->error_code = Unknown15(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown16\n");
				resp->error_code = Unknown16();
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown17: uint8_t[6] = %s\n", read_string(req->GetDataPointer<uint8_t *>(0xc), 6).c_str());
				resp->error_code = Unknown17(req->GetDataPointer<uint8_t *>(0xc));
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown18: uint8_t[6] = %s\n", read_string(req->GetDataPointer<uint8_t *>(0xc), 6).c_str());
				resp->error_code = Unknown18(req->GetDataPointer<uint8_t *>(0xc));
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown19\n");
				resp->error_code = Unknown19();
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown20\n");
				resp->error_code = Unknown20();
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown21\n");
				resp->error_code = Unknown21();
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown22\n");
				resp->error_code = Unknown22();
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown23: uint8_t[6] = %s\n", read_string(req->GetDataPointer<uint8_t *>(0xc), 6).c_str());
				resp->error_code = Unknown23(req->GetDataPointer<uint8_t *>(0xc));
				return 0;
			}
			case 24: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown24\n");
				resp->error_code = Unknown24();
				return 0;
			}
			case 25: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown25\n");
				resp->error_code = Unknown25();
				return 0;
			}
			case 26: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown26\n");
				resp->error_code = Unknown26();
				return 0;
			}
			case 27: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown27\n");
				resp->error_code = Unknown27(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 28: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown28\n");
				resp->error_code = Unknown28();
				return 0;
			}
			case 29: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown29\n");
				resp->error_code = Unknown29();
				return 0;
			}
			case 30: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown30\n");
				resp->error_code = Unknown30();
				return 0;
			}
			case 31: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown31: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown31(req->GetData<uint8_t>(8));
				return 0;
			}
			case 32: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown32\n");
				resp->error_code = Unknown32();
				return 0;
			}
			case 33: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown33\n");
				resp->error_code = Unknown33();
				return 0;
			}
			case 34: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown34: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown34(req->GetData<uint8_t>(8));
				return 0;
			}
			case 35: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown35\n");
				resp->error_code = Unknown35();
				return 0;
			}
			case 36: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown36\n");
				resp->error_code = Unknown36(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 37: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown37\n");
				resp->error_code = Unknown37(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 38: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown38\n");
				resp->error_code = Unknown38();
				return 0;
			}
			case 39: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown39\n");
				resp->error_code = Unknown39();
				return 0;
			}
			case 40: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown40\n");
				resp->error_code = Unknown40();
				return 0;
			}
			case 41: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown41: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown41(req->GetData<uint8_t>(8));
				return 0;
			}
			case 42: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown42\n");
				resp->error_code = Unknown42(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 43: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown43: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown43(req->GetData<uint8_t>(8));
				return 0;
			}
			case 44: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::bluetooth::IBluetoothDriver::Unknown44\n");
				resp->error_code = Unknown44(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::bluetooth::IBluetoothDriver", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1(IpcService*& _0);
		uint32_t Unknown10();
		uint32_t Unknown11(uint8_t * _0);
		uint32_t Unknown12(uint8_t * _0);
		uint32_t Unknown13();
		uint32_t Unknown14();
		uint32_t Unknown15(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown16();
		uint32_t Unknown17(uint8_t * _0);
		uint32_t Unknown18(uint8_t * _0);
		uint32_t Unknown19();
		uint32_t Unknown2();
		uint32_t Unknown20();
		uint32_t Unknown21();
		uint32_t Unknown22();
		uint32_t Unknown23(uint8_t * _0);
		uint32_t Unknown24();
		uint32_t Unknown25();
		uint32_t Unknown26();
		uint32_t Unknown27(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown28();
		uint32_t Unknown29();
		uint32_t Unknown3();
		uint32_t Unknown30();
		uint32_t Unknown31(uint8_t _0);
		uint32_t Unknown32();
		uint32_t Unknown33();
		uint32_t Unknown34(uint8_t _0);
		uint32_t Unknown35();
		uint32_t Unknown36(IpcService*& _0);
		uint32_t Unknown37(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown38();
		uint32_t Unknown39();
		uint32_t Unknown4();
		uint32_t Unknown40();
		uint32_t Unknown41(uint8_t _0);
		uint32_t Unknown42(uint8_t& _0);
		uint32_t Unknown43(uint8_t _0);
		uint32_t Unknown44(uint8_t& _0);
		uint32_t Unknown5();
		uint32_t Unknown6();
		uint32_t Unknown7();
		uint32_t Unknown8();
		uint32_t Unknown9();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::bluetooth::IBluetoothDriver::Unknown0() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown0\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown1(IpcService*& _0) {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown1\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown10() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown10\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown11(uint8_t * _0) {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown11\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown12(uint8_t * _0) {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown12\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown13() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown13\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown14() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown14\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown15(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown15\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown16() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown16\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown17(uint8_t * _0) {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown17\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown18(uint8_t * _0) {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown18\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown19() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown19\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown2() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown2\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown20() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown20\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown21() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown21\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown22() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown22\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown23(uint8_t * _0) {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown23\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown24() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown24\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown25() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown25\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown26() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown26\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown27(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown27\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown28() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown28\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown29() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown29\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown3() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown3\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown30() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown30\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown31(uint8_t _0) {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown31\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown32() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown32\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown33() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown33\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown34(uint8_t _0) {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown34\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown35() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown35\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown36(IpcService*& _0) {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown36\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown37(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown37\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown38() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown38\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown39() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown39\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown4() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown4\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown40() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown40\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown41(uint8_t _0) {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown41\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown42(uint8_t& _0) {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown42\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown43(uint8_t _0) {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown43\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown44(uint8_t& _0) {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown44\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown5() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown5\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown6() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown6\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown7() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown7\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown8() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown8\n");
	return 0;
}
uint32_t nn::bluetooth::IBluetoothDriver::Unknown9() {
	ns_print("Stub implementation for nn::bluetooth::IBluetoothDriver::Unknown9\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::bpc {
	class IBoardPowerControlManager : public IpcService {
	public:
		IBoardPowerControlManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bpc::IBoardPowerControlManager::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bpc::IBoardPowerControlManager::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::bpc::IBoardPowerControlManager::Unknown2\n");
				resp->error_code = Unknown2(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::bpc::IBoardPowerControlManager::Unknown3\n");
				resp->error_code = Unknown3(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::bpc::IBoardPowerControlManager::Unknown4\n");
				resp->error_code = Unknown4(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::bpc::IBoardPowerControlManager::Unknown5: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown5(req->GetData<uint32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::bpc::IBoardPowerControlManager::Unknown6\n");
				resp->error_code = Unknown6(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::bpc::IBoardPowerControlManager::Unknown7: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown7(req->GetData<uint32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::bpc::IBoardPowerControlManager::Unknown8: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown8(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bpc::IBoardPowerControlManager::Unknown9: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown9(req->GetData<uint32_t>(8));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bpc::IBoardPowerControlManager::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bpc::IBoardPowerControlManager::Unknown11\n");
				resp->error_code = Unknown11();
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::bpc::IBoardPowerControlManager::Unknown12\n");
				resp->error_code = Unknown12(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bpc::IBoardPowerControlManager::Unknown13: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown13(req->GetData<uint32_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::bpc::IBoardPowerControlManager", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown10();
		uint32_t Unknown11();
		uint32_t Unknown12(uint32_t& _0);
		uint32_t Unknown13(uint32_t _0);
		uint32_t Unknown2(uint32_t& _0);
		uint32_t Unknown3(uint32_t& _0);
		uint32_t Unknown4(uint8_t& _0);
		uint32_t Unknown5(uint32_t _0, IpcService*& _1);
		uint32_t Unknown6(uint32_t& _0);
		uint32_t Unknown7(uint32_t _0, IpcService*& _1);
		uint32_t Unknown8(uint64_t _0, uint32_t& _1);
		uint32_t Unknown9(uint32_t _0);
	};
	class IRtcManager : public IpcService {
	public:
		IRtcManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::bpc::IRtcManager::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bpc::IRtcManager::Unknown1: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown1(req->GetData<uint64_t>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::bpc::IRtcManager::Unknown2\n");
				resp->error_code = Unknown2(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bpc::IRtcManager::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bpc::IRtcManager::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::bpc::IRtcManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t& _0);
		uint32_t Unknown1(uint64_t _0);
		uint32_t Unknown2(uint8_t& _0);
		uint32_t Unknown3();
		uint32_t Unknown4();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::bpc::IBoardPowerControlManager::Unknown0() {
	ns_print("Stub implementation for nn::bpc::IBoardPowerControlManager::Unknown0\n");
	return 0;
}
uint32_t nn::bpc::IBoardPowerControlManager::Unknown1() {
	ns_print("Stub implementation for nn::bpc::IBoardPowerControlManager::Unknown1\n");
	return 0;
}
uint32_t nn::bpc::IBoardPowerControlManager::Unknown10() {
	ns_print("Stub implementation for nn::bpc::IBoardPowerControlManager::Unknown10\n");
	return 0;
}
uint32_t nn::bpc::IBoardPowerControlManager::Unknown11() {
	ns_print("Stub implementation for nn::bpc::IBoardPowerControlManager::Unknown11\n");
	return 0;
}
uint32_t nn::bpc::IBoardPowerControlManager::Unknown12(uint32_t& _0) {
	ns_print("Stub implementation for nn::bpc::IBoardPowerControlManager::Unknown12\n");
	return 0;
}
uint32_t nn::bpc::IBoardPowerControlManager::Unknown13(uint32_t _0) {
	ns_print("Stub implementation for nn::bpc::IBoardPowerControlManager::Unknown13\n");
	return 0;
}
uint32_t nn::bpc::IBoardPowerControlManager::Unknown2(uint32_t& _0) {
	ns_print("Stub implementation for nn::bpc::IBoardPowerControlManager::Unknown2\n");
	return 0;
}
uint32_t nn::bpc::IBoardPowerControlManager::Unknown3(uint32_t& _0) {
	ns_print("Stub implementation for nn::bpc::IBoardPowerControlManager::Unknown3\n");
	return 0;
}
uint32_t nn::bpc::IBoardPowerControlManager::Unknown4(uint8_t& _0) {
	ns_print("Stub implementation for nn::bpc::IBoardPowerControlManager::Unknown4\n");
	return 0;
}
uint32_t nn::bpc::IBoardPowerControlManager::Unknown5(uint32_t _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::bpc::IBoardPowerControlManager::Unknown5\n");
	return 0;
}
uint32_t nn::bpc::IBoardPowerControlManager::Unknown6(uint32_t& _0) {
	ns_print("Stub implementation for nn::bpc::IBoardPowerControlManager::Unknown6\n");
	return 0;
}
uint32_t nn::bpc::IBoardPowerControlManager::Unknown7(uint32_t _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::bpc::IBoardPowerControlManager::Unknown7\n");
	return 0;
}
uint32_t nn::bpc::IBoardPowerControlManager::Unknown8(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::bpc::IBoardPowerControlManager::Unknown8\n");
	return 0;
}
uint32_t nn::bpc::IBoardPowerControlManager::Unknown9(uint32_t _0) {
	ns_print("Stub implementation for nn::bpc::IBoardPowerControlManager::Unknown9\n");
	return 0;
}
uint32_t nn::bpc::IRtcManager::Unknown0(uint64_t& _0) {
	ns_print("Stub implementation for nn::bpc::IRtcManager::Unknown0\n");
	return 0;
}
uint32_t nn::bpc::IRtcManager::Unknown1(uint64_t _0) {
	ns_print("Stub implementation for nn::bpc::IRtcManager::Unknown1\n");
	return 0;
}
uint32_t nn::bpc::IRtcManager::Unknown2(uint8_t& _0) {
	ns_print("Stub implementation for nn::bpc::IRtcManager::Unknown2\n");
	return 0;
}
uint32_t nn::bpc::IRtcManager::Unknown3() {
	ns_print("Stub implementation for nn::bpc::IRtcManager::Unknown3\n");
	return 0;
}
uint32_t nn::bpc::IRtcManager::Unknown4() {
	ns_print("Stub implementation for nn::bpc::IRtcManager::Unknown4\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::bsdsocket::cfg {
	class ServerInterface : public IpcService {
	public:
		ServerInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bsdsocket::cfg::ServerInterface::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bsdsocket::cfg::ServerInterface::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::bsdsocket::cfg::ServerInterface::Unknown2: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown2(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::bsdsocket::cfg::ServerInterface::Unknown3: uint32_t = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), temp2);
				resp->error_code = Unknown3(req->GetData<uint32_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bsdsocket::cfg::ServerInterface::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::bsdsocket::cfg::ServerInterface::Unknown5: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown5(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bsdsocket::cfg::ServerInterface::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bsdsocket::cfg::ServerInterface::Unknown7: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown7(req->GetData<uint32_t>(8));
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bsdsocket::cfg::ServerInterface::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bsdsocket::cfg::ServerInterface::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bsdsocket::cfg::ServerInterface::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::bsdsocket::cfg::ServerInterface::Unknown11: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown11(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::bsdsocket::cfg::ServerInterface::Unknown12\n");
				resp->error_code = Unknown12();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::bsdsocket::cfg::ServerInterface", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown10();
		uint32_t Unknown11(uint8_t * _0, unsigned int _0_size);
		uint32_t Unknown12();
		uint32_t Unknown2(uint8_t * _0, unsigned int _0_size);
		uint32_t Unknown3(uint32_t _0, uint8_t * _1, unsigned int _1_size);
		uint32_t Unknown4();
		uint32_t Unknown5(uint8_t * _0, unsigned int _0_size);
		uint32_t Unknown6();
		uint32_t Unknown7(uint32_t _0);
		uint32_t Unknown8();
		uint32_t Unknown9();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::bsdsocket::cfg::ServerInterface::Unknown0() {
	ns_print("Stub implementation for nn::bsdsocket::cfg::ServerInterface::Unknown0\n");
	return 0;
}
uint32_t nn::bsdsocket::cfg::ServerInterface::Unknown1() {
	ns_print("Stub implementation for nn::bsdsocket::cfg::ServerInterface::Unknown1\n");
	return 0;
}
uint32_t nn::bsdsocket::cfg::ServerInterface::Unknown10() {
	ns_print("Stub implementation for nn::bsdsocket::cfg::ServerInterface::Unknown10\n");
	return 0;
}
uint32_t nn::bsdsocket::cfg::ServerInterface::Unknown11(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::bsdsocket::cfg::ServerInterface::Unknown11\n");
	return 0;
}
uint32_t nn::bsdsocket::cfg::ServerInterface::Unknown12() {
	ns_print("Stub implementation for nn::bsdsocket::cfg::ServerInterface::Unknown12\n");
	return 0;
}
uint32_t nn::bsdsocket::cfg::ServerInterface::Unknown2(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::bsdsocket::cfg::ServerInterface::Unknown2\n");
	return 0;
}
uint32_t nn::bsdsocket::cfg::ServerInterface::Unknown3(uint32_t _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::bsdsocket::cfg::ServerInterface::Unknown3\n");
	return 0;
}
uint32_t nn::bsdsocket::cfg::ServerInterface::Unknown4() {
	ns_print("Stub implementation for nn::bsdsocket::cfg::ServerInterface::Unknown4\n");
	return 0;
}
uint32_t nn::bsdsocket::cfg::ServerInterface::Unknown5(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::bsdsocket::cfg::ServerInterface::Unknown5\n");
	return 0;
}
uint32_t nn::bsdsocket::cfg::ServerInterface::Unknown6() {
	ns_print("Stub implementation for nn::bsdsocket::cfg::ServerInterface::Unknown6\n");
	return 0;
}
uint32_t nn::bsdsocket::cfg::ServerInterface::Unknown7(uint32_t _0) {
	ns_print("Stub implementation for nn::bsdsocket::cfg::ServerInterface::Unknown7\n");
	return 0;
}
uint32_t nn::bsdsocket::cfg::ServerInterface::Unknown8() {
	ns_print("Stub implementation for nn::bsdsocket::cfg::ServerInterface::Unknown8\n");
	return 0;
}
uint32_t nn::bsdsocket::cfg::ServerInterface::Unknown9() {
	ns_print("Stub implementation for nn::bsdsocket::cfg::ServerInterface::Unknown9\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::btm {
	class IBtm : public IpcService {
	public:
		IBtm() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::btm::IBtm::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtm::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtm::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtm::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtm::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtm::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtm::Unknown6: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown6(req->GetData<uint32_t>(8));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtm::Unknown7: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown7(req->GetData<uint32_t>(8));
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtm::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtm::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtm::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtm::Unknown11: uint8_t[6] = %s\n", read_string(req->GetDataPointer<uint8_t *>(0xc), 6).c_str());
				resp->error_code = Unknown11(req->GetDataPointer<uint8_t *>(0xc));
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtm::Unknown12: uint8_t[6] = %s\n", read_string(req->GetDataPointer<uint8_t *>(0xc), 6).c_str());
				resp->error_code = Unknown12(req->GetDataPointer<uint8_t *>(0xc));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtm::Unknown13: uint8_t[6] = %s\n", read_string(req->GetDataPointer<uint8_t *>(0xc), 6).c_str());
				resp->error_code = Unknown13(req->GetDataPointer<uint8_t *>(0xc));
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtm::Unknown14\n");
				resp->error_code = Unknown14();
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtm::Unknown15\n");
				resp->error_code = Unknown15();
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtm::Unknown16: uint8_t[6] = %s\n", read_string(req->GetDataPointer<uint8_t *>(0xc), 6).c_str());
				resp->error_code = Unknown16(req->GetDataPointer<uint8_t *>(0xc));
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtm::Unknown17\n");
				resp->error_code = Unknown17();
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtm::Unknown18\n");
				resp->error_code = Unknown18();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::btm::IBtm", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t& _0);
		uint32_t Unknown1();
		uint32_t Unknown10();
		uint32_t Unknown11(uint8_t * _0);
		uint32_t Unknown12(uint8_t * _0);
		uint32_t Unknown13(uint8_t * _0);
		uint32_t Unknown14();
		uint32_t Unknown15();
		uint32_t Unknown16(uint8_t * _0);
		uint32_t Unknown17();
		uint32_t Unknown18();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6(uint32_t _0);
		uint32_t Unknown7(uint32_t _0);
		uint32_t Unknown8();
		uint32_t Unknown9();
	};
	class IBtmDebug : public IpcService {
	public:
		IBtmDebug() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtmDebug::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtmDebug::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtmDebug::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtmDebug::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtmDebug::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtmDebug::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtmDebug::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtmDebug::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtmDebug::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::btm::IBtmDebug", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6();
		uint32_t Unknown7();
		uint32_t Unknown8();
	};
	class IBtmSystem : public IpcService {
	public:
		IBtmSystem() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::btm::IBtmSystem::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::btm::IBtmSystem", req->cmd_id);
			}
		}
		uint32_t Unknown0(IUnknown*& _0);
	};
	class IBtmSystemCore : public IpcService {
	public:
		IBtmSystemCore() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtmSystemCore::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtmSystemCore::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtmSystemCore::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::btm::IBtmSystemCore::Unknown3\n");
				resp->error_code = Unknown3(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtmSystemCore::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtmSystemCore::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::btm::IBtmSystemCore::Unknown6\n");
				resp->error_code = Unknown6(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtmSystemCore::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::btm::IBtmSystemCore::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::btm::IBtmSystemCore::Unknown9\n");
				resp->error_code = Unknown9(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::btm::IBtmSystemCore", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3(uint8_t& _0);
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6(uint8_t& _0);
		uint32_t Unknown7();
		uint32_t Unknown8();
		uint32_t Unknown9(uint8_t& _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::btm::IBtm::Unknown0(uint32_t& _0) {
	ns_print("Stub implementation for nn::btm::IBtm::Unknown0\n");
	return 0;
}
uint32_t nn::btm::IBtm::Unknown1() {
	ns_print("Stub implementation for nn::btm::IBtm::Unknown1\n");
	return 0;
}
uint32_t nn::btm::IBtm::Unknown10() {
	ns_print("Stub implementation for nn::btm::IBtm::Unknown10\n");
	return 0;
}
uint32_t nn::btm::IBtm::Unknown11(uint8_t * _0) {
	ns_print("Stub implementation for nn::btm::IBtm::Unknown11\n");
	return 0;
}
uint32_t nn::btm::IBtm::Unknown12(uint8_t * _0) {
	ns_print("Stub implementation for nn::btm::IBtm::Unknown12\n");
	return 0;
}
uint32_t nn::btm::IBtm::Unknown13(uint8_t * _0) {
	ns_print("Stub implementation for nn::btm::IBtm::Unknown13\n");
	return 0;
}
uint32_t nn::btm::IBtm::Unknown14() {
	ns_print("Stub implementation for nn::btm::IBtm::Unknown14\n");
	return 0;
}
uint32_t nn::btm::IBtm::Unknown15() {
	ns_print("Stub implementation for nn::btm::IBtm::Unknown15\n");
	return 0;
}
uint32_t nn::btm::IBtm::Unknown16(uint8_t * _0) {
	ns_print("Stub implementation for nn::btm::IBtm::Unknown16\n");
	return 0;
}
uint32_t nn::btm::IBtm::Unknown17() {
	ns_print("Stub implementation for nn::btm::IBtm::Unknown17\n");
	return 0;
}
uint32_t nn::btm::IBtm::Unknown18() {
	ns_print("Stub implementation for nn::btm::IBtm::Unknown18\n");
	return 0;
}
uint32_t nn::btm::IBtm::Unknown2() {
	ns_print("Stub implementation for nn::btm::IBtm::Unknown2\n");
	return 0;
}
uint32_t nn::btm::IBtm::Unknown3() {
	ns_print("Stub implementation for nn::btm::IBtm::Unknown3\n");
	return 0;
}
uint32_t nn::btm::IBtm::Unknown4() {
	ns_print("Stub implementation for nn::btm::IBtm::Unknown4\n");
	return 0;
}
uint32_t nn::btm::IBtm::Unknown5() {
	ns_print("Stub implementation for nn::btm::IBtm::Unknown5\n");
	return 0;
}
uint32_t nn::btm::IBtm::Unknown6(uint32_t _0) {
	ns_print("Stub implementation for nn::btm::IBtm::Unknown6\n");
	return 0;
}
uint32_t nn::btm::IBtm::Unknown7(uint32_t _0) {
	ns_print("Stub implementation for nn::btm::IBtm::Unknown7\n");
	return 0;
}
uint32_t nn::btm::IBtm::Unknown8() {
	ns_print("Stub implementation for nn::btm::IBtm::Unknown8\n");
	return 0;
}
uint32_t nn::btm::IBtm::Unknown9() {
	ns_print("Stub implementation for nn::btm::IBtm::Unknown9\n");
	return 0;
}
uint32_t nn::btm::IBtmDebug::Unknown0() {
	ns_print("Stub implementation for nn::btm::IBtmDebug::Unknown0\n");
	return 0;
}
uint32_t nn::btm::IBtmDebug::Unknown1() {
	ns_print("Stub implementation for nn::btm::IBtmDebug::Unknown1\n");
	return 0;
}
uint32_t nn::btm::IBtmDebug::Unknown2() {
	ns_print("Stub implementation for nn::btm::IBtmDebug::Unknown2\n");
	return 0;
}
uint32_t nn::btm::IBtmDebug::Unknown3() {
	ns_print("Stub implementation for nn::btm::IBtmDebug::Unknown3\n");
	return 0;
}
uint32_t nn::btm::IBtmDebug::Unknown4() {
	ns_print("Stub implementation for nn::btm::IBtmDebug::Unknown4\n");
	return 0;
}
uint32_t nn::btm::IBtmDebug::Unknown5() {
	ns_print("Stub implementation for nn::btm::IBtmDebug::Unknown5\n");
	return 0;
}
uint32_t nn::btm::IBtmDebug::Unknown6() {
	ns_print("Stub implementation for nn::btm::IBtmDebug::Unknown6\n");
	return 0;
}
uint32_t nn::btm::IBtmDebug::Unknown7() {
	ns_print("Stub implementation for nn::btm::IBtmDebug::Unknown7\n");
	return 0;
}
uint32_t nn::btm::IBtmDebug::Unknown8() {
	ns_print("Stub implementation for nn::btm::IBtmDebug::Unknown8\n");
	return 0;
}
uint32_t nn::btm::IBtmSystem::Unknown0(IUnknown*& _0) {
	ns_print("Stub implementation for nn::btm::IBtmSystem::Unknown0\n");
	return 0;
}
uint32_t nn::btm::IBtmSystemCore::Unknown0() {
	ns_print("Stub implementation for nn::btm::IBtmSystemCore::Unknown0\n");
	return 0;
}
uint32_t nn::btm::IBtmSystemCore::Unknown1() {
	ns_print("Stub implementation for nn::btm::IBtmSystemCore::Unknown1\n");
	return 0;
}
uint32_t nn::btm::IBtmSystemCore::Unknown2() {
	ns_print("Stub implementation for nn::btm::IBtmSystemCore::Unknown2\n");
	return 0;
}
uint32_t nn::btm::IBtmSystemCore::Unknown3(uint8_t& _0) {
	ns_print("Stub implementation for nn::btm::IBtmSystemCore::Unknown3\n");
	return 0;
}
uint32_t nn::btm::IBtmSystemCore::Unknown4() {
	ns_print("Stub implementation for nn::btm::IBtmSystemCore::Unknown4\n");
	return 0;
}
uint32_t nn::btm::IBtmSystemCore::Unknown5() {
	ns_print("Stub implementation for nn::btm::IBtmSystemCore::Unknown5\n");
	return 0;
}
uint32_t nn::btm::IBtmSystemCore::Unknown6(uint8_t& _0) {
	ns_print("Stub implementation for nn::btm::IBtmSystemCore::Unknown6\n");
	return 0;
}
uint32_t nn::btm::IBtmSystemCore::Unknown7() {
	ns_print("Stub implementation for nn::btm::IBtmSystemCore::Unknown7\n");
	return 0;
}
uint32_t nn::btm::IBtmSystemCore::Unknown8() {
	ns_print("Stub implementation for nn::btm::IBtmSystemCore::Unknown8\n");
	return 0;
}
uint32_t nn::btm::IBtmSystemCore::Unknown9(uint8_t& _0) {
	ns_print("Stub implementation for nn::btm::IBtmSystemCore::Unknown9\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::capsrv::sf {
	class IAlbumAccessorService : public IpcService {
	public:
		IAlbumAccessorService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown11\n");
				resp->error_code = Unknown11();
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown12\n");
				resp->error_code = Unknown12();
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown13\n");
				resp->error_code = Unknown13();
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown14\n");
				resp->error_code = Unknown14();
				return 0;
			}
			case 301: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown301\n");
				resp->error_code = Unknown301();
				return 0;
			}
			case 401: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown401\n");
				resp->error_code = Unknown401(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 501: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown501\n");
				resp->error_code = Unknown501();
				return 0;
			}
			case 1001: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown1001\n");
				resp->error_code = Unknown1001();
				return 0;
			}
			case 1002: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown1002\n");
				resp->error_code = Unknown1002();
				return 0;
			}
			case 8001: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown8001: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown8001(req->GetData<uint8_t>(8));
				return 0;
			}
			case 8002: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown8002: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown8002(req->GetData<uint8_t>(8));
				return 0;
			}
			case 8011: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown8011: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown8011(req->GetData<uint8_t>(8));
				return 0;
			}
			case 8012: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown8012\n");
				resp->error_code = Unknown8012();
				return 0;
			}
			case 8021: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown8021\n");
				resp->error_code = Unknown8021();
				return 0;
			}
			case 10011: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumAccessorService::Unknown10011: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown10011(req->GetData<uint8_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::capsrv::sf::IAlbumAccessorService", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown10();
		uint32_t Unknown1001();
		uint32_t Unknown10011(uint8_t _0);
		uint32_t Unknown1002();
		uint32_t Unknown11();
		uint32_t Unknown12();
		uint32_t Unknown13();
		uint32_t Unknown14();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown301();
		uint32_t Unknown4();
		uint32_t Unknown401(uint8_t& _0);
		uint32_t Unknown5();
		uint32_t Unknown501();
		uint32_t Unknown6();
		uint32_t Unknown7();
		uint32_t Unknown8();
		uint32_t Unknown8001(uint8_t _0);
		uint32_t Unknown8002(uint8_t _0);
		uint32_t Unknown8011(uint8_t _0);
		uint32_t Unknown8012();
		uint32_t Unknown8021();
		uint32_t Unknown9();
	};
	class IAlbumControlService : public IpcService {
	public:
		IAlbumControlService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 2001: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumControlService::Unknown2001: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown2001(req->GetData<uint8_t>(8));
				return 0;
			}
			case 2002: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumControlService::Unknown2002: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown2002(req->GetData<uint8_t>(8));
				return 0;
			}
			case 2011: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumControlService::Unknown2011: uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Unknown2011(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 2012: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumControlService::Unknown2012: uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Unknown2012(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 2013: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::capsrv::sf::IAlbumControlService::Unknown2013: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown2013(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 2014: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumControlService::Unknown2014: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown2014(req->GetData<uint64_t>(8));
				return 0;
			}
			case 2101: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumControlService::Unknown2101\n");
				resp->error_code = Unknown2101();
				return 0;
			}
			case 2102: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumControlService::Unknown2102\n");
				resp->error_code = Unknown2102();
				return 0;
			}
			case 2201: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumControlService::Unknown2201\n");
				resp->error_code = Unknown2201();
				return 0;
			}
			case 2301: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IAlbumControlService::Unknown2301\n");
				resp->error_code = Unknown2301();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::capsrv::sf::IAlbumControlService", req->cmd_id);
			}
		}
		uint32_t Unknown2001(uint8_t _0);
		uint32_t Unknown2002(uint8_t _0);
		uint32_t Unknown2011(uint64_t _0, uint64_t _1);
		uint32_t Unknown2012(uint64_t _0, uint64_t _1);
		uint32_t Unknown2013(uint64_t _0, uint64_t& _1);
		uint32_t Unknown2014(uint64_t _0);
		uint32_t Unknown2101();
		uint32_t Unknown2102();
		uint32_t Unknown2201();
		uint32_t Unknown2301();
	};
	class IScreenShotApplicationService : public IpcService {
	public:
		IScreenShotApplicationService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 201: {
				resp->GenBuf(0, 0, 32);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x45, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				auto temp4 = resp->GetDataPointer<nn::capsrv::ApplicationAlbumEntry>(8);
				ns_print("IPC message to nn::capsrv::sf::IScreenShotApplicationService::SaveScreenShot: uint32_t = 0x%x, uint32_t = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10), temp2);
				resp->error_code = SaveScreenShot(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid, temp3, temp2, temp4);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 203: {
				resp->GenBuf(0, 0, 32);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x45, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				auto temp4 = resp->GetDataPointer<nn::capsrv::ApplicationAlbumEntry>(8);
				ns_print("IPC message to nn::capsrv::sf::IScreenShotApplicationService::SaveScreenShotEx0: nn::capsrv::detail::ScreenShotAttributeEx0 = %s, uint32_t = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx, uint8_t *= buffer<0x%lx>\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x40).c_str(), req->GetData<uint32_t>(0x48), req->GetData<nn::applet::AppletResourceUserId>(0x50), temp2);
				resp->error_code = SaveScreenShotEx0(req->GetDataPointer<nn::capsrv::detail::ScreenShotAttributeEx0>(8), req->GetData<uint32_t>(0x48), req->GetData<nn::applet::AppletResourceUserId>(0x50), req->pid, temp3, temp2, temp4);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::capsrv::sf::IScreenShotApplicationService", req->cmd_id);
			}
		}
		uint32_t SaveScreenShot(uint32_t _0, uint32_t _1, nn::applet::AppletResourceUserId _2, uint64_t _3, uint8_t * _4, unsigned int _4_size, nn::capsrv::ApplicationAlbumEntry& _5);
		uint32_t SaveScreenShotEx0(nn::capsrv::detail::ScreenShotAttributeEx0 _0, uint32_t _1, nn::applet::AppletResourceUserId _2, uint64_t _3, uint8_t * _4, unsigned int _4_size, nn::capsrv::ApplicationAlbumEntry& _5);
	};
	class IScreenShotControlService : public IpcService {
	public:
		IScreenShotControlService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IScreenShotControlService::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IScreenShotControlService::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 1001: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IScreenShotControlService::Unknown1001: uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Unknown1001(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 1002: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IScreenShotControlService::Unknown1002: uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint64_t>(0x18));
				resp->error_code = Unknown1002(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint64_t>(0x18));
				return 0;
			}
			case 1003: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IScreenShotControlService::Unknown1003\n");
				resp->error_code = Unknown1003();
				return 0;
			}
			case 1011: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IScreenShotControlService::Unknown1011: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown1011(req->GetData<uint64_t>(8));
				return 0;
			}
			case 1012: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IScreenShotControlService::Unknown1012: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown1012(req->GetData<uint64_t>(8));
				return 0;
			}
			case 1201: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IScreenShotControlService::Unknown1201\n");
				resp->error_code = Unknown1201();
				return 0;
			}
			case 1202: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IScreenShotControlService::Unknown1202\n");
				resp->error_code = Unknown1202();
				return 0;
			}
			case 1203: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::capsrv::sf::IScreenShotControlService::Unknown1203: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown1203(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::capsrv::sf::IScreenShotControlService", req->cmd_id);
			}
		}
		uint32_t Unknown1();
		uint32_t Unknown1001(uint64_t _0, uint64_t _1);
		uint32_t Unknown1002(uint64_t _0, uint64_t _1, uint64_t _2);
		uint32_t Unknown1003();
		uint32_t Unknown1011(uint64_t _0);
		uint32_t Unknown1012(uint64_t _0);
		uint32_t Unknown1201();
		uint32_t Unknown1202();
		uint32_t Unknown1203(uint64_t _0, uint64_t& _1, uint8_t *& _2, unsigned int _2_size);
		uint32_t Unknown2();
	};
	class IScreenShotService : public IpcService {
	public:
		IScreenShotService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 201: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IScreenShotService::Unknown201\n");
				resp->error_code = Unknown201();
				return 0;
			}
			case 202: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IScreenShotService::Unknown202\n");
				resp->error_code = Unknown202();
				return 0;
			}
			case 203: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IScreenShotService::Unknown203\n");
				resp->error_code = Unknown203();
				return 0;
			}
			case 204: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::capsrv::sf::IScreenShotService::Unknown204\n");
				resp->error_code = Unknown204();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::capsrv::sf::IScreenShotService", req->cmd_id);
			}
		}
		uint32_t Unknown201();
		uint32_t Unknown202();
		uint32_t Unknown203();
		uint32_t Unknown204();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown0() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown0\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown1() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown1\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown10() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown10\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown1001() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown1001\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown10011(uint8_t _0) {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown10011\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown1002() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown1002\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown11() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown11\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown12() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown12\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown13() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown13\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown14() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown14\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown2() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown2\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown3() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown3\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown301() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown301\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown4() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown4\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown401(uint8_t& _0) {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown401\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown5() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown5\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown501() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown501\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown6() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown6\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown7() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown7\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown8() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown8\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown8001(uint8_t _0) {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown8001\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown8002(uint8_t _0) {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown8002\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown8011(uint8_t _0) {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown8011\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown8012() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown8012\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown8021() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown8021\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumAccessorService::Unknown9() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumAccessorService::Unknown9\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumControlService::Unknown2001(uint8_t _0) {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumControlService::Unknown2001\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumControlService::Unknown2002(uint8_t _0) {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumControlService::Unknown2002\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumControlService::Unknown2011(uint64_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumControlService::Unknown2011\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumControlService::Unknown2012(uint64_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumControlService::Unknown2012\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumControlService::Unknown2013(uint64_t _0, uint64_t& _1) {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumControlService::Unknown2013\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumControlService::Unknown2014(uint64_t _0) {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumControlService::Unknown2014\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumControlService::Unknown2101() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumControlService::Unknown2101\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumControlService::Unknown2102() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumControlService::Unknown2102\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumControlService::Unknown2201() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumControlService::Unknown2201\n");
	return 0;
}
uint32_t nn::capsrv::sf::IAlbumControlService::Unknown2301() {
	ns_print("Stub implementation for nn::capsrv::sf::IAlbumControlService::Unknown2301\n");
	return 0;
}
uint32_t nn::capsrv::sf::IScreenShotApplicationService::SaveScreenShot(uint32_t _0, uint32_t _1, nn::applet::AppletResourceUserId _2, uint64_t _3, uint8_t * _4, unsigned int _4_size, nn::capsrv::ApplicationAlbumEntry& _5) {
	ns_print("Stub implementation for nn::capsrv::sf::IScreenShotApplicationService::SaveScreenShot\n");
	return 0;
}
uint32_t nn::capsrv::sf::IScreenShotApplicationService::SaveScreenShotEx0(nn::capsrv::detail::ScreenShotAttributeEx0 _0, uint32_t _1, nn::applet::AppletResourceUserId _2, uint64_t _3, uint8_t * _4, unsigned int _4_size, nn::capsrv::ApplicationAlbumEntry& _5) {
	ns_print("Stub implementation for nn::capsrv::sf::IScreenShotApplicationService::SaveScreenShotEx0\n");
	return 0;
}
uint32_t nn::capsrv::sf::IScreenShotControlService::Unknown1() {
	ns_print("Stub implementation for nn::capsrv::sf::IScreenShotControlService::Unknown1\n");
	return 0;
}
uint32_t nn::capsrv::sf::IScreenShotControlService::Unknown1001(uint64_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::capsrv::sf::IScreenShotControlService::Unknown1001\n");
	return 0;
}
uint32_t nn::capsrv::sf::IScreenShotControlService::Unknown1002(uint64_t _0, uint64_t _1, uint64_t _2) {
	ns_print("Stub implementation for nn::capsrv::sf::IScreenShotControlService::Unknown1002\n");
	return 0;
}
uint32_t nn::capsrv::sf::IScreenShotControlService::Unknown1003() {
	ns_print("Stub implementation for nn::capsrv::sf::IScreenShotControlService::Unknown1003\n");
	return 0;
}
uint32_t nn::capsrv::sf::IScreenShotControlService::Unknown1011(uint64_t _0) {
	ns_print("Stub implementation for nn::capsrv::sf::IScreenShotControlService::Unknown1011\n");
	return 0;
}
uint32_t nn::capsrv::sf::IScreenShotControlService::Unknown1012(uint64_t _0) {
	ns_print("Stub implementation for nn::capsrv::sf::IScreenShotControlService::Unknown1012\n");
	return 0;
}
uint32_t nn::capsrv::sf::IScreenShotControlService::Unknown1201() {
	ns_print("Stub implementation for nn::capsrv::sf::IScreenShotControlService::Unknown1201\n");
	return 0;
}
uint32_t nn::capsrv::sf::IScreenShotControlService::Unknown1202() {
	ns_print("Stub implementation for nn::capsrv::sf::IScreenShotControlService::Unknown1202\n");
	return 0;
}
uint32_t nn::capsrv::sf::IScreenShotControlService::Unknown1203(uint64_t _0, uint64_t& _1, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::capsrv::sf::IScreenShotControlService::Unknown1203\n");
	return 0;
}
uint32_t nn::capsrv::sf::IScreenShotControlService::Unknown2() {
	ns_print("Stub implementation for nn::capsrv::sf::IScreenShotControlService::Unknown2\n");
	return 0;
}
uint32_t nn::capsrv::sf::IScreenShotService::Unknown201() {
	ns_print("Stub implementation for nn::capsrv::sf::IScreenShotService::Unknown201\n");
	return 0;
}
uint32_t nn::capsrv::sf::IScreenShotService::Unknown202() {
	ns_print("Stub implementation for nn::capsrv::sf::IScreenShotService::Unknown202\n");
	return 0;
}
uint32_t nn::capsrv::sf::IScreenShotService::Unknown203() {
	ns_print("Stub implementation for nn::capsrv::sf::IScreenShotService::Unknown203\n");
	return 0;
}
uint32_t nn::capsrv::sf::IScreenShotService::Unknown204() {
	ns_print("Stub implementation for nn::capsrv::sf::IScreenShotService::Unknown204\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::cec {
	class ICecManager : public IpcService {
	public:
		ICecManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::cec::ICecManager::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::cec::ICecManager::Unknown1: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown1(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::cec::ICecManager::Unknown2: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown2(req->GetData<uint32_t>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::cec::ICecManager::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::cec::ICecManager::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::cec::ICecManager::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::cec::ICecManager::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::cec::ICecManager", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1(uint32_t _0, uint32_t& _1);
		uint32_t Unknown2(uint32_t _0);
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::cec::ICecManager::Unknown0() {
	ns_print("Stub implementation for nn::cec::ICecManager::Unknown0\n");
	return 0;
}
uint32_t nn::cec::ICecManager::Unknown1(uint32_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::cec::ICecManager::Unknown1\n");
	return 0;
}
uint32_t nn::cec::ICecManager::Unknown2(uint32_t _0) {
	ns_print("Stub implementation for nn::cec::ICecManager::Unknown2\n");
	return 0;
}
uint32_t nn::cec::ICecManager::Unknown3() {
	ns_print("Stub implementation for nn::cec::ICecManager::Unknown3\n");
	return 0;
}
uint32_t nn::cec::ICecManager::Unknown4() {
	ns_print("Stub implementation for nn::cec::ICecManager::Unknown4\n");
	return 0;
}
uint32_t nn::cec::ICecManager::Unknown5() {
	ns_print("Stub implementation for nn::cec::ICecManager::Unknown5\n");
	return 0;
}
uint32_t nn::cec::ICecManager::Unknown6() {
	ns_print("Stub implementation for nn::cec::ICecManager::Unknown6\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::codec::detail {
	class IHardwareOpusDecoder : public IpcService {
	public:
		IHardwareOpusDecoder() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::codec::detail::IHardwareOpusDecoder::Unknown0: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown0(temp3, temp2, *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::codec::detail::IHardwareOpusDecoder::Unknown1: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown1(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::codec::detail::IHardwareOpusDecoder::Unknown2: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown2(temp3, temp2, *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::codec::detail::IHardwareOpusDecoder::Unknown3: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown3(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::codec::detail::IHardwareOpusDecoder", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint8_t * _0, unsigned int _0_size, uint32_t& _1, uint32_t& _2, uint8_t *& _3, unsigned int _3_size);
		uint32_t Unknown1(uint8_t * _0, unsigned int _0_size);
		uint32_t Unknown2(uint8_t * _0, unsigned int _0_size, uint32_t& _1, uint32_t& _2, uint8_t *& _3, unsigned int _3_size);
		uint32_t Unknown3(uint8_t * _0, unsigned int _0_size);
	};
	class IHardwareOpusDecoderManager : public IpcService {
	public:
		IHardwareOpusDecoderManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::codec::detail::IHardwareOpusDecoderManager::Unknown0: uint64_t = 0x%%lx, uint32_t = 0x%x, KObject = 0x%x\n", req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), req->GetCopied(0));
				resp->error_code = Unknown0(req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::codec::detail::IHardwareOpusDecoderManager::Unknown1: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown1(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(1, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				IUnknown* temp4;
				ns_print("IPC message to nn::codec::detail::IHardwareOpusDecoderManager::Unknown2: uint32_t = 0x%x, KObject = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), req->GetCopied(0), temp2);
				resp->error_code = Unknown2(req->GetData<uint32_t>(8), IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp3, temp2, temp4);
				delete[] (uint8_t *) temp3;
				if(temp4 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp4));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::codec::detail::IHardwareOpusDecoderManager::Unknown3: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown3(temp3, temp2, *resp->GetDataPointer<uint32_t *>(8));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::codec::detail::IHardwareOpusDecoderManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0, uint32_t _1, IpcService* _2, IUnknown*& _3);
		uint32_t Unknown1(uint64_t _0, uint32_t& _1);
		uint32_t Unknown2(uint32_t _0, IpcService* _1, uint8_t * _2, unsigned int _2_size, IUnknown*& _3);
		uint32_t Unknown3(uint8_t * _0, unsigned int _0_size, uint32_t& _1);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::codec::detail::IHardwareOpusDecoder::Unknown0(uint8_t * _0, unsigned int _0_size, uint32_t& _1, uint32_t& _2, uint8_t *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::codec::detail::IHardwareOpusDecoder::Unknown0\n");
	return 0;
}
uint32_t nn::codec::detail::IHardwareOpusDecoder::Unknown1(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::codec::detail::IHardwareOpusDecoder::Unknown1\n");
	return 0;
}
uint32_t nn::codec::detail::IHardwareOpusDecoder::Unknown2(uint8_t * _0, unsigned int _0_size, uint32_t& _1, uint32_t& _2, uint8_t *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::codec::detail::IHardwareOpusDecoder::Unknown2\n");
	return 0;
}
uint32_t nn::codec::detail::IHardwareOpusDecoder::Unknown3(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::codec::detail::IHardwareOpusDecoder::Unknown3\n");
	return 0;
}
uint32_t nn::codec::detail::IHardwareOpusDecoderManager::Unknown0(uint64_t _0, uint32_t _1, IpcService* _2, IUnknown*& _3) {
	ns_print("Stub implementation for nn::codec::detail::IHardwareOpusDecoderManager::Unknown0\n");
	return 0;
}
uint32_t nn::codec::detail::IHardwareOpusDecoderManager::Unknown1(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::codec::detail::IHardwareOpusDecoderManager::Unknown1\n");
	return 0;
}
uint32_t nn::codec::detail::IHardwareOpusDecoderManager::Unknown2(uint32_t _0, IpcService* _1, uint8_t * _2, unsigned int _2_size, IUnknown*& _3) {
	ns_print("Stub implementation for nn::codec::detail::IHardwareOpusDecoderManager::Unknown2\n");
	return 0;
}
uint32_t nn::codec::detail::IHardwareOpusDecoderManager::Unknown3(uint8_t * _0, unsigned int _0_size, uint32_t& _1) {
	ns_print("Stub implementation for nn::codec::detail::IHardwareOpusDecoderManager::Unknown3\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::erpt::sf {
	class IContext : public IpcService {
	public:
		IContext() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::erpt::sf::IContext::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::erpt::sf::IContext::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::erpt::sf::IContext::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::erpt::sf::IContext::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::erpt::sf::IContext::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::erpt::sf::IContext::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::erpt::sf::IContext", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
	};
	class IManager : public IpcService {
	public:
		IManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::erpt::sf::IManager::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::erpt::sf::IManager::Unknown1\n");
				resp->error_code = Unknown1(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::erpt::sf::IManager", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1(IpcService*& _0);
	};
	class IReport : public IpcService {
	public:
		IReport() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::erpt::sf::IReport::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::erpt::sf::IReport::Unknown1\n");
				resp->error_code = Unknown1(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::erpt::sf::IReport::Unknown2: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown2(req->GetData<uint32_t>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::erpt::sf::IReport::Unknown3\n");
				resp->error_code = Unknown3(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::erpt::sf::IReport::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::erpt::sf::IReport::Unknown5\n");
				resp->error_code = Unknown5(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::erpt::sf::IReport", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown2(uint32_t _0);
		uint32_t Unknown3(uint32_t& _0);
		uint32_t Unknown4();
		uint32_t Unknown5(uint64_t& _0);
	};
	class ISession : public IpcService {
	public:
		ISession() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::erpt::sf::ISession::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::erpt::sf::ISession::Unknown1\n");
				resp->error_code = Unknown1(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::erpt::sf::ISession", req->cmd_id);
			}
		}
		uint32_t Unknown0(IUnknown*& _0);
		uint32_t Unknown1(IUnknown*& _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::erpt::sf::IContext::Unknown0() {
	ns_print("Stub implementation for nn::erpt::sf::IContext::Unknown0\n");
	return 0;
}
uint32_t nn::erpt::sf::IContext::Unknown1() {
	ns_print("Stub implementation for nn::erpt::sf::IContext::Unknown1\n");
	return 0;
}
uint32_t nn::erpt::sf::IContext::Unknown2() {
	ns_print("Stub implementation for nn::erpt::sf::IContext::Unknown2\n");
	return 0;
}
uint32_t nn::erpt::sf::IContext::Unknown3() {
	ns_print("Stub implementation for nn::erpt::sf::IContext::Unknown3\n");
	return 0;
}
uint32_t nn::erpt::sf::IContext::Unknown4() {
	ns_print("Stub implementation for nn::erpt::sf::IContext::Unknown4\n");
	return 0;
}
uint32_t nn::erpt::sf::IContext::Unknown5() {
	ns_print("Stub implementation for nn::erpt::sf::IContext::Unknown5\n");
	return 0;
}
uint32_t nn::erpt::sf::IManager::Unknown0() {
	ns_print("Stub implementation for nn::erpt::sf::IManager::Unknown0\n");
	return 0;
}
uint32_t nn::erpt::sf::IManager::Unknown1(IpcService*& _0) {
	ns_print("Stub implementation for nn::erpt::sf::IManager::Unknown1\n");
	return 0;
}
uint32_t nn::erpt::sf::IReport::Unknown0() {
	ns_print("Stub implementation for nn::erpt::sf::IReport::Unknown0\n");
	return 0;
}
uint32_t nn::erpt::sf::IReport::Unknown1(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::erpt::sf::IReport::Unknown1\n");
	return 0;
}
uint32_t nn::erpt::sf::IReport::Unknown2(uint32_t _0) {
	ns_print("Stub implementation for nn::erpt::sf::IReport::Unknown2\n");
	return 0;
}
uint32_t nn::erpt::sf::IReport::Unknown3(uint32_t& _0) {
	ns_print("Stub implementation for nn::erpt::sf::IReport::Unknown3\n");
	return 0;
}
uint32_t nn::erpt::sf::IReport::Unknown4() {
	ns_print("Stub implementation for nn::erpt::sf::IReport::Unknown4\n");
	return 0;
}
uint32_t nn::erpt::sf::IReport::Unknown5(uint64_t& _0) {
	ns_print("Stub implementation for nn::erpt::sf::IReport::Unknown5\n");
	return 0;
}
uint32_t nn::erpt::sf::ISession::Unknown0(IUnknown*& _0) {
	ns_print("Stub implementation for nn::erpt::sf::ISession::Unknown0\n");
	return 0;
}
uint32_t nn::erpt::sf::ISession::Unknown1(IUnknown*& _0) {
	ns_print("Stub implementation for nn::erpt::sf::ISession::Unknown1\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::es {
	class IETicketService : public IpcService {
	public:
		IETicketService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::es::IETicketService::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::es::IETicketService::Unknown2: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown2(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::es::IETicketService::Unknown3: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown3(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::es::IETicketService::Unknown4: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown4(req->GetData<uint32_t>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::es::IETicketService::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::es::IETicketService::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::es::IETicketService::Unknown7: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown7(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::es::IETicketService::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::es::IETicketService::Unknown9\n");
				resp->error_code = Unknown9(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::es::IETicketService::Unknown10\n");
				resp->error_code = Unknown10(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::es::IETicketService::Unknown11\n");
				resp->error_code = Unknown11(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::es::IETicketService::Unknown12\n");
				resp->error_code = Unknown12(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::es::IETicketService::Unknown13\n");
				resp->error_code = Unknown13();
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::es::IETicketService::Unknown14\n");
				resp->error_code = Unknown14();
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::es::IETicketService::Unknown15\n");
				resp->error_code = Unknown15();
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::es::IETicketService::Unknown16\n");
				resp->error_code = Unknown16();
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::es::IETicketService::Unknown17\n");
				resp->error_code = Unknown17();
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::es::IETicketService::Unknown18\n");
				resp->error_code = Unknown18();
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::es::IETicketService::Unknown19\n");
				resp->error_code = Unknown19();
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::es::IETicketService::Unknown20\n");
				resp->error_code = Unknown20();
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::es::IETicketService::Unknown21\n");
				resp->error_code = Unknown21();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::es::IETicketService", req->cmd_id);
			}
		}
		uint32_t Unknown1();
		uint32_t Unknown10(uint32_t& _0);
		uint32_t Unknown11(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown12(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown13();
		uint32_t Unknown14();
		uint32_t Unknown15();
		uint32_t Unknown16();
		uint32_t Unknown17();
		uint32_t Unknown18();
		uint32_t Unknown19();
		uint32_t Unknown2(uint8_t * _0, unsigned int _0_size);
		uint32_t Unknown20();
		uint32_t Unknown21();
		uint32_t Unknown3(uint8_t * _0, unsigned int _0_size);
		uint32_t Unknown4(uint32_t _0);
		uint32_t Unknown5();
		uint32_t Unknown6();
		uint32_t Unknown7(uint8_t * _0, unsigned int _0_size);
		uint32_t Unknown8();
		uint32_t Unknown9(uint32_t& _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::es::IETicketService::Unknown1() {
	ns_print("Stub implementation for nn::es::IETicketService::Unknown1\n");
	return 0;
}
uint32_t nn::es::IETicketService::Unknown10(uint32_t& _0) {
	ns_print("Stub implementation for nn::es::IETicketService::Unknown10\n");
	return 0;
}
uint32_t nn::es::IETicketService::Unknown11(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::es::IETicketService::Unknown11\n");
	return 0;
}
uint32_t nn::es::IETicketService::Unknown12(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::es::IETicketService::Unknown12\n");
	return 0;
}
uint32_t nn::es::IETicketService::Unknown13() {
	ns_print("Stub implementation for nn::es::IETicketService::Unknown13\n");
	return 0;
}
uint32_t nn::es::IETicketService::Unknown14() {
	ns_print("Stub implementation for nn::es::IETicketService::Unknown14\n");
	return 0;
}
uint32_t nn::es::IETicketService::Unknown15() {
	ns_print("Stub implementation for nn::es::IETicketService::Unknown15\n");
	return 0;
}
uint32_t nn::es::IETicketService::Unknown16() {
	ns_print("Stub implementation for nn::es::IETicketService::Unknown16\n");
	return 0;
}
uint32_t nn::es::IETicketService::Unknown17() {
	ns_print("Stub implementation for nn::es::IETicketService::Unknown17\n");
	return 0;
}
uint32_t nn::es::IETicketService::Unknown18() {
	ns_print("Stub implementation for nn::es::IETicketService::Unknown18\n");
	return 0;
}
uint32_t nn::es::IETicketService::Unknown19() {
	ns_print("Stub implementation for nn::es::IETicketService::Unknown19\n");
	return 0;
}
uint32_t nn::es::IETicketService::Unknown2(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::es::IETicketService::Unknown2\n");
	return 0;
}
uint32_t nn::es::IETicketService::Unknown20() {
	ns_print("Stub implementation for nn::es::IETicketService::Unknown20\n");
	return 0;
}
uint32_t nn::es::IETicketService::Unknown21() {
	ns_print("Stub implementation for nn::es::IETicketService::Unknown21\n");
	return 0;
}
uint32_t nn::es::IETicketService::Unknown3(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::es::IETicketService::Unknown3\n");
	return 0;
}
uint32_t nn::es::IETicketService::Unknown4(uint32_t _0) {
	ns_print("Stub implementation for nn::es::IETicketService::Unknown4\n");
	return 0;
}
uint32_t nn::es::IETicketService::Unknown5() {
	ns_print("Stub implementation for nn::es::IETicketService::Unknown5\n");
	return 0;
}
uint32_t nn::es::IETicketService::Unknown6() {
	ns_print("Stub implementation for nn::es::IETicketService::Unknown6\n");
	return 0;
}
uint32_t nn::es::IETicketService::Unknown7(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::es::IETicketService::Unknown7\n");
	return 0;
}
uint32_t nn::es::IETicketService::Unknown8() {
	ns_print("Stub implementation for nn::es::IETicketService::Unknown8\n");
	return 0;
}
uint32_t nn::es::IETicketService::Unknown9(uint32_t& _0) {
	ns_print("Stub implementation for nn::es::IETicketService::Unknown9\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::eth::sf {
	class IEthInterface : public IpcService {
	public:
		IEthInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::eth::sf::IEthInterface::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::eth::sf::IEthInterface::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::eth::sf::IEthInterface::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::eth::sf::IEthInterface::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::eth::sf::IEthInterface::Unknown4: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown4(req->GetData<uint32_t>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::eth::sf::IEthInterface::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::eth::sf::IEthInterface", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4(uint32_t _0);
		uint32_t Unknown5();
	};
	class IEthInterfaceGroup : public IpcService {
	public:
		IEthInterfaceGroup() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::eth::sf::IEthInterfaceGroup::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::eth::sf::IEthInterfaceGroup::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::eth::sf::IEthInterfaceGroup::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::eth::sf::IEthInterfaceGroup::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::eth::sf::IEthInterfaceGroup::Unknown4\n");
				resp->error_code = Unknown4(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::eth::sf::IEthInterfaceGroup", req->cmd_id);
			}
		}
		uint32_t Unknown0(IpcService*& _0);
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4(uint32_t& _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::eth::sf::IEthInterface::Unknown0() {
	ns_print("Stub implementation for nn::eth::sf::IEthInterface::Unknown0\n");
	return 0;
}
uint32_t nn::eth::sf::IEthInterface::Unknown1() {
	ns_print("Stub implementation for nn::eth::sf::IEthInterface::Unknown1\n");
	return 0;
}
uint32_t nn::eth::sf::IEthInterface::Unknown2() {
	ns_print("Stub implementation for nn::eth::sf::IEthInterface::Unknown2\n");
	return 0;
}
uint32_t nn::eth::sf::IEthInterface::Unknown3() {
	ns_print("Stub implementation for nn::eth::sf::IEthInterface::Unknown3\n");
	return 0;
}
uint32_t nn::eth::sf::IEthInterface::Unknown4(uint32_t _0) {
	ns_print("Stub implementation for nn::eth::sf::IEthInterface::Unknown4\n");
	return 0;
}
uint32_t nn::eth::sf::IEthInterface::Unknown5() {
	ns_print("Stub implementation for nn::eth::sf::IEthInterface::Unknown5\n");
	return 0;
}
uint32_t nn::eth::sf::IEthInterfaceGroup::Unknown0(IpcService*& _0) {
	ns_print("Stub implementation for nn::eth::sf::IEthInterfaceGroup::Unknown0\n");
	return 0;
}
uint32_t nn::eth::sf::IEthInterfaceGroup::Unknown1() {
	ns_print("Stub implementation for nn::eth::sf::IEthInterfaceGroup::Unknown1\n");
	return 0;
}
uint32_t nn::eth::sf::IEthInterfaceGroup::Unknown2() {
	ns_print("Stub implementation for nn::eth::sf::IEthInterfaceGroup::Unknown2\n");
	return 0;
}
uint32_t nn::eth::sf::IEthInterfaceGroup::Unknown3() {
	ns_print("Stub implementation for nn::eth::sf::IEthInterfaceGroup::Unknown3\n");
	return 0;
}
uint32_t nn::eth::sf::IEthInterfaceGroup::Unknown4(uint32_t& _0) {
	ns_print("Stub implementation for nn::eth::sf::IEthInterfaceGroup::Unknown4\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::eupld::sf {
	class IControl : public IpcService {
	public:
		IControl() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::eupld::sf::IControl::Unknown0: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown0(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::eupld::sf::IControl::Unknown1: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown1(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::eupld::sf::IControl::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::eupld::sf::IControl::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::eupld::sf::IControl", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint8_t * _0, unsigned int _0_size);
		uint32_t Unknown1(uint8_t * _0, unsigned int _0_size);
		uint32_t Unknown2();
		uint32_t Unknown3();
	};
	class IRequest : public IpcService {
	public:
		IRequest() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::eupld::sf::IRequest::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::eupld::sf::IRequest::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::eupld::sf::IRequest::Unknown2: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown2(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::eupld::sf::IRequest::Unknown3\n");
				resp->error_code = Unknown3(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::eupld::sf::IRequest::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::eupld::sf::IRequest::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::eupld::sf::IRequest", req->cmd_id);
			}
		}
		uint32_t Unknown0(IpcService*& _0);
		uint32_t Unknown1();
		uint32_t Unknown2(uint8_t * _0, unsigned int _0_size);
		uint32_t Unknown3(uint8_t *& _0, unsigned int _0_size);
		uint32_t Unknown4();
		uint32_t Unknown5();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::eupld::sf::IControl::Unknown0(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::eupld::sf::IControl::Unknown0\n");
	return 0;
}
uint32_t nn::eupld::sf::IControl::Unknown1(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::eupld::sf::IControl::Unknown1\n");
	return 0;
}
uint32_t nn::eupld::sf::IControl::Unknown2() {
	ns_print("Stub implementation for nn::eupld::sf::IControl::Unknown2\n");
	return 0;
}
uint32_t nn::eupld::sf::IControl::Unknown3() {
	ns_print("Stub implementation for nn::eupld::sf::IControl::Unknown3\n");
	return 0;
}
uint32_t nn::eupld::sf::IRequest::Unknown0(IpcService*& _0) {
	ns_print("Stub implementation for nn::eupld::sf::IRequest::Unknown0\n");
	return 0;
}
uint32_t nn::eupld::sf::IRequest::Unknown1() {
	ns_print("Stub implementation for nn::eupld::sf::IRequest::Unknown1\n");
	return 0;
}
uint32_t nn::eupld::sf::IRequest::Unknown2(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::eupld::sf::IRequest::Unknown2\n");
	return 0;
}
uint32_t nn::eupld::sf::IRequest::Unknown3(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::eupld::sf::IRequest::Unknown3\n");
	return 0;
}
uint32_t nn::eupld::sf::IRequest::Unknown4() {
	ns_print("Stub implementation for nn::eupld::sf::IRequest::Unknown4\n");
	return 0;
}
uint32_t nn::eupld::sf::IRequest::Unknown5() {
	ns_print("Stub implementation for nn::eupld::sf::IRequest::Unknown5\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::fan::detail {
	class IController : public IpcService {
	public:
		IController() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fan::detail::IController::Unknown0: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown0(req->GetData<uint32_t>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::fan::detail::IController::Unknown1: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown1(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::fan::detail::IController::Unknown2\n");
				resp->error_code = Unknown2(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fan::detail::IController::Unknown3: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown3(req->GetData<uint32_t>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::fan::detail::IController::Unknown4\n");
				resp->error_code = Unknown4(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fan::detail::IController::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fan::detail::IController::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::fan::detail::IController::Unknown7\n");
				resp->error_code = Unknown7(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::fan::detail::IController", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t _0);
		uint32_t Unknown1(uint32_t _0, uint32_t& _1);
		uint32_t Unknown2(uint32_t& _0);
		uint32_t Unknown3(uint32_t _0);
		uint32_t Unknown4(uint32_t& _0);
		uint32_t Unknown5();
		uint32_t Unknown6();
		uint32_t Unknown7(uint32_t& _0);
	};
	class IManager : public IpcService {
	public:
		IManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::fan::detail::IManager::Unknown0: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown0(req->GetData<uint32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::fan::detail::IManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t _0, IUnknown*& _1);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::fan::detail::IController::Unknown0(uint32_t _0) {
	ns_print("Stub implementation for nn::fan::detail::IController::Unknown0\n");
	return 0;
}
uint32_t nn::fan::detail::IController::Unknown1(uint32_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::fan::detail::IController::Unknown1\n");
	return 0;
}
uint32_t nn::fan::detail::IController::Unknown2(uint32_t& _0) {
	ns_print("Stub implementation for nn::fan::detail::IController::Unknown2\n");
	return 0;
}
uint32_t nn::fan::detail::IController::Unknown3(uint32_t _0) {
	ns_print("Stub implementation for nn::fan::detail::IController::Unknown3\n");
	return 0;
}
uint32_t nn::fan::detail::IController::Unknown4(uint32_t& _0) {
	ns_print("Stub implementation for nn::fan::detail::IController::Unknown4\n");
	return 0;
}
uint32_t nn::fan::detail::IController::Unknown5() {
	ns_print("Stub implementation for nn::fan::detail::IController::Unknown5\n");
	return 0;
}
uint32_t nn::fan::detail::IController::Unknown6() {
	ns_print("Stub implementation for nn::fan::detail::IController::Unknown6\n");
	return 0;
}
uint32_t nn::fan::detail::IController::Unknown7(uint32_t& _0) {
	ns_print("Stub implementation for nn::fan::detail::IController::Unknown7\n");
	return 0;
}
uint32_t nn::fan::detail::IManager::Unknown0(uint32_t _0, IUnknown*& _1) {
	ns_print("Stub implementation for nn::fan::detail::IManager::Unknown0\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::fatalsrv {
	class IPrivateService : public IpcService {
	public:
		IPrivateService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::fatalsrv::IPrivateService::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::fatalsrv::IPrivateService", req->cmd_id);
			}
		}
		uint32_t Unknown0(IpcService*& _0);
	};
	class IService : public IpcService {
	public:
		IService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fatalsrv::IService::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fatalsrv::IService::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fatalsrv::IService::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::fatalsrv::IService", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::fatalsrv::IPrivateService::Unknown0(IpcService*& _0) {
	ns_print("Stub implementation for nn::fatalsrv::IPrivateService::Unknown0\n");
	return 0;
}
uint32_t nn::fatalsrv::IService::Unknown0() {
	ns_print("Stub implementation for nn::fatalsrv::IService::Unknown0\n");
	return 0;
}
uint32_t nn::fatalsrv::IService::Unknown1() {
	ns_print("Stub implementation for nn::fatalsrv::IService::Unknown1\n");
	return 0;
}
uint32_t nn::fatalsrv::IService::Unknown2() {
	ns_print("Stub implementation for nn::fatalsrv::IService::Unknown2\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::fgm::sf {
	class IDebugger : public IpcService {
	public:
		IDebugger() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::fgm::sf::IDebugger::Initialize: uint64_t = 0x%%lx, KObject = 0x%x\n", req->GetData<uint64_t>(8), req->GetCopied(0));
				resp->error_code = Initialize(req->GetData<uint64_t>(8), IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 12);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::fgm::sf::IDebugger::Read\n");
				resp->error_code = Read(*resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), *resp->GetDataPointer<uint32_t *>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fgm::sf::IDebugger::Cancel\n");
				resp->error_code = Cancel();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::fgm::sf::IDebugger", req->cmd_id);
			}
		}
		uint32_t Cancel();
		uint32_t Initialize(uint64_t _0, IpcService* _1, IpcService*& _2);
		uint32_t Read(uint32_t& _0, uint32_t& _1, uint32_t& _2, uint8_t *& _3, unsigned int _3_size);
	};
	class IRequest : public IpcService {
	public:
		IRequest() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::fgm::sf::IRequest::Initialize: nn::fgm::Module = 0x%x, uint64_t = 0x%%lx\n", req->GetData<nn::fgm::Module>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Initialize(req->GetData<nn::fgm::Module>(8), req->GetData<uint64_t>(0x10), req->pid, temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fgm::sf::IRequest::Set: uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Set(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::fgm::sf::IRequest::Get\n");
				resp->error_code = Get(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fgm::sf::IRequest::Cancel\n");
				resp->error_code = Cancel();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::fgm::sf::IRequest", req->cmd_id);
			}
		}
		uint32_t Cancel();
		uint32_t Get(uint32_t& _0);
		uint32_t Initialize(nn::fgm::Module _0, uint64_t _1, uint64_t _2, IpcService*& _3);
		uint32_t Set(uint32_t _0, uint32_t _1);
	};
	class ISession : public IpcService {
	public:
		ISession() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::fgm::sf::IRequest* temp1;
				ns_print("IPC message to nn::fgm::sf::ISession::Initialize\n");
				resp->error_code = Initialize(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::fgm::sf::ISession", req->cmd_id);
			}
		}
		uint32_t Initialize(nn::fgm::sf::IRequest*& _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::fgm::sf::IDebugger::Cancel() {
	ns_print("Stub implementation for nn::fgm::sf::IDebugger::Cancel\n");
	return 0;
}
uint32_t nn::fgm::sf::IDebugger::Initialize(uint64_t _0, IpcService* _1, IpcService*& _2) {
	ns_print("Stub implementation for nn::fgm::sf::IDebugger::Initialize\n");
	return 0;
}
uint32_t nn::fgm::sf::IDebugger::Read(uint32_t& _0, uint32_t& _1, uint32_t& _2, uint8_t *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::fgm::sf::IDebugger::Read\n");
	return 0;
}
uint32_t nn::fgm::sf::IRequest::Cancel() {
	ns_print("Stub implementation for nn::fgm::sf::IRequest::Cancel\n");
	return 0;
}
uint32_t nn::fgm::sf::IRequest::Get(uint32_t& _0) {
	ns_print("Stub implementation for nn::fgm::sf::IRequest::Get\n");
	return 0;
}
uint32_t nn::fgm::sf::IRequest::Initialize(nn::fgm::Module _0, uint64_t _1, uint64_t _2, IpcService*& _3) {
	ns_print("Stub implementation for nn::fgm::sf::IRequest::Initialize\n");
	return 0;
}
uint32_t nn::fgm::sf::IRequest::Set(uint32_t _0, uint32_t _1) {
	ns_print("Stub implementation for nn::fgm::sf::IRequest::Set\n");
	return 0;
}
uint32_t nn::fgm::sf::ISession::Initialize(nn::fgm::sf::IRequest*& _0) {
	ns_print("Stub implementation for nn::fgm::sf::ISession::Initialize\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::friends::detail::ipc {
	class IFriendService : public IpcService {
	public:
		IFriendService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetCompletionEvent\n");
				resp->error_code = GetCompletionEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::Cancel\n");
				resp->error_code = Cancel();
				return 0;
			}
			case 10100: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::account::NetworkServiceAccountId* temp3 = (nn::account::NetworkServiceAccountId *) new uint8_t[temp2];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetFriendListIds: int32_t = 0x%x, nn::account::Uid = %s, nn::friends::detail::ipc::SizedFriendFilter = %s, uint64_t = 0x%%lx\n", req->GetData<int32_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x20), 0x10).c_str(), req->GetData<uint64_t>(0x30));
				resp->error_code = GetFriendListIds(req->GetData<int32_t>(8), req->GetData<nn::account::Uid>(0x10), req->GetData<nn::friends::detail::ipc::SizedFriendFilter>(0x20), req->GetData<uint64_t>(0x30), req->pid, *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 10101: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::friends::detail::FriendImpl* temp3 = (nn::friends::detail::FriendImpl *) new uint8_t[temp2];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetFriendList: int32_t = 0x%x, nn::account::Uid = %s, nn::friends::detail::ipc::SizedFriendFilter = %s, uint64_t = 0x%%lx\n", req->GetData<int32_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x20), 0x10).c_str(), req->GetData<uint64_t>(0x30));
				resp->error_code = GetFriendList(req->GetData<int32_t>(8), req->GetData<nn::account::Uid>(0x10), req->GetData<nn::friends::detail::ipc::SizedFriendFilter>(0x20), req->GetData<uint64_t>(0x30), req->pid, *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 10102: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				nn::account::NetworkServiceAccountId* temp3 = (nn::account::NetworkServiceAccountId *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				nn::friends::detail::FriendImpl* temp6 = (nn::friends::detail::FriendImpl *) new uint8_t[temp5];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::UpdateFriendInfo: nn::account::Uid = %s, uint64_t = 0x%%lx, nn::account::NetworkServiceAccountId *= buffer<0x%lx>\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<uint64_t>(0x18), temp2);
				resp->error_code = UpdateFriendInfo(req->GetData<nn::account::Uid>(8), req->GetData<uint64_t>(0x18), req->pid, temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 10110: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetFriendProfileImage: nn::account::Uid = %s, nn::account::NetworkServiceAccountId = 0x%%lx\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::account::NetworkServiceAccountId>(0x18));
				resp->error_code = GetFriendProfileImage(req->GetData<nn::account::Uid>(8), req->GetData<nn::account::NetworkServiceAccountId>(0x18), *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 10200: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::friends::InAppScreenName* temp3 = (nn::friends::InAppScreenName *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x19, 1, temp5);
				nn::friends::InAppScreenName* temp6 = (nn::friends::InAppScreenName *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::SendFriendRequestForApplication: nn::account::Uid = %s, nn::account::NetworkServiceAccountId = 0x%%lx, uint64_t = 0x%%lx, nn::friends::InAppScreenName *= buffer<0x%lx>, nn::friends::InAppScreenName *= buffer<0x%lx>\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::account::NetworkServiceAccountId>(0x18), req->GetData<uint64_t>(0x20), temp2, temp5);
				resp->error_code = SendFriendRequestForApplication(req->GetData<nn::account::Uid>(8), req->GetData<nn::account::NetworkServiceAccountId>(0x18), req->GetData<uint64_t>(0x20), req->pid, temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				return 0;
			}
			case 10211: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x19, 0, temp5);
				nn::friends::InAppScreenName* temp6 = (nn::friends::InAppScreenName *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				unsigned int temp8;
				auto temp7 = req->GetBuffer(0x19, 1, temp8);
				nn::friends::InAppScreenName* temp9 = (nn::friends::InAppScreenName *) new uint8_t[temp8];
				ARMv8::ReadBytes(temp7, (uint8_t *)temp9, temp8);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::AddFacedFriendRequestForApplication: nn::friends::FacedFriendRequestRegistrationKey = %s, nn::account::Nickname = %s, nn::account::Uid = %s, uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>, nn::friends::InAppScreenName *= buffer<0x%lx>, nn::friends::InAppScreenName *= buffer<0x%lx>\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x40).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x48), 0x21).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x70), 0x10).c_str(), req->GetData<uint64_t>(0x80), temp2, temp5, temp8);
				resp->error_code = AddFacedFriendRequestForApplication(req->GetDataPointer<nn::friends::FacedFriendRequestRegistrationKey>(8), req->GetDataPointer<nn::account::Nickname>(0x48), req->GetData<nn::account::Uid>(0x70), req->GetData<uint64_t>(0x80), req->pid, temp3, temp2, temp6, temp5, temp9, temp8);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				delete[] (uint8_t *) temp9;
				return 0;
			}
			case 10400: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::account::NetworkServiceAccountId* temp3 = (nn::account::NetworkServiceAccountId *) new uint8_t[temp2];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetBlockedUserListIds: int32_t = 0x%x, nn::account::Uid = %s\n", req->GetData<int32_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str());
				resp->error_code = GetBlockedUserListIds(req->GetData<int32_t>(8), req->GetData<nn::account::Uid>(0x10), *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 10500: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				nn::account::NetworkServiceAccountId* temp3 = (nn::account::NetworkServiceAccountId *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				nn::friends::detail::ProfileImpl* temp6 = (nn::friends::detail::ProfileImpl *) new uint8_t[temp5];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetProfileList: nn::account::Uid = %s, nn::account::NetworkServiceAccountId *= buffer<0x%lx>\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), temp2);
				resp->error_code = GetProfileList(req->GetData<nn::account::Uid>(8), temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 10600: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::DeclareOpenOnlinePlaySession: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = DeclareOpenOnlinePlaySession(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			case 10601: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::DeclareCloseOnlinePlaySession: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = DeclareCloseOnlinePlaySession(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			case 10610: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::friends::detail::UserPresenceImpl* temp3 = (nn::friends::detail::UserPresenceImpl *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::UpdateUserPresence: nn::account::Uid = %s, uint64_t = 0x%%lx, nn::friends::detail::UserPresenceImpl *= buffer<0x%lx>\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<uint64_t>(0x18), temp2);
				resp->error_code = UpdateUserPresence(req->GetData<nn::account::Uid>(8), req->GetData<uint64_t>(0x18), req->pid, temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 10700: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::friends::PlayHistoryRegistrationKey* temp3 = (nn::friends::PlayHistoryRegistrationKey *) new uint8_t[temp2];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetPlayHistoryRegistrationKey: bool = 0x%x, nn::account::Uid = %s\n", req->GetData<bool>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str());
				resp->error_code = GetPlayHistoryRegistrationKey(req->GetData<bool>(8), req->GetData<nn::account::Uid>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 10701: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::friends::PlayHistoryRegistrationKey* temp3 = (nn::friends::PlayHistoryRegistrationKey *) new uint8_t[temp2];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetPlayHistoryRegistrationKeyWithNetworkServiceAccountId: bool = 0x%x, nn::account::NetworkServiceAccountId = 0x%%lx\n", req->GetData<bool>(8), req->GetData<nn::account::NetworkServiceAccountId>(0x10));
				resp->error_code = GetPlayHistoryRegistrationKeyWithNetworkServiceAccountId(req->GetData<bool>(8), req->GetData<nn::account::NetworkServiceAccountId>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 10702: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::friends::PlayHistoryRegistrationKey* temp3 = (nn::friends::PlayHistoryRegistrationKey *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x19, 1, temp5);
				nn::friends::InAppScreenName* temp6 = (nn::friends::InAppScreenName *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				unsigned int temp8;
				auto temp7 = req->GetBuffer(0x19, 2, temp8);
				nn::friends::InAppScreenName* temp9 = (nn::friends::InAppScreenName *) new uint8_t[temp8];
				ARMv8::ReadBytes(temp7, (uint8_t *)temp9, temp8);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::AddPlayHistory: nn::account::Uid = %s, uint64_t = 0x%%lx, nn::friends::PlayHistoryRegistrationKey *= buffer<0x%lx>, nn::friends::InAppScreenName *= buffer<0x%lx>, nn::friends::InAppScreenName *= buffer<0x%lx>\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<uint64_t>(0x18), temp2, temp5, temp8);
				resp->error_code = AddPlayHistory(req->GetData<nn::account::Uid>(8), req->GetData<uint64_t>(0x18), req->pid, temp3, temp2, temp6, temp5, temp9, temp8);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				delete[] (uint8_t *) temp9;
				return 0;
			}
			case 11000: {
				resp->GenBuf(0, 0, 160);
				auto temp1 = resp->GetDataPointer<nn::friends::Url>(8);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetProfileImageUrl: nn::friends::Url = %s, int32_t = 0x%x\n", read_string(req->GetDataPointer<uint8_t *>(8), 0xa0).c_str(), req->GetData<int32_t>(0xa8));
				resp->error_code = GetProfileImageUrl(req->GetDataPointer<nn::friends::Url>(8), req->GetData<int32_t>(0xa8), temp1);
				return 0;
			}
			case 20100: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetFriendCount: nn::account::Uid = %s, nn::friends::detail::ipc::SizedFriendFilter = %s, uint64_t = 0x%%lx\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x18), 0x10).c_str(), req->GetData<uint64_t>(0x28));
				resp->error_code = GetFriendCount(req->GetData<nn::account::Uid>(8), req->GetData<nn::friends::detail::ipc::SizedFriendFilter>(0x18), req->GetData<uint64_t>(0x28), req->pid, *resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 20101: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetNewlyFriendCount: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetNewlyFriendCount(req->GetData<nn::account::Uid>(8), *resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 20102: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::friends::detail::FriendDetailedInfoImpl* temp3 = (nn::friends::detail::FriendDetailedInfoImpl *) new uint8_t[temp2];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetFriendDetailedInfo: nn::account::Uid = %s, nn::account::NetworkServiceAccountId = 0x%%lx\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::account::NetworkServiceAccountId>(0x18));
				resp->error_code = GetFriendDetailedInfo(req->GetData<nn::account::Uid>(8), req->GetData<nn::account::NetworkServiceAccountId>(0x18), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 20103: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::SyncFriendList: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = SyncFriendList(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			case 20104: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::RequestSyncFriendList: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = RequestSyncFriendList(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			case 20110: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::friends::detail::FriendSettingImpl* temp3 = (nn::friends::detail::FriendSettingImpl *) new uint8_t[temp2];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::LoadFriendSetting: nn::account::Uid = %s, nn::account::NetworkServiceAccountId = 0x%%lx\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::account::NetworkServiceAccountId>(0x18));
				resp->error_code = LoadFriendSetting(req->GetData<nn::account::Uid>(8), req->GetData<nn::account::NetworkServiceAccountId>(0x18), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 20200: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetReceivedFriendRequestCount: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetReceivedFriendRequestCount(req->GetData<nn::account::Uid>(8), *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<int32_t *>(0xc));
				return 0;
			}
			case 20201: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::friends::detail::FriendRequestImpl* temp3 = (nn::friends::detail::FriendRequestImpl *) new uint8_t[temp2];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetFriendRequestList: int32_t = 0x%x, int32_t = 0x%x, nn::account::Uid = %s\n", req->GetData<int32_t>(8), req->GetData<int32_t>(0xc), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str());
				resp->error_code = GetFriendRequestList(req->GetData<int32_t>(8), req->GetData<int32_t>(0xc), req->GetData<nn::account::Uid>(0x10), *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 20300: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::friends::detail::FriendCandidateImpl* temp3 = (nn::friends::detail::FriendCandidateImpl *) new uint8_t[temp2];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetFriendCandidateList: int32_t = 0x%x, nn::account::Uid = %s\n", req->GetData<int32_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str());
				resp->error_code = GetFriendCandidateList(req->GetData<int32_t>(8), req->GetData<nn::account::Uid>(0x10), *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 20301: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::friends::NintendoNetworkIdUserInfo* temp3 = (nn::friends::NintendoNetworkIdUserInfo *) new uint8_t[temp2];
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				nn::friends::detail::NintendoNetworkIdFriendImpl* temp6 = (nn::friends::detail::NintendoNetworkIdFriendImpl *) new uint8_t[temp5];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetNintendoNetworkIdInfo: int32_t = 0x%x, nn::account::Uid = %s\n", req->GetData<int32_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str());
				resp->error_code = GetNintendoNetworkIdInfo(req->GetData<int32_t>(8), req->GetData<nn::account::Uid>(0x10), *resp->GetDataPointer<int32_t *>(8), temp3, temp2, temp6, temp5);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 20400: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::friends::detail::BlockedUserImpl* temp3 = (nn::friends::detail::BlockedUserImpl *) new uint8_t[temp2];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetBlockedUserList: int32_t = 0x%x, nn::account::Uid = %s\n", req->GetData<int32_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str());
				resp->error_code = GetBlockedUserList(req->GetData<int32_t>(8), req->GetData<nn::account::Uid>(0x10), *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 20401: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::SyncBlockedUserList: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = SyncBlockedUserList(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			case 20500: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				nn::account::NetworkServiceAccountId* temp3 = (nn::account::NetworkServiceAccountId *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				nn::friends::detail::ProfileExtraImpl* temp6 = (nn::friends::detail::ProfileExtraImpl *) new uint8_t[temp5];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetProfileExtraList: nn::account::Uid = %s, nn::account::NetworkServiceAccountId *= buffer<0x%lx>\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), temp2);
				resp->error_code = GetProfileExtraList(req->GetData<nn::account::Uid>(8), temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 20501: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetRelationship: nn::account::Uid = %s, nn::account::NetworkServiceAccountId = 0x%%lx\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::account::NetworkServiceAccountId>(0x18));
				resp->error_code = GetRelationship(req->GetData<nn::account::Uid>(8), req->GetData<nn::account::NetworkServiceAccountId>(0x18), *resp->GetDataPointer<nn::friends::Relationship *>(8));
				return 0;
			}
			case 20600: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::friends::detail::UserPresenceViewImpl* temp3 = (nn::friends::detail::UserPresenceViewImpl *) new uint8_t[temp2];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetUserPresenceView: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetUserPresenceView(req->GetData<nn::account::Uid>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 20700: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::friends::detail::PlayHistoryImpl* temp3 = (nn::friends::detail::PlayHistoryImpl *) new uint8_t[temp2];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetPlayHistoryList: int32_t = 0x%x, nn::account::Uid = %s\n", req->GetData<int32_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str());
				resp->error_code = GetPlayHistoryList(req->GetData<int32_t>(8), req->GetData<nn::account::Uid>(0x10), *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 20701: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetPlayHistoryStatistics: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetPlayHistoryStatistics(req->GetData<nn::account::Uid>(8), *resp->GetDataPointer<nn::friends::PlayHistoryStatistics *>(8));
				return 0;
			}
			case 20800: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::friends::detail::UserSettingImpl* temp3 = (nn::friends::detail::UserSettingImpl *) new uint8_t[temp2];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::LoadUserSetting: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = LoadUserSetting(req->GetData<nn::account::Uid>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 20801: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::SyncUserSetting: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = SyncUserSetting(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			case 20900: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::RequestListSummaryOverlayNotification\n");
				resp->error_code = RequestListSummaryOverlayNotification();
				return 0;
			}
			case 21000: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::friends::ExternalApplicationCatalog* temp3 = (nn::friends::ExternalApplicationCatalog *) new uint8_t[temp2];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetExternalApplicationCatalog: nn::settings::LanguageCode = 0x%%lx, nn::friends::ExternalApplicationCatalogId = %s\n", req->GetData<nn::settings::LanguageCode>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str());
				resp->error_code = GetExternalApplicationCatalog(req->GetData<nn::settings::LanguageCode>(8), req->GetData<nn::friends::ExternalApplicationCatalogId>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 30100: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::DropFriendNewlyFlags: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = DropFriendNewlyFlags(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			case 30101: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::DeleteFriend: nn::account::Uid = %s, nn::account::NetworkServiceAccountId = 0x%%lx\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::account::NetworkServiceAccountId>(0x18));
				resp->error_code = DeleteFriend(req->GetData<nn::account::Uid>(8), req->GetData<nn::account::NetworkServiceAccountId>(0x18));
				return 0;
			}
			case 30110: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::DropFriendNewlyFlag: nn::account::Uid = %s, nn::account::NetworkServiceAccountId = 0x%%lx\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::account::NetworkServiceAccountId>(0x18));
				resp->error_code = DropFriendNewlyFlag(req->GetData<nn::account::Uid>(8), req->GetData<nn::account::NetworkServiceAccountId>(0x18));
				return 0;
			}
			case 30120: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::ChangeFriendFavoriteFlag: bool = 0x%x, nn::account::Uid = %s, nn::account::NetworkServiceAccountId = 0x%%lx\n", req->GetData<bool>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str(), req->GetData<nn::account::NetworkServiceAccountId>(0x20));
				resp->error_code = ChangeFriendFavoriteFlag(req->GetData<bool>(8), req->GetData<nn::account::Uid>(0x10), req->GetData<nn::account::NetworkServiceAccountId>(0x20));
				return 0;
			}
			case 30121: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::ChangeFriendOnlineNotificationFlag: bool = 0x%x, nn::account::Uid = %s, nn::account::NetworkServiceAccountId = 0x%%lx\n", req->GetData<bool>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str(), req->GetData<nn::account::NetworkServiceAccountId>(0x20));
				resp->error_code = ChangeFriendOnlineNotificationFlag(req->GetData<bool>(8), req->GetData<nn::account::Uid>(0x10), req->GetData<nn::account::NetworkServiceAccountId>(0x20));
				return 0;
			}
			case 30200: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::SendFriendRequest: int32_t = 0x%x, nn::account::Uid = %s, nn::account::NetworkServiceAccountId = 0x%%lx\n", req->GetData<int32_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str(), req->GetData<nn::account::NetworkServiceAccountId>(0x20));
				resp->error_code = SendFriendRequest(req->GetData<int32_t>(8), req->GetData<nn::account::Uid>(0x10), req->GetData<nn::account::NetworkServiceAccountId>(0x20));
				return 0;
			}
			case 30201: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::friends::InAppScreenName* temp3 = (nn::friends::InAppScreenName *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x19, 1, temp5);
				nn::friends::InAppScreenName* temp6 = (nn::friends::InAppScreenName *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::SendFriendRequestWithApplicationInfo: int32_t = 0x%x, nn::account::Uid = %s, nn::account::NetworkServiceAccountId = 0x%%lx, nn::friends::ApplicationInfo = %s, nn::friends::InAppScreenName *= buffer<0x%lx>, nn::friends::InAppScreenName *= buffer<0x%lx>\n", req->GetData<int32_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str(), req->GetData<nn::account::NetworkServiceAccountId>(0x20), read_string(req->GetDataPointer<uint8_t *>(0x28), 0x10).c_str(), temp2, temp5);
				resp->error_code = SendFriendRequestWithApplicationInfo(req->GetData<int32_t>(8), req->GetData<nn::account::Uid>(0x10), req->GetData<nn::account::NetworkServiceAccountId>(0x20), req->GetData<nn::friends::ApplicationInfo>(0x28), temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				return 0;
			}
			case 30202: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::CancelFriendRequest: nn::account::Uid = %s, nn::friends::RequestId = 0x%%lx\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::friends::RequestId>(0x18));
				resp->error_code = CancelFriendRequest(req->GetData<nn::account::Uid>(8), req->GetData<nn::friends::RequestId>(0x18));
				return 0;
			}
			case 30203: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::AcceptFriendRequest: nn::account::Uid = %s, nn::friends::RequestId = 0x%%lx\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::friends::RequestId>(0x18));
				resp->error_code = AcceptFriendRequest(req->GetData<nn::account::Uid>(8), req->GetData<nn::friends::RequestId>(0x18));
				return 0;
			}
			case 30204: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::RejectFriendRequest: nn::account::Uid = %s, nn::friends::RequestId = 0x%%lx\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::friends::RequestId>(0x18));
				resp->error_code = RejectFriendRequest(req->GetData<nn::account::Uid>(8), req->GetData<nn::friends::RequestId>(0x18));
				return 0;
			}
			case 30205: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::ReadFriendRequest: nn::account::Uid = %s, nn::friends::RequestId = 0x%%lx\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::friends::RequestId>(0x18));
				resp->error_code = ReadFriendRequest(req->GetData<nn::account::Uid>(8), req->GetData<nn::friends::RequestId>(0x18));
				return 0;
			}
			case 30210: {
				resp->GenBuf(0, 0, 64);
				auto temp1 = resp->GetDataPointer<nn::friends::FacedFriendRequestRegistrationKey>(8);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetFacedFriendRequestRegistrationKey: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetFacedFriendRequestRegistrationKey(req->GetData<nn::account::Uid>(8), temp1);
				return 0;
			}
			case 30211: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::AddFacedFriendRequest: nn::friends::FacedFriendRequestRegistrationKey = %s, nn::account::Nickname = %s, nn::account::Uid = %s, uint8_t *= buffer<0x%lx>\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x40).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x48), 0x21).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x70), 0x10).c_str(), temp2);
				resp->error_code = AddFacedFriendRequest(req->GetDataPointer<nn::friends::FacedFriendRequestRegistrationKey>(8), req->GetDataPointer<nn::account::Nickname>(0x48), req->GetData<nn::account::Uid>(0x70), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 30212: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::CancelFacedFriendRequest: nn::account::Uid = %s, nn::account::NetworkServiceAccountId = 0x%%lx\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::account::NetworkServiceAccountId>(0x18));
				resp->error_code = CancelFacedFriendRequest(req->GetData<nn::account::Uid>(8), req->GetData<nn::account::NetworkServiceAccountId>(0x18));
				return 0;
			}
			case 30213: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetFacedFriendRequestProfileImage: nn::account::Uid = %s, nn::account::NetworkServiceAccountId = 0x%%lx\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::account::NetworkServiceAccountId>(0x18));
				resp->error_code = GetFacedFriendRequestProfileImage(req->GetData<nn::account::Uid>(8), req->GetData<nn::account::NetworkServiceAccountId>(0x18), *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 30214: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetFacedFriendRequestProfileImageFromPath: int8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = GetFacedFriendRequestProfileImageFromPath(temp3, temp2, *resp->GetDataPointer<int32_t *>(8), temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 30215: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::friends::InAppScreenName* temp3 = (nn::friends::InAppScreenName *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x19, 1, temp5);
				nn::friends::InAppScreenName* temp6 = (nn::friends::InAppScreenName *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::SendFriendRequestWithExternalApplicationCatalogId: int32_t = 0x%x, nn::account::Uid = %s, nn::account::NetworkServiceAccountId = 0x%%lx, nn::friends::ExternalApplicationCatalogId = %s, nn::friends::InAppScreenName *= buffer<0x%lx>, nn::friends::InAppScreenName *= buffer<0x%lx>\n", req->GetData<int32_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str(), req->GetData<nn::account::NetworkServiceAccountId>(0x20), read_string(req->GetDataPointer<uint8_t *>(0x28), 0x10).c_str(), temp2, temp5);
				resp->error_code = SendFriendRequestWithExternalApplicationCatalogId(req->GetData<int32_t>(8), req->GetData<nn::account::Uid>(0x10), req->GetData<nn::account::NetworkServiceAccountId>(0x20), req->GetData<nn::friends::ExternalApplicationCatalogId>(0x28), temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				return 0;
			}
			case 30216: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::ResendFacedFriendRequest: nn::account::Uid = %s, nn::account::NetworkServiceAccountId = 0x%%lx\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::account::NetworkServiceAccountId>(0x18));
				resp->error_code = ResendFacedFriendRequest(req->GetData<nn::account::Uid>(8), req->GetData<nn::account::NetworkServiceAccountId>(0x18));
				return 0;
			}
			case 30217: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::SendFriendRequestWithNintendoNetworkIdInfo: nn::friends::MiiName = %s, nn::friends::MiiImageUrlParam = %s, nn::friends::MiiName = %s, nn::friends::MiiImageUrlParam = %s, int32_t = 0x%x, nn::account::Uid = %s, nn::account::NetworkServiceAccountId = 0x%%lx\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x20).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x28), 0x10).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x38), 0x20).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x58), 0x10).c_str(), req->GetData<int32_t>(0x68), read_string(req->GetDataPointer<uint8_t *>(0x70), 0x10).c_str(), req->GetData<nn::account::NetworkServiceAccountId>(0x80));
				resp->error_code = SendFriendRequestWithNintendoNetworkIdInfo(req->GetDataPointer<nn::friends::MiiName>(8), req->GetData<nn::friends::MiiImageUrlParam>(0x28), req->GetDataPointer<nn::friends::MiiName>(0x38), req->GetData<nn::friends::MiiImageUrlParam>(0x58), req->GetData<int32_t>(0x68), req->GetData<nn::account::Uid>(0x70), req->GetData<nn::account::NetworkServiceAccountId>(0x80));
				return 0;
			}
			case 30400: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::BlockUser: int32_t = 0x%x, nn::account::Uid = %s, nn::account::NetworkServiceAccountId = 0x%%lx\n", req->GetData<int32_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str(), req->GetData<nn::account::NetworkServiceAccountId>(0x20));
				resp->error_code = BlockUser(req->GetData<int32_t>(8), req->GetData<nn::account::Uid>(0x10), req->GetData<nn::account::NetworkServiceAccountId>(0x20));
				return 0;
			}
			case 30401: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::friends::InAppScreenName* temp3 = (nn::friends::InAppScreenName *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::BlockUserWithApplicationInfo: int32_t = 0x%x, nn::account::Uid = %s, nn::account::NetworkServiceAccountId = 0x%%lx, nn::friends::ApplicationInfo = %s, nn::friends::InAppScreenName *= buffer<0x%lx>\n", req->GetData<int32_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str(), req->GetData<nn::account::NetworkServiceAccountId>(0x20), read_string(req->GetDataPointer<uint8_t *>(0x28), 0x10).c_str(), temp2);
				resp->error_code = BlockUserWithApplicationInfo(req->GetData<int32_t>(8), req->GetData<nn::account::Uid>(0x10), req->GetData<nn::account::NetworkServiceAccountId>(0x20), req->GetData<nn::friends::ApplicationInfo>(0x28), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 30402: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::UnblockUser: nn::account::Uid = %s, nn::account::NetworkServiceAccountId = 0x%%lx\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::account::NetworkServiceAccountId>(0x18));
				resp->error_code = UnblockUser(req->GetData<nn::account::Uid>(8), req->GetData<nn::account::NetworkServiceAccountId>(0x18));
				return 0;
			}
			case 30500: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::friends::detail::ProfileExtraImpl* temp3 = (nn::friends::detail::ProfileExtraImpl *) new uint8_t[temp2];
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::GetProfileExtraFromFriendCode: nn::friends::FriendCode = %s, nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x20).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x28), 0x10).c_str());
				resp->error_code = GetProfileExtraFromFriendCode(req->GetDataPointer<nn::friends::FriendCode>(8), req->GetData<nn::account::Uid>(0x28), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 30700: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::DeletePlayHistory: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = DeletePlayHistory(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			case 30810: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::ChangePresencePermission: int32_t = 0x%x, nn::account::Uid = %s\n", req->GetData<int32_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str());
				resp->error_code = ChangePresencePermission(req->GetData<int32_t>(8), req->GetData<nn::account::Uid>(0x10));
				return 0;
			}
			case 30811: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::ChangeFriendRequestReception: bool = 0x%x, nn::account::Uid = %s\n", req->GetData<bool>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str());
				resp->error_code = ChangeFriendRequestReception(req->GetData<bool>(8), req->GetData<nn::account::Uid>(0x10));
				return 0;
			}
			case 30812: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::ChangePlayLogPermission: int32_t = 0x%x, nn::account::Uid = %s\n", req->GetData<int32_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str());
				resp->error_code = ChangePlayLogPermission(req->GetData<int32_t>(8), req->GetData<nn::account::Uid>(0x10));
				return 0;
			}
			case 30820: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::IssueFriendCode: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = IssueFriendCode(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			case 30830: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::ClearPlayLog: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = ClearPlayLog(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			case 49900: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::IFriendService::DeleteNetworkServiceAccountCache: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = DeleteNetworkServiceAccountCache(req->GetData<nn::account::Uid>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::friends::detail::ipc::IFriendService", req->cmd_id);
			}
		}
		uint32_t AcceptFriendRequest(nn::account::Uid _0, nn::friends::RequestId _1);
		uint32_t AddFacedFriendRequest(nn::friends::FacedFriendRequestRegistrationKey _0, nn::account::Nickname _1, nn::account::Uid _2, uint8_t * _3, unsigned int _3_size);
		uint32_t AddFacedFriendRequestForApplication(nn::friends::FacedFriendRequestRegistrationKey _0, nn::account::Nickname _1, nn::account::Uid _2, uint64_t _3, uint64_t _4, uint8_t * _5, unsigned int _5_size, nn::friends::InAppScreenName * _6, unsigned int _6_size, nn::friends::InAppScreenName * _7, unsigned int _7_size);
		uint32_t AddPlayHistory(nn::account::Uid _0, uint64_t _1, uint64_t _2, nn::friends::PlayHistoryRegistrationKey * _3, unsigned int _3_size, nn::friends::InAppScreenName * _4, unsigned int _4_size, nn::friends::InAppScreenName * _5, unsigned int _5_size);
		uint32_t BlockUser(int32_t _0, nn::account::Uid _1, nn::account::NetworkServiceAccountId _2);
		uint32_t BlockUserWithApplicationInfo(int32_t _0, nn::account::Uid _1, nn::account::NetworkServiceAccountId _2, nn::friends::ApplicationInfo _3, nn::friends::InAppScreenName * _4, unsigned int _4_size);
		uint32_t Cancel();
		uint32_t CancelFacedFriendRequest(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1);
		uint32_t CancelFriendRequest(nn::account::Uid _0, nn::friends::RequestId _1);
		uint32_t ChangeFriendFavoriteFlag(bool _0, nn::account::Uid _1, nn::account::NetworkServiceAccountId _2);
		uint32_t ChangeFriendOnlineNotificationFlag(bool _0, nn::account::Uid _1, nn::account::NetworkServiceAccountId _2);
		uint32_t ChangeFriendRequestReception(bool _0, nn::account::Uid _1);
		uint32_t ChangePlayLogPermission(int32_t _0, nn::account::Uid _1);
		uint32_t ChangePresencePermission(int32_t _0, nn::account::Uid _1);
		uint32_t ClearPlayLog(nn::account::Uid _0);
		uint32_t DeclareCloseOnlinePlaySession(nn::account::Uid _0);
		uint32_t DeclareOpenOnlinePlaySession(nn::account::Uid _0);
		uint32_t DeleteFriend(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1);
		uint32_t DeleteNetworkServiceAccountCache(nn::account::Uid _0);
		uint32_t DeletePlayHistory(nn::account::Uid _0);
		uint32_t DropFriendNewlyFlag(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1);
		uint32_t DropFriendNewlyFlags(nn::account::Uid _0);
		uint32_t GetBlockedUserList(int32_t _0, nn::account::Uid _1, int32_t& _2, nn::friends::detail::BlockedUserImpl *& _3, unsigned int _3_size);
		uint32_t GetBlockedUserListIds(int32_t _0, nn::account::Uid _1, int32_t& _2, nn::account::NetworkServiceAccountId *& _3, unsigned int _3_size);
		uint32_t GetCompletionEvent(IpcService*& _0);
		uint32_t GetExternalApplicationCatalog(nn::settings::LanguageCode _0, nn::friends::ExternalApplicationCatalogId _1, nn::friends::ExternalApplicationCatalog *& _2, unsigned int _2_size);
		uint32_t GetFacedFriendRequestProfileImage(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1, int32_t& _2, uint8_t *& _3, unsigned int _3_size);
		uint32_t GetFacedFriendRequestProfileImageFromPath(int8_t * _0, unsigned int _0_size, int32_t& _1, uint8_t *& _2, unsigned int _2_size);
		uint32_t GetFacedFriendRequestRegistrationKey(nn::account::Uid _0, nn::friends::FacedFriendRequestRegistrationKey& _1);
		uint32_t GetFriendCandidateList(int32_t _0, nn::account::Uid _1, int32_t& _2, nn::friends::detail::FriendCandidateImpl *& _3, unsigned int _3_size);
		uint32_t GetFriendCount(nn::account::Uid _0, nn::friends::detail::ipc::SizedFriendFilter _1, uint64_t _2, uint64_t _3, int32_t& _4);
		uint32_t GetFriendDetailedInfo(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1, nn::friends::detail::FriendDetailedInfoImpl *& _2, unsigned int _2_size);
		uint32_t GetFriendList(int32_t _0, nn::account::Uid _1, nn::friends::detail::ipc::SizedFriendFilter _2, uint64_t _3, uint64_t _4, int32_t& _5, nn::friends::detail::FriendImpl *& _6, unsigned int _6_size);
		uint32_t GetFriendListIds(int32_t _0, nn::account::Uid _1, nn::friends::detail::ipc::SizedFriendFilter _2, uint64_t _3, uint64_t _4, int32_t& _5, nn::account::NetworkServiceAccountId *& _6, unsigned int _6_size);
		uint32_t GetFriendProfileImage(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1, int32_t& _2, uint8_t *& _3, unsigned int _3_size);
		uint32_t GetFriendRequestList(int32_t _0, int32_t _1, nn::account::Uid _2, int32_t& _3, nn::friends::detail::FriendRequestImpl *& _4, unsigned int _4_size);
		uint32_t GetNewlyFriendCount(nn::account::Uid _0, int32_t& _1);
		uint32_t GetNintendoNetworkIdInfo(int32_t _0, nn::account::Uid _1, int32_t& _2, nn::friends::NintendoNetworkIdUserInfo *& _3, unsigned int _3_size, nn::friends::detail::NintendoNetworkIdFriendImpl *& _4, unsigned int _4_size);
		uint32_t GetPlayHistoryList(int32_t _0, nn::account::Uid _1, int32_t& _2, nn::friends::detail::PlayHistoryImpl *& _3, unsigned int _3_size);
		uint32_t GetPlayHistoryRegistrationKey(bool _0, nn::account::Uid _1, nn::friends::PlayHistoryRegistrationKey *& _2, unsigned int _2_size);
		uint32_t GetPlayHistoryRegistrationKeyWithNetworkServiceAccountId(bool _0, nn::account::NetworkServiceAccountId _1, nn::friends::PlayHistoryRegistrationKey *& _2, unsigned int _2_size);
		uint32_t GetPlayHistoryStatistics(nn::account::Uid _0, nn::friends::PlayHistoryStatistics& _1);
		uint32_t GetProfileExtraFromFriendCode(nn::friends::FriendCode _0, nn::account::Uid _1, nn::friends::detail::ProfileExtraImpl *& _2, unsigned int _2_size);
		uint32_t GetProfileExtraList(nn::account::Uid _0, nn::account::NetworkServiceAccountId * _1, unsigned int _1_size, nn::friends::detail::ProfileExtraImpl *& _2, unsigned int _2_size);
		uint32_t GetProfileImageUrl(nn::friends::Url _0, int32_t _1, nn::friends::Url& _2);
		uint32_t GetProfileList(nn::account::Uid _0, nn::account::NetworkServiceAccountId * _1, unsigned int _1_size, nn::friends::detail::ProfileImpl *& _2, unsigned int _2_size);
		uint32_t GetReceivedFriendRequestCount(nn::account::Uid _0, int32_t& _1, int32_t& _2);
		uint32_t GetRelationship(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1, nn::friends::Relationship& _2);
		uint32_t GetUserPresenceView(nn::account::Uid _0, nn::friends::detail::UserPresenceViewImpl *& _1, unsigned int _1_size);
		uint32_t IssueFriendCode(nn::account::Uid _0);
		uint32_t LoadFriendSetting(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1, nn::friends::detail::FriendSettingImpl *& _2, unsigned int _2_size);
		uint32_t LoadUserSetting(nn::account::Uid _0, nn::friends::detail::UserSettingImpl *& _1, unsigned int _1_size);
		uint32_t ReadFriendRequest(nn::account::Uid _0, nn::friends::RequestId _1);
		uint32_t RejectFriendRequest(nn::account::Uid _0, nn::friends::RequestId _1);
		uint32_t RequestListSummaryOverlayNotification();
		uint32_t RequestSyncFriendList(nn::account::Uid _0);
		uint32_t ResendFacedFriendRequest(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1);
		uint32_t SendFriendRequest(int32_t _0, nn::account::Uid _1, nn::account::NetworkServiceAccountId _2);
		uint32_t SendFriendRequestForApplication(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1, uint64_t _2, uint64_t _3, nn::friends::InAppScreenName * _4, unsigned int _4_size, nn::friends::InAppScreenName * _5, unsigned int _5_size);
		uint32_t SendFriendRequestWithApplicationInfo(int32_t _0, nn::account::Uid _1, nn::account::NetworkServiceAccountId _2, nn::friends::ApplicationInfo _3, nn::friends::InAppScreenName * _4, unsigned int _4_size, nn::friends::InAppScreenName * _5, unsigned int _5_size);
		uint32_t SendFriendRequestWithExternalApplicationCatalogId(int32_t _0, nn::account::Uid _1, nn::account::NetworkServiceAccountId _2, nn::friends::ExternalApplicationCatalogId _3, nn::friends::InAppScreenName * _4, unsigned int _4_size, nn::friends::InAppScreenName * _5, unsigned int _5_size);
		uint32_t SendFriendRequestWithNintendoNetworkIdInfo(nn::friends::MiiName _0, nn::friends::MiiImageUrlParam _1, nn::friends::MiiName _2, nn::friends::MiiImageUrlParam _3, int32_t _4, nn::account::Uid _5, nn::account::NetworkServiceAccountId _6);
		uint32_t SyncBlockedUserList(nn::account::Uid _0);
		uint32_t SyncFriendList(nn::account::Uid _0);
		uint32_t SyncUserSetting(nn::account::Uid _0);
		uint32_t UnblockUser(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1);
		uint32_t UpdateFriendInfo(nn::account::Uid _0, uint64_t _1, uint64_t _2, nn::account::NetworkServiceAccountId * _3, unsigned int _3_size, nn::friends::detail::FriendImpl *& _4, unsigned int _4_size);
		uint32_t UpdateUserPresence(nn::account::Uid _0, uint64_t _1, uint64_t _2, nn::friends::detail::UserPresenceImpl * _3, unsigned int _3_size);
	};
	class INotificationService : public IpcService {
	public:
		INotificationService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::friends::detail::ipc::INotificationService::GetEvent\n");
				resp->error_code = GetEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::friends::detail::ipc::INotificationService::Clear\n");
				resp->error_code = Clear();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::friends::detail::ipc::INotificationService::Pop\n");
				resp->error_code = Pop(*resp->GetDataPointer<nn::friends::detail::ipc::SizedNotificationInfo *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::friends::detail::ipc::INotificationService", req->cmd_id);
			}
		}
		uint32_t Clear();
		uint32_t GetEvent(IpcService*& _0);
		uint32_t Pop(nn::friends::detail::ipc::SizedNotificationInfo& _0);
	};
	class IServiceCreator : public IpcService {
	public:
		IServiceCreator() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::friends::detail::ipc::IFriendService* temp1;
				ns_print("IPC message to nn::friends::detail::ipc::IServiceCreator::CreateFriendService\n");
				resp->error_code = CreateFriendService(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(1, 0, 0);
				nn::friends::detail::ipc::INotificationService* temp1;
				ns_print("IPC message to nn::friends::detail::ipc::IServiceCreator::CreateNotificationService: nn::account::Uid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = CreateNotificationService(req->GetData<nn::account::Uid>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::friends::detail::ipc::IServiceCreator", req->cmd_id);
			}
		}
		uint32_t CreateFriendService(nn::friends::detail::ipc::IFriendService*& _0);
		uint32_t CreateNotificationService(nn::account::Uid _0, nn::friends::detail::ipc::INotificationService*& _1);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::friends::detail::ipc::IFriendService::AcceptFriendRequest(nn::account::Uid _0, nn::friends::RequestId _1) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::AcceptFriendRequest\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::AddFacedFriendRequest(nn::friends::FacedFriendRequestRegistrationKey _0, nn::account::Nickname _1, nn::account::Uid _2, uint8_t * _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::AddFacedFriendRequest\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::AddFacedFriendRequestForApplication(nn::friends::FacedFriendRequestRegistrationKey _0, nn::account::Nickname _1, nn::account::Uid _2, uint64_t _3, uint64_t _4, uint8_t * _5, unsigned int _5_size, nn::friends::InAppScreenName * _6, unsigned int _6_size, nn::friends::InAppScreenName * _7, unsigned int _7_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::AddFacedFriendRequestForApplication\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::AddPlayHistory(nn::account::Uid _0, uint64_t _1, uint64_t _2, nn::friends::PlayHistoryRegistrationKey * _3, unsigned int _3_size, nn::friends::InAppScreenName * _4, unsigned int _4_size, nn::friends::InAppScreenName * _5, unsigned int _5_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::AddPlayHistory\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::BlockUser(int32_t _0, nn::account::Uid _1, nn::account::NetworkServiceAccountId _2) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::BlockUser\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::BlockUserWithApplicationInfo(int32_t _0, nn::account::Uid _1, nn::account::NetworkServiceAccountId _2, nn::friends::ApplicationInfo _3, nn::friends::InAppScreenName * _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::BlockUserWithApplicationInfo\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::Cancel() {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::Cancel\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::CancelFacedFriendRequest(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::CancelFacedFriendRequest\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::CancelFriendRequest(nn::account::Uid _0, nn::friends::RequestId _1) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::CancelFriendRequest\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::ChangeFriendFavoriteFlag(bool _0, nn::account::Uid _1, nn::account::NetworkServiceAccountId _2) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::ChangeFriendFavoriteFlag\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::ChangeFriendOnlineNotificationFlag(bool _0, nn::account::Uid _1, nn::account::NetworkServiceAccountId _2) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::ChangeFriendOnlineNotificationFlag\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::ChangeFriendRequestReception(bool _0, nn::account::Uid _1) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::ChangeFriendRequestReception\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::ChangePlayLogPermission(int32_t _0, nn::account::Uid _1) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::ChangePlayLogPermission\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::ChangePresencePermission(int32_t _0, nn::account::Uid _1) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::ChangePresencePermission\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::ClearPlayLog(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::ClearPlayLog\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::DeclareCloseOnlinePlaySession(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::DeclareCloseOnlinePlaySession\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::DeclareOpenOnlinePlaySession(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::DeclareOpenOnlinePlaySession\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::DeleteFriend(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::DeleteFriend\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::DeleteNetworkServiceAccountCache(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::DeleteNetworkServiceAccountCache\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::DeletePlayHistory(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::DeletePlayHistory\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::DropFriendNewlyFlag(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::DropFriendNewlyFlag\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::DropFriendNewlyFlags(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::DropFriendNewlyFlags\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetBlockedUserList(int32_t _0, nn::account::Uid _1, int32_t& _2, nn::friends::detail::BlockedUserImpl *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetBlockedUserList\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetBlockedUserListIds(int32_t _0, nn::account::Uid _1, int32_t& _2, nn::account::NetworkServiceAccountId *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetBlockedUserListIds\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetCompletionEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetCompletionEvent\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetExternalApplicationCatalog(nn::settings::LanguageCode _0, nn::friends::ExternalApplicationCatalogId _1, nn::friends::ExternalApplicationCatalog *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetExternalApplicationCatalog\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetFacedFriendRequestProfileImage(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1, int32_t& _2, uint8_t *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetFacedFriendRequestProfileImage\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetFacedFriendRequestProfileImageFromPath(int8_t * _0, unsigned int _0_size, int32_t& _1, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetFacedFriendRequestProfileImageFromPath\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetFacedFriendRequestRegistrationKey(nn::account::Uid _0, nn::friends::FacedFriendRequestRegistrationKey& _1) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetFacedFriendRequestRegistrationKey\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetFriendCandidateList(int32_t _0, nn::account::Uid _1, int32_t& _2, nn::friends::detail::FriendCandidateImpl *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetFriendCandidateList\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetFriendCount(nn::account::Uid _0, nn::friends::detail::ipc::SizedFriendFilter _1, uint64_t _2, uint64_t _3, int32_t& _4) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetFriendCount\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetFriendDetailedInfo(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1, nn::friends::detail::FriendDetailedInfoImpl *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetFriendDetailedInfo\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetFriendList(int32_t _0, nn::account::Uid _1, nn::friends::detail::ipc::SizedFriendFilter _2, uint64_t _3, uint64_t _4, int32_t& _5, nn::friends::detail::FriendImpl *& _6, unsigned int _6_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetFriendList\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetFriendListIds(int32_t _0, nn::account::Uid _1, nn::friends::detail::ipc::SizedFriendFilter _2, uint64_t _3, uint64_t _4, int32_t& _5, nn::account::NetworkServiceAccountId *& _6, unsigned int _6_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetFriendListIds\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetFriendProfileImage(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1, int32_t& _2, uint8_t *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetFriendProfileImage\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetFriendRequestList(int32_t _0, int32_t _1, nn::account::Uid _2, int32_t& _3, nn::friends::detail::FriendRequestImpl *& _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetFriendRequestList\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetNewlyFriendCount(nn::account::Uid _0, int32_t& _1) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetNewlyFriendCount\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetNintendoNetworkIdInfo(int32_t _0, nn::account::Uid _1, int32_t& _2, nn::friends::NintendoNetworkIdUserInfo *& _3, unsigned int _3_size, nn::friends::detail::NintendoNetworkIdFriendImpl *& _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetNintendoNetworkIdInfo\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetPlayHistoryList(int32_t _0, nn::account::Uid _1, int32_t& _2, nn::friends::detail::PlayHistoryImpl *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetPlayHistoryList\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetPlayHistoryRegistrationKey(bool _0, nn::account::Uid _1, nn::friends::PlayHistoryRegistrationKey *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetPlayHistoryRegistrationKey\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetPlayHistoryRegistrationKeyWithNetworkServiceAccountId(bool _0, nn::account::NetworkServiceAccountId _1, nn::friends::PlayHistoryRegistrationKey *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetPlayHistoryRegistrationKeyWithNetworkServiceAccountId\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetPlayHistoryStatistics(nn::account::Uid _0, nn::friends::PlayHistoryStatistics& _1) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetPlayHistoryStatistics\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetProfileExtraFromFriendCode(nn::friends::FriendCode _0, nn::account::Uid _1, nn::friends::detail::ProfileExtraImpl *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetProfileExtraFromFriendCode\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetProfileExtraList(nn::account::Uid _0, nn::account::NetworkServiceAccountId * _1, unsigned int _1_size, nn::friends::detail::ProfileExtraImpl *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetProfileExtraList\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetProfileImageUrl(nn::friends::Url _0, int32_t _1, nn::friends::Url& _2) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetProfileImageUrl\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetProfileList(nn::account::Uid _0, nn::account::NetworkServiceAccountId * _1, unsigned int _1_size, nn::friends::detail::ProfileImpl *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetProfileList\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetReceivedFriendRequestCount(nn::account::Uid _0, int32_t& _1, int32_t& _2) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetReceivedFriendRequestCount\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetRelationship(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1, nn::friends::Relationship& _2) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetRelationship\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::GetUserPresenceView(nn::account::Uid _0, nn::friends::detail::UserPresenceViewImpl *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::GetUserPresenceView\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::IssueFriendCode(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::IssueFriendCode\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::LoadFriendSetting(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1, nn::friends::detail::FriendSettingImpl *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::LoadFriendSetting\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::LoadUserSetting(nn::account::Uid _0, nn::friends::detail::UserSettingImpl *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::LoadUserSetting\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::ReadFriendRequest(nn::account::Uid _0, nn::friends::RequestId _1) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::ReadFriendRequest\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::RejectFriendRequest(nn::account::Uid _0, nn::friends::RequestId _1) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::RejectFriendRequest\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::RequestListSummaryOverlayNotification() {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::RequestListSummaryOverlayNotification\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::RequestSyncFriendList(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::RequestSyncFriendList\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::ResendFacedFriendRequest(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::ResendFacedFriendRequest\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::SendFriendRequest(int32_t _0, nn::account::Uid _1, nn::account::NetworkServiceAccountId _2) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::SendFriendRequest\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::SendFriendRequestForApplication(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1, uint64_t _2, uint64_t _3, nn::friends::InAppScreenName * _4, unsigned int _4_size, nn::friends::InAppScreenName * _5, unsigned int _5_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::SendFriendRequestForApplication\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::SendFriendRequestWithApplicationInfo(int32_t _0, nn::account::Uid _1, nn::account::NetworkServiceAccountId _2, nn::friends::ApplicationInfo _3, nn::friends::InAppScreenName * _4, unsigned int _4_size, nn::friends::InAppScreenName * _5, unsigned int _5_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::SendFriendRequestWithApplicationInfo\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::SendFriendRequestWithExternalApplicationCatalogId(int32_t _0, nn::account::Uid _1, nn::account::NetworkServiceAccountId _2, nn::friends::ExternalApplicationCatalogId _3, nn::friends::InAppScreenName * _4, unsigned int _4_size, nn::friends::InAppScreenName * _5, unsigned int _5_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::SendFriendRequestWithExternalApplicationCatalogId\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::SendFriendRequestWithNintendoNetworkIdInfo(nn::friends::MiiName _0, nn::friends::MiiImageUrlParam _1, nn::friends::MiiName _2, nn::friends::MiiImageUrlParam _3, int32_t _4, nn::account::Uid _5, nn::account::NetworkServiceAccountId _6) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::SendFriendRequestWithNintendoNetworkIdInfo\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::SyncBlockedUserList(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::SyncBlockedUserList\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::SyncFriendList(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::SyncFriendList\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::SyncUserSetting(nn::account::Uid _0) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::SyncUserSetting\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::UnblockUser(nn::account::Uid _0, nn::account::NetworkServiceAccountId _1) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::UnblockUser\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::UpdateFriendInfo(nn::account::Uid _0, uint64_t _1, uint64_t _2, nn::account::NetworkServiceAccountId * _3, unsigned int _3_size, nn::friends::detail::FriendImpl *& _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::UpdateFriendInfo\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IFriendService::UpdateUserPresence(nn::account::Uid _0, uint64_t _1, uint64_t _2, nn::friends::detail::UserPresenceImpl * _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IFriendService::UpdateUserPresence\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::INotificationService::Clear() {
	ns_print("Stub implementation for nn::friends::detail::ipc::INotificationService::Clear\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::INotificationService::GetEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::friends::detail::ipc::INotificationService::GetEvent\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::INotificationService::Pop(nn::friends::detail::ipc::SizedNotificationInfo& _0) {
	ns_print("Stub implementation for nn::friends::detail::ipc::INotificationService::Pop\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IServiceCreator::CreateFriendService(nn::friends::detail::ipc::IFriendService*& _0) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IServiceCreator::CreateFriendService\n");
	return 0;
}
uint32_t nn::friends::detail::ipc::IServiceCreator::CreateNotificationService(nn::account::Uid _0, nn::friends::detail::ipc::INotificationService*& _1) {
	ns_print("Stub implementation for nn::friends::detail::ipc::IServiceCreator::CreateNotificationService\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::fssrv::sf {
	class IDeviceOperator : public IpcService {
	public:
		IDeviceOperator() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::IsSdCardInserted\n");
				resp->error_code = IsSdCardInserted(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetSdCardSpeedMode\n");
				resp->error_code = GetSdCardSpeedMode(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetSdCardCid: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetSdCardCid(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetSdCardUserAreaSize\n");
				resp->error_code = GetSdCardUserAreaSize(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetSdCardProtectedAreaSize\n");
				resp->error_code = GetSdCardProtectedAreaSize(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 24);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetAndClearSdCardErrorInfo: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetAndClearSdCardErrorInfo(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint128_t *>(8), *resp->GetDataPointer<uint64_t *>(0x18), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetMmcCid: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetMmcCid(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetMmcSpeedMode\n");
				resp->error_code = GetMmcSpeedMode(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 110: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::EraseMmc: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = EraseMmc(req->GetData<uint32_t>(8));
				return 0;
			}
			case 111: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetMmcPartitionSize: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = GetMmcPartitionSize(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 112: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetMmcPatrolCount\n");
				resp->error_code = GetMmcPatrolCount(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 113: {
				resp->GenBuf(0, 0, 24);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetAndClearMmcErrorInfo: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetAndClearMmcErrorInfo(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint128_t *>(8), *resp->GetDataPointer<uint64_t *>(0x18), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 114: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetMmcExtendedCsd: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetMmcExtendedCsd(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 200: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::IsGameCardInserted\n");
				resp->error_code = IsGameCardInserted(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 201: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::EraseGameCard: uint32_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = EraseGameCard(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 202: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetGameCardHandle\n");
				resp->error_code = GetGameCardHandle(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 203: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetGameCardUpdatePartitionInfo: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = GetGameCardUpdatePartitionInfo(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<nn::ApplicationId *>(0x10));
				return 0;
			}
			case 204: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::FinalizeGameCardDriver\n");
				resp->error_code = FinalizeGameCardDriver();
				return 0;
			}
			case 205: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetGameCardAttribute: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = GetGameCardAttribute(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 206: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetGameCardDeviceCertificate: uint64_t = 0x%%lx, uint32_t = 0x%x\n", req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10));
				resp->error_code = GetGameCardDeviceCertificate(req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 207: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetGameCardAsicInfo: uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp2);
				resp->error_code = GetGameCardAsicInfo(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 208: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetGameCardIdSet: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetGameCardIdSet(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 209: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::WriteToGameCard: uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = WriteToGameCard(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 210: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::SetVerifyWriteEnalbleFlag: uint8_t flag = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = SetVerifyWriteEnalbleFlag(req->GetData<uint8_t>(8));
				return 0;
			}
			case 211: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetGameCardImageHash: uint64_t = 0x%%lx, uint32_t = 0x%x\n", req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10));
				resp->error_code = GetGameCardImageHash(req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 212: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetGameCardDeviceIdForProdCard: uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp2);
				resp->error_code = GetGameCardDeviceIdForProdCard(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 213: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::EraseAndWriteParamDirectly: uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), temp2);
				resp->error_code = EraseAndWriteParamDirectly(req->GetData<uint64_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 214: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetGameCardCid: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetGameCardCid(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 215: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::ForceEraseGameCard\n");
				resp->error_code = ForceEraseGameCard();
				return 0;
			}
			case 216: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetGameCardErrorInfo\n");
				resp->error_code = GetGameCardErrorInfo(*resp->GetDataPointer<uint128_t *>(8));
				return 0;
			}
			case 217: {
				resp->GenBuf(0, 0, 64);
				auto temp1 = resp->GetDataPointer<uint8_t *>(8);
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetGameCardErrorReportInfo\n");
				resp->error_code = GetGameCardErrorReportInfo(temp1);
				return 0;
			}
			case 218: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetGameCardDeviceId: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetGameCardDeviceId(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 300: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::SetSpeedEmulationMode: uint32_t mode = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = SetSpeedEmulationMode(req->GetData<uint32_t>(8));
				return 0;
			}
			case 301: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::fssrv::sf::IDeviceOperator::GetSpeedEmulationMode\n");
				resp->error_code = GetSpeedEmulationMode(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::fssrv::sf::IDeviceOperator", req->cmd_id);
			}
		}
		uint32_t EraseAndWriteParamDirectly(uint64_t _0, uint8_t * _1, unsigned int _1_size);
		uint32_t EraseGameCard(uint32_t _0, uint64_t _1);
		uint32_t EraseMmc(uint32_t _0);
		uint32_t FinalizeGameCardDriver();
		uint32_t ForceEraseGameCard();
		uint32_t GetAndClearMmcErrorInfo(uint64_t _0, uint128_t& _1, uint64_t& _2, uint8_t *& _3, unsigned int _3_size);
		uint32_t GetAndClearSdCardErrorInfo(uint64_t _0, uint128_t& _1, uint64_t& _2, uint8_t *& _3, unsigned int _3_size);
		uint32_t GetGameCardAsicInfo(uint64_t _0, uint64_t _1, uint8_t * _2, unsigned int _2_size, uint8_t *& _3, unsigned int _3_size);
		uint32_t GetGameCardAttribute(uint32_t _0, uint8_t& attribute);
		uint32_t GetGameCardCid(uint64_t _0, uint8_t *& cid, unsigned int cid_size);
		uint32_t GetGameCardDeviceCertificate(uint64_t _0, uint32_t _1, uint8_t *& certificate, unsigned int certificate_size);
		uint32_t GetGameCardDeviceId(uint64_t _0, uint8_t *& deviceID, unsigned int deviceID_size);
		uint32_t GetGameCardDeviceIdForProdCard(uint64_t _0, uint64_t _1, uint8_t * _2, unsigned int _2_size, uint8_t *& errorInfo, unsigned int errorInfo_size);
		uint32_t GetGameCardErrorInfo(uint128_t& errorInfo);
		uint32_t GetGameCardErrorReportInfo(uint8_t *& errorReportInfo);
		uint32_t GetGameCardHandle(uint32_t& gamecardHandle);
		uint32_t GetGameCardIdSet(uint64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t GetGameCardImageHash(uint64_t _0, uint32_t _1, uint8_t *& imageHash, unsigned int imageHash_size);
		uint32_t GetGameCardUpdatePartitionInfo(uint32_t _0, uint32_t& version, nn::ApplicationId& TID);
		uint32_t GetMmcCid(uint64_t _0, uint8_t *& cid, unsigned int cid_size);
		uint32_t GetMmcExtendedCsd(uint64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t GetMmcPartitionSize(uint32_t _0, uint64_t& paritionSize);
		uint32_t GetMmcPatrolCount(uint32_t& patrolCount);
		uint32_t GetMmcSpeedMode(uint64_t& speedMode);
		uint32_t GetSdCardCid(uint64_t _0, uint8_t *& cid, unsigned int cid_size);
		uint32_t GetSdCardProtectedAreaSize(uint64_t& protectedSize);
		uint32_t GetSdCardSpeedMode(uint64_t& sdSpeed);
		uint32_t GetSdCardUserAreaSize(uint64_t& size);
		uint32_t GetSpeedEmulationMode(uint32_t& emuMode);
		uint32_t IsGameCardInserted(uint8_t& isGameInserted);
		uint32_t IsSdCardInserted(uint8_t& isSdInserted);
		uint32_t SetSpeedEmulationMode(uint32_t mode);
		uint32_t SetVerifyWriteEnalbleFlag(uint8_t flag);
		uint32_t WriteToGameCard(uint64_t _0, uint64_t _1, uint8_t *& _2, unsigned int _2_size);
	};
	class IDirectory : public IpcService {
	public:
		IDirectory() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::fssrv::sf::IDirectory::Read\n");
				resp->error_code = Read(*resp->GetDataPointer<uint64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::fssrv::sf::IDirectory::GetEntryCount\n");
				resp->error_code = GetEntryCount(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::fssrv::sf::IDirectory", req->cmd_id);
			}
		}
		uint32_t GetEntryCount(uint64_t& _0);
		uint32_t Read(uint64_t& _0, uint8_t *& _1, unsigned int _1_size);
	};
	class IEventNotifier : public IpcService {
	public:
		IEventNotifier() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::fssrv::sf::IEventNotifier::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::fssrv::sf::IEventNotifier", req->cmd_id);
			}
		}
		uint32_t Unknown0(IpcService*& _0);
	};
	class IFile : public IpcService {
	public:
		IFile() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x46, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::fssrv::sf::IFile::Read: uint64_t = 0x%%lx, uint64_t offset = 0x%%lx, uint32_t size = 0x%x\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint32_t>(0x18));
				resp->error_code = Read(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint32_t>(0x18), *resp->GetDataPointer<uint64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x45, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::fssrv::sf::IFile::Write: uint64_t = 0x%%lx, uint64_t offset = 0x%%lx, uint32_t size = 0x%x, int8_t *buf = buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint32_t>(0x18), temp2);
				resp->error_code = Write(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint32_t>(0x18), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFile::Flush\n");
				resp->error_code = Flush();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFile::SetSize: uint64_t size = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = SetSize(req->GetData<uint64_t>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::fssrv::sf::IFile::GetSize\n");
				resp->error_code = GetSize(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::fssrv::sf::IFile", req->cmd_id);
			}
		}
		uint32_t Flush();
		uint32_t GetSize(uint64_t& fileSize);
		uint32_t Read(uint64_t _0, uint64_t offset, uint32_t size, uint64_t& out_size, int8_t *& out_buf, unsigned int out_buf_size);
		uint32_t SetSize(uint64_t size);
		uint32_t Write(uint64_t _0, uint64_t offset, uint32_t size, int8_t * buf, unsigned int buf_size);
	};
	class IFileSystem : public IpcService {
	public:
		IFileSystem() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::fssrv::sf::IFileSystem::CreateFile: uint64_t mode = 0x%%lx, uint32_t size = 0x%x, int8_t *path = buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), temp2);
				resp->error_code = CreateFile(req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::fssrv::sf::IFileSystem::DeleteFile: int8_t *path = buffer<0x%lx>\n", temp2);
				resp->error_code = DeleteFile(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::fssrv::sf::IFileSystem::CreateDirectory: int8_t *path = buffer<0x%lx>\n", temp2);
				resp->error_code = CreateDirectory(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::fssrv::sf::IFileSystem::DeleteDirectory: int8_t *path = buffer<0x%lx>\n", temp2);
				resp->error_code = DeleteDirectory(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::fssrv::sf::IFileSystem::DeleteDirectoryRecursively: int8_t *path = buffer<0x%lx>\n", temp2);
				resp->error_code = DeleteDirectoryRecursively(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x19, 1, temp5);
				int8_t* temp6 = (int8_t *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				ns_print("IPC message to nn::fssrv::sf::IFileSystem::RenameFile: int8_t *oldPath = buffer<0x%lx>, int8_t *newPath = buffer<0x%lx>\n", temp2, temp5);
				resp->error_code = RenameFile(temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x19, 1, temp5);
				int8_t* temp6 = (int8_t *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				ns_print("IPC message to nn::fssrv::sf::IFileSystem::RenameDirectory: int8_t *oldPath = buffer<0x%lx>, int8_t *newPath = buffer<0x%lx>\n", temp2, temp5);
				resp->error_code = RenameDirectory(temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::fssrv::sf::IFileSystem::GetEntryType: int8_t *path = buffer<0x%lx>\n", temp2);
				resp->error_code = GetEntryType(temp3, temp2, *resp->GetDataPointer<uint32_t *>(8));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 8: {
				resp->GenBuf(1, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				nn::fssrv::sf::IFile* temp4;
				ns_print("IPC message to nn::fssrv::sf::IFileSystem::OpenFile: uint32_t mode = 0x%x, int8_t *path = buffer<0x%lx>\n", req->GetData<uint32_t>(8), temp2);
				resp->error_code = OpenFile(req->GetData<uint32_t>(8), temp3, temp2, temp4);
				delete[] (uint8_t *) temp3;
				if(temp4 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp4));
				return 0;
			}
			case 9: {
				resp->GenBuf(1, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				nn::fssrv::sf::IDirectory* temp4;
				ns_print("IPC message to nn::fssrv::sf::IFileSystem::OpenDirectory: uint32_t = 0x%x, int8_t *path = buffer<0x%lx>\n", req->GetData<uint32_t>(8), temp2);
				resp->error_code = OpenDirectory(req->GetData<uint32_t>(8), temp3, temp2, temp4);
				delete[] (uint8_t *) temp3;
				if(temp4 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp4));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFileSystem::Commit\n");
				resp->error_code = Commit();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::fssrv::sf::IFileSystem::GetFreeSpaceSize: int8_t *path = buffer<0x%lx>\n", temp2);
				resp->error_code = GetFreeSpaceSize(temp3, temp2, *resp->GetDataPointer<uint64_t *>(8));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::fssrv::sf::IFileSystem::GetTotalSpaceSize: int8_t *path = buffer<0x%lx>\n", temp2);
				resp->error_code = GetTotalSpaceSize(temp3, temp2, *resp->GetDataPointer<uint64_t *>(8));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::fssrv::sf::IFileSystem::CleanDirectoryRecursively: int8_t *path = buffer<0x%lx>\n", temp2);
				resp->error_code = CleanDirectoryRecursively(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 32);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				auto temp4 = resp->GetDataPointer<uint8_t *>(8);
				ns_print("IPC message to nn::fssrv::sf::IFileSystem::GetFileTimeStampRaw: int8_t *path = buffer<0x%lx>\n", temp2);
				resp->error_code = GetFileTimeStampRaw(temp3, temp2, temp4);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::fssrv::sf::IFileSystem", req->cmd_id);
			}
		}
		uint32_t CleanDirectoryRecursively(int8_t * path, unsigned int path_size);
		uint32_t Commit();
		uint32_t CreateDirectory(int8_t * path, unsigned int path_size);
		uint32_t CreateFile(uint64_t mode, uint32_t size, int8_t * path, unsigned int path_size);
		uint32_t DeleteDirectory(int8_t * path, unsigned int path_size);
		uint32_t DeleteDirectoryRecursively(int8_t * path, unsigned int path_size);
		uint32_t DeleteFile(int8_t * path, unsigned int path_size);
		uint32_t GetEntryType(int8_t * path, unsigned int path_size, uint32_t& _1);
		uint32_t GetFileTimeStampRaw(int8_t * path, unsigned int path_size, uint8_t *& timestamp);
		uint32_t GetFreeSpaceSize(int8_t * path, unsigned int path_size, uint64_t& totalFreeSpace);
		uint32_t GetTotalSpaceSize(int8_t * path, unsigned int path_size, uint64_t& totalSize);
		uint32_t OpenDirectory(uint32_t _0, int8_t * path, unsigned int path_size, nn::fssrv::sf::IDirectory*& directory);
		uint32_t OpenFile(uint32_t mode, int8_t * path, unsigned int path_size, nn::fssrv::sf::IFile*& file);
		uint32_t RenameDirectory(int8_t * oldPath, unsigned int oldPath_size, int8_t * newPath, unsigned int newPath_size);
		uint32_t RenameFile(int8_t * oldPath, unsigned int oldPath_size, int8_t * newPath, unsigned int newPath_size);
	};
	class IFileSystemProxy : public IpcService {
	public:
		IFileSystemProxy() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::Initialize: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Initialize(req->GetData<uint64_t>(8), req->pid);
				return 0;
			}
			case 2: {
				resp->GenBuf(1, 0, 0);
				nn::fssrv::sf::IFileSystem* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::OpenDataFileSystemByCurrentProcess\n");
				resp->error_code = OpenDataFileSystemByCurrentProcess(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 7: {
				resp->GenBuf(1, 0, 0);
				nn::fssrv::sf::IFileSystem* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::MountContent7: nn::ApplicationId tid = 0x%%lx, uint32_t ncaType = 0x%x\n", req->GetData<nn::ApplicationId>(8), req->GetData<uint32_t>(0x10));
				resp->error_code = MountContent7(req->GetData<nn::ApplicationId>(8), req->GetData<uint32_t>(0x10), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 8: {
				resp->GenBuf(1, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				nn::fssrv::sf::IFileSystem* temp4;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::MountContent: nn::ApplicationId tid = 0x%%lx, uint32_t flag = 0x%x, int8_t *path = buffer<0x%lx>\n", req->GetData<nn::ApplicationId>(8), req->GetData<uint32_t>(0x10), temp2);
				resp->error_code = MountContent(req->GetData<nn::ApplicationId>(8), req->GetData<uint32_t>(0x10), temp3, temp2, temp4);
				delete[] (uint8_t *) temp3;
				if(temp4 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp4));
				return 0;
			}
			case 9: {
				resp->GenBuf(1, 0, 0);
				nn::fssrv::sf::IFileSystem* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::OpenDataFileSystemByApplicationId: nn::ApplicationId tid = 0x%%lx\n", req->GetData<nn::ApplicationId>(8));
				resp->error_code = OpenDataFileSystemByApplicationId(req->GetData<nn::ApplicationId>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 11: {
				resp->GenBuf(1, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				nn::fssrv::sf::IFileSystem* temp4;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::MountBis: nn::fssrv::sf::Partition partitionID = 0x%x, int8_t *path = buffer<0x%lx>\n", req->GetData<nn::fssrv::sf::Partition>(8), temp2);
				resp->error_code = MountBis(req->GetData<nn::fssrv::sf::Partition>(8), temp3, temp2, temp4);
				delete[] (uint8_t *) temp3;
				if(temp4 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp4));
				return 0;
			}
			case 12: {
				resp->GenBuf(1, 0, 0);
				nn::fssrv::sf::IStorage* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::OpenBisPartition: nn::fssrv::sf::Partition partitionID = 0x%x\n", req->GetData<nn::fssrv::sf::Partition>(8));
				resp->error_code = OpenBisPartition(req->GetData<nn::fssrv::sf::Partition>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::InvalidateBisCache\n");
				resp->error_code = InvalidateBisCache();
				return 0;
			}
			case 17: {
				resp->GenBuf(1, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				nn::fssrv::sf::IFileSystem* temp4;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::OpenHostFileSystemImpl: int8_t *path = buffer<0x%lx>\n", temp2);
				resp->error_code = OpenHostFileSystemImpl(temp3, temp2, temp4);
				delete[] (uint8_t *) temp3;
				if(temp4 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp4));
				return 0;
			}
			case 18: {
				resp->GenBuf(1, 0, 0);
				nn::fssrv::sf::IFileSystem* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::MountSdCard\n");
				resp->error_code = MountSdCard(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::FormatSdCard\n");
				resp->error_code = FormatSdCard();
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::DeleteSaveData: nn::ApplicationId tid = 0x%%lx\n", req->GetData<nn::ApplicationId>(8));
				resp->error_code = DeleteSaveData(req->GetData<nn::ApplicationId>(8));
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::CreateSaveData: nn::fssrv::sf::SaveStruct saveStruct = %s, nn::fssrv::sf::SaveCreateStruct saveCreate = %s, uint128_t input = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x40).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x48), 0x40).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x88), 0x10).c_str());
				resp->error_code = CreateSaveData(req->GetDataPointer<nn::fssrv::sf::SaveStruct>(8), req->GetDataPointer<nn::fssrv::sf::SaveCreateStruct>(0x48), req->GetData<uint128_t>(0x88));
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::CreateSystemSaveData: nn::fssrv::sf::SaveStruct saveStruct = %s, nn::fssrv::sf::SaveCreateStruct saveCreate = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x40).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x48), 0x40).c_str());
				resp->error_code = CreateSystemSaveData(req->GetDataPointer<nn::fssrv::sf::SaveStruct>(8), req->GetDataPointer<nn::fssrv::sf::SaveCreateStruct>(0x48));
				return 0;
			}
			case 24: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				void* temp3 = (void *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::RegisterSaveDataAtomicDeletion: void *= buffer<0x%lx>\n", temp2);
				resp->error_code = RegisterSaveDataAtomicDeletion(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 25: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::DeleteSaveDataWithSpaceId: uint8_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint8_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = DeleteSaveDataWithSpaceId(req->GetData<uint8_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 26: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::FormatSdCardDryRun\n");
				resp->error_code = FormatSdCardDryRun();
				return 0;
			}
			case 27: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::IsExFatSupported\n");
				resp->error_code = IsExFatSupported(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 30: {
				resp->GenBuf(1, 0, 0);
				nn::fssrv::sf::IStorage* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::OpenGameCardPartition: nn::fssrv::sf::Partition partitionID = 0x%x, uint32_t = 0x%x\n", req->GetData<nn::fssrv::sf::Partition>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = OpenGameCardPartition(req->GetData<nn::fssrv::sf::Partition>(8), req->GetData<uint32_t>(0xc), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 31: {
				resp->GenBuf(1, 0, 0);
				nn::fssrv::sf::IFileSystem* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::MountGameCardPartition: uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = MountGameCardPartition(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 32: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::ExtendSaveData: uint8_t = 0x%x, uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint8_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint64_t>(0x18), req->GetData<uint64_t>(0x20));
				resp->error_code = ExtendSaveData(req->GetData<uint8_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint64_t>(0x18), req->GetData<uint64_t>(0x20));
				return 0;
			}
			case 51: {
				resp->GenBuf(1, 0, 0);
				nn::fssrv::sf::IFileSystem* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::MountSaveData: uint8_t input = 0x%x, nn::fssrv::sf::SaveStruct saveStruct = %s\n", req->GetData<uint8_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x40).c_str());
				resp->error_code = MountSaveData(req->GetData<uint8_t>(8), req->GetDataPointer<nn::fssrv::sf::SaveStruct>(0x10), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 52: {
				resp->GenBuf(1, 0, 0);
				nn::fssrv::sf::IFileSystem* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::MountSystemSaveData: uint8_t input = 0x%x, nn::fssrv::sf::SaveStruct saveStruct = %s\n", req->GetData<uint8_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x40).c_str());
				resp->error_code = MountSystemSaveData(req->GetData<uint8_t>(8), req->GetDataPointer<nn::fssrv::sf::SaveStruct>(0x10), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 53: {
				resp->GenBuf(1, 0, 0);
				nn::fssrv::sf::IFileSystem* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::MountSaveDataReadOnly: uint8_t input = 0x%x, nn::fssrv::sf::SaveStruct saveStruct = %s\n", req->GetData<uint8_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x40).c_str());
				resp->error_code = MountSaveDataReadOnly(req->GetData<uint8_t>(8), req->GetDataPointer<nn::fssrv::sf::SaveStruct>(0x10), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 57: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				void* temp3 = (void *) new uint8_t[temp2];
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::ReadSaveDataFileSystemExtraDataWithSpaceId: uint8_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint8_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = ReadSaveDataFileSystemExtraDataWithSpaceId(req->GetData<uint8_t>(8), req->GetData<uint64_t>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 58: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				void* temp3 = (void *) new uint8_t[temp2];
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::ReadSaveDataFileSystemExtraData: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = ReadSaveDataFileSystemExtraData(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 59: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				void* temp3 = (void *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::WriteSaveDataFileSystemExtraData: uint64_t = 0x%%lx, uint8_t = 0x%x, void *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint8_t>(0x10), temp2);
				resp->error_code = WriteSaveDataFileSystemExtraData(req->GetData<uint64_t>(8), req->GetData<uint8_t>(0x10), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 60: {
				resp->GenBuf(1, 0, 0);
				nn::fssrv::sf::ISaveDataInfoReader* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::OpenSaveDataInfoReader\n");
				resp->error_code = OpenSaveDataInfoReader(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 61: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::OpenSaveDataIterator: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = OpenSaveDataIterator(req->GetData<uint8_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 80: {
				resp->GenBuf(1, 0, 0);
				nn::fssrv::sf::IFile* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::OpenSaveDataThumbnailFile: uint8_t = 0x%x, uint8_t[0x40] = %s, uint32_t = 0x%x\n", req->GetData<uint8_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x40).c_str(), req->GetData<uint32_t>(0x50));
				resp->error_code = OpenSaveDataThumbnailFile(req->GetData<uint8_t>(8), req->GetDataPointer<uint8_t *>(0x10), req->GetData<uint32_t>(0x50), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 100: {
				resp->GenBuf(1, 0, 0);
				nn::fssrv::sf::IFileSystem* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::MountImageDirectory: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = MountImageDirectory(req->GetData<uint32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 110: {
				resp->GenBuf(1, 0, 0);
				nn::fssrv::sf::IFileSystem* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::MountContentStorage: uint32_t contentStorageID = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = MountContentStorage(req->GetData<uint32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 200: {
				resp->GenBuf(1, 0, 0);
				nn::fssrv::sf::IStorage* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::OpenDataStorageByCurrentProcess\n");
				resp->error_code = OpenDataStorageByCurrentProcess(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 201: {
				resp->GenBuf(1, 0, 0);
				nn::fssrv::sf::IStorage* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::OpenDataStorageByApplicationId: nn::ApplicationId tid = 0x%%lx\n", req->GetData<nn::ApplicationId>(8));
				resp->error_code = OpenDataStorageByApplicationId(req->GetData<nn::ApplicationId>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 202: {
				resp->GenBuf(1, 0, 0);
				nn::fssrv::sf::IStorage* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::OpenDataStorageByDataId: nn::ApplicationId tid = 0x%%lx, uint8_t storageId = 0x%x\n", req->GetData<nn::ApplicationId>(8), req->GetData<uint8_t>(0x10));
				resp->error_code = OpenDataStorageByDataId(req->GetData<nn::ApplicationId>(8), req->GetData<uint8_t>(0x10), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 203: {
				resp->GenBuf(1, 0, 0);
				nn::fssrv::sf::IStorage* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::OpenRomStorage\n");
				resp->error_code = OpenRomStorage(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 400: {
				resp->GenBuf(1, 0, 0);
				nn::fssrv::sf::IDeviceOperator* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::OpenDeviceOperator\n");
				resp->error_code = OpenDeviceOperator(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 500: {
				resp->GenBuf(1, 0, 0);
				nn::fssrv::sf::IEventNotifier* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::OpenSdCardDetectionEventNotifier\n");
				resp->error_code = OpenSdCardDetectionEventNotifier(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 501: {
				resp->GenBuf(1, 0, 0);
				nn::fssrv::sf::IEventNotifier* temp1;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::OpenGameCardDetectionEventNotifier\n");
				resp->error_code = OpenGameCardDetectionEventNotifier(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 600: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::SetCurrentPosixTime: uint64_t time = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = SetCurrentPosixTime(req->GetData<uint64_t>(8));
				return 0;
			}
			case 601: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::QuerySaveDataTotalSize: uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = QuerySaveDataTotalSize(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 602: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				void* temp3 = (void *) new uint8_t[temp2];
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::VerifySaveData: nn::ApplicationId tid = 0x%%lx\n", req->GetData<nn::ApplicationId>(8));
				resp->error_code = VerifySaveData(req->GetData<nn::ApplicationId>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 603: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::CorruptSaveDataForDebug: nn::ApplicationId tid = 0x%%lx\n", req->GetData<nn::ApplicationId>(8));
				resp->error_code = CorruptSaveDataForDebug(req->GetData<nn::ApplicationId>(8));
				return 0;
			}
			case 604: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::CreatePaddingFile: uint64_t size = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = CreatePaddingFile(req->GetData<uint64_t>(8));
				return 0;
			}
			case 605: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::DeleteAllPaddingFiles\n");
				resp->error_code = DeleteAllPaddingFiles();
				return 0;
			}
			case 606: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::GetRightsId: uint64_t = 0x%%lx, uint8_t = 0x%x\n", req->GetData<uint64_t>(8), req->GetData<uint8_t>(0x10));
				resp->error_code = GetRightsId(req->GetData<uint64_t>(8), req->GetData<uint8_t>(0x10), *resp->GetDataPointer<uint128_t *>(8));
				return 0;
			}
			case 607: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::RegisterExternalKey: uint128_t = %s, uint128_t = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x18), 0x10).c_str());
				resp->error_code = RegisterExternalKey(req->GetData<uint128_t>(8), req->GetData<uint128_t>(0x18));
				return 0;
			}
			case 608: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::UnregisterExternalKey\n");
				resp->error_code = UnregisterExternalKey();
				return 0;
			}
			case 609: {
				resp->GenBuf(0, 0, 16);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::GetRightsIdByPath: int8_t *path = buffer<0x%lx>\n", temp2);
				resp->error_code = GetRightsIdByPath(temp3, temp2, *resp->GetDataPointer<uint128_t *>(8));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 610: {
				resp->GenBuf(0, 0, 17);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::GetRightsIdByPath2: int8_t *path = buffer<0x%lx>\n", temp2);
				resp->error_code = GetRightsIdByPath2(temp3, temp2, *resp->GetDataPointer<uint128_t *>(8), *resp->GetDataPointer<uint8_t *>(0x18));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 620: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::SetSdCardEncryptionSeed: uint128_t seedmaybe = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = SetSdCardEncryptionSeed(req->GetData<uint128_t>(8));
				return 0;
			}
			case 800: {
				resp->GenBuf(0, 0, 128);
				auto temp1 = resp->GetDataPointer<uint8_t *>(8);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::GetAndClearFileSystemProxyErrorInfo\n");
				resp->error_code = GetAndClearFileSystemProxyErrorInfo(temp1);
				return 0;
			}
			case 1000: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::SetBisRootForHost: uint32_t = 0x%x, int8_t *path = buffer<0x%lx>\n", req->GetData<uint32_t>(8), temp2);
				resp->error_code = SetBisRootForHost(req->GetData<uint32_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1001: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::SetSaveDataSize: uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = SetSaveDataSize(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 1002: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::SetSaveDataRootPath: int8_t *path = buffer<0x%lx>\n", temp2);
				resp->error_code = SetSaveDataRootPath(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1003: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::DisableAutoSaveDataCreation\n");
				resp->error_code = DisableAutoSaveDataCreation();
				return 0;
			}
			case 1004: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::SetGlobalAccessLogMode: uint32_t mode = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = SetGlobalAccessLogMode(req->GetData<uint32_t>(8));
				return 0;
			}
			case 1005: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::GetGlobalAccessLogMode\n");
				resp->error_code = GetGlobalAccessLogMode(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 1006: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				void* temp3 = (void *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxy::OutputAccessLogToSdCard: void *logText = buffer<0x%lx>\n", temp2);
				resp->error_code = OutputAccessLogToSdCard(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::fssrv::sf::IFileSystemProxy", req->cmd_id);
			}
		}
		uint32_t CorruptSaveDataForDebug(nn::ApplicationId tid);
		uint32_t CreatePaddingFile(uint64_t size);
		uint32_t CreateSaveData(nn::fssrv::sf::SaveStruct saveStruct, nn::fssrv::sf::SaveCreateStruct saveCreate, uint128_t input);
		uint32_t CreateSystemSaveData(nn::fssrv::sf::SaveStruct saveStruct, nn::fssrv::sf::SaveCreateStruct saveCreate);
		uint32_t DeleteAllPaddingFiles();
		uint32_t DeleteSaveData(nn::ApplicationId tid);
		uint32_t DeleteSaveDataWithSpaceId(uint8_t _0, uint64_t _1);
		uint32_t DisableAutoSaveDataCreation();
		uint32_t ExtendSaveData(uint8_t _0, uint64_t _1, uint64_t _2, uint64_t _3);
		uint32_t FormatSdCard();
		uint32_t FormatSdCardDryRun();
		uint32_t GetAndClearFileSystemProxyErrorInfo(uint8_t *& errorInfo);
		uint32_t GetGlobalAccessLogMode(uint32_t& logMode);
		uint32_t GetRightsId(uint64_t _0, uint8_t _1, uint128_t& rights);
		uint32_t GetRightsIdByPath(int8_t * path, unsigned int path_size, uint128_t& rights);
		uint32_t GetRightsIdByPath2(int8_t * path, unsigned int path_size, uint128_t& rights, uint8_t& _2);
		uint32_t Initialize(uint64_t _0, uint64_t _1);
		uint32_t InvalidateBisCache();
		uint32_t IsExFatSupported(uint8_t& isSupported);
		uint32_t MountBis(nn::fssrv::sf::Partition partitionID, int8_t * path, unsigned int path_size, nn::fssrv::sf::IFileSystem*& Bis);
		uint32_t MountContent(nn::ApplicationId tid, uint32_t flag, int8_t * path, unsigned int path_size, nn::fssrv::sf::IFileSystem*& contentFs);
		uint32_t MountContent7(nn::ApplicationId tid, uint32_t ncaType, nn::fssrv::sf::IFileSystem*& _2);
		uint32_t MountContentStorage(uint32_t contentStorageID, nn::fssrv::sf::IFileSystem*& contentFs);
		uint32_t MountGameCardPartition(uint32_t _0, uint32_t _1, nn::fssrv::sf::IFileSystem*& gameCardPartitionFs);
		uint32_t MountImageDirectory(uint32_t _0, nn::fssrv::sf::IFileSystem*& imageFs);
		uint32_t MountSaveData(uint8_t input, nn::fssrv::sf::SaveStruct saveStruct, nn::fssrv::sf::IFileSystem*& saveDataFs);
		uint32_t MountSaveDataReadOnly(uint8_t input, nn::fssrv::sf::SaveStruct saveStruct, nn::fssrv::sf::IFileSystem*& saveDataFs);
		uint32_t MountSdCard(nn::fssrv::sf::IFileSystem*& sdCard);
		uint32_t MountSystemSaveData(uint8_t input, nn::fssrv::sf::SaveStruct saveStruct, nn::fssrv::sf::IFileSystem*& systemSaveDataFs);
		uint32_t OpenBisPartition(nn::fssrv::sf::Partition partitionID, nn::fssrv::sf::IStorage*& BisPartition);
		uint32_t OpenDataFileSystemByApplicationId(nn::ApplicationId tid, nn::fssrv::sf::IFileSystem*& dataFiles);
		uint32_t OpenDataFileSystemByCurrentProcess(nn::fssrv::sf::IFileSystem*& _0);
		uint32_t OpenDataStorageByApplicationId(nn::ApplicationId tid, nn::fssrv::sf::IStorage*& dataStorage);
		uint32_t OpenDataStorageByCurrentProcess(nn::fssrv::sf::IStorage*& dataStorage);
		uint32_t OpenDataStorageByDataId(nn::ApplicationId tid, uint8_t storageId, nn::fssrv::sf::IStorage*& dataStorage);
		uint32_t OpenDeviceOperator(nn::fssrv::sf::IDeviceOperator*& _0);
		uint32_t OpenGameCardDetectionEventNotifier(nn::fssrv::sf::IEventNotifier*& GameCardEventNotify);
		uint32_t OpenGameCardPartition(nn::fssrv::sf::Partition partitionID, uint32_t _1, nn::fssrv::sf::IStorage*& gameCardFs);
		uint32_t OpenHostFileSystemImpl(int8_t * path, unsigned int path_size, nn::fssrv::sf::IFileSystem*& _1);
		uint32_t OpenRomStorage(nn::fssrv::sf::IStorage*& _0);
		uint32_t OpenSaveDataInfoReader(nn::fssrv::sf::ISaveDataInfoReader*& _0);
		uint32_t OpenSaveDataIterator(uint8_t _0, IUnknown*& _1);
		uint32_t OpenSaveDataThumbnailFile(uint8_t _0, uint8_t * _1, uint32_t _2, nn::fssrv::sf::IFile*& thumbnail);
		uint32_t OpenSdCardDetectionEventNotifier(nn::fssrv::sf::IEventNotifier*& SdEventNotify);
		uint32_t OutputAccessLogToSdCard(void * logText, unsigned int logText_size);
		uint32_t QuerySaveDataTotalSize(uint64_t _0, uint64_t _1, uint64_t& saveDataSize);
		uint32_t ReadSaveDataFileSystemExtraData(uint64_t _0, void *& _1, unsigned int _1_size);
		uint32_t ReadSaveDataFileSystemExtraDataWithSpaceId(uint8_t _0, uint64_t _1, void *& _2, unsigned int _2_size);
		uint32_t RegisterExternalKey(uint128_t _0, uint128_t _1);
		uint32_t RegisterSaveDataAtomicDeletion(void * _0, unsigned int _0_size);
		uint32_t SetBisRootForHost(uint32_t _0, int8_t * path, unsigned int path_size);
		uint32_t SetCurrentPosixTime(uint64_t time);
		uint32_t SetGlobalAccessLogMode(uint32_t mode);
		uint32_t SetSaveDataRootPath(int8_t * path, unsigned int path_size);
		uint32_t SetSaveDataSize(uint64_t _0, uint64_t _1);
		uint32_t SetSdCardEncryptionSeed(uint128_t seedmaybe);
		uint32_t UnregisterExternalKey();
		uint32_t VerifySaveData(nn::ApplicationId tid, void *& _1, unsigned int _1_size);
		uint32_t WriteSaveDataFileSystemExtraData(uint64_t _0, uint8_t _1, void * _2, unsigned int _2_size);
	};
	class IFileSystemProxyForLoader : public IpcService {
	public:
		IFileSystemProxyForLoader() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				nn::fssrv::sf::IFileSystem* temp4;
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxyForLoader::MountCode: nn::ApplicationId TID = 0x%%lx, int8_t *contentPath = buffer<0x%lx>\n", req->GetData<nn::ApplicationId>(8), temp2);
				resp->error_code = MountCode(req->GetData<nn::ApplicationId>(8), temp3, temp2, temp4);
				delete[] (uint8_t *) temp3;
				if(temp4 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp4));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::fssrv::sf::IFileSystemProxyForLoader::IsCodeMounted: nn::ApplicationId TID = 0x%%lx\n", req->GetData<nn::ApplicationId>(8));
				resp->error_code = IsCodeMounted(req->GetData<nn::ApplicationId>(8), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::fssrv::sf::IFileSystemProxyForLoader", req->cmd_id);
			}
		}
		uint32_t IsCodeMounted(nn::ApplicationId TID, uint8_t& isMounted);
		uint32_t MountCode(nn::ApplicationId TID, int8_t * contentPath, unsigned int contentPath_size, nn::fssrv::sf::IFileSystem*& contentFs);
	};
	class IProgramRegistry : public IpcService {
	public:
		IProgramRegistry() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(5, 1, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				ns_print("IPC message to nn::fssrv::sf::IProgramRegistry::SetFsPermissions: uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint8_t = 0x%x, uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint8_t>(0x18), req->GetData<uint64_t>(0x20), req->GetData<uint64_t>(0x28), temp2, temp5);
				resp->error_code = SetFsPermissions(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint8_t>(0x18), req->GetData<uint64_t>(0x20), req->GetData<uint64_t>(0x28), temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IProgramRegistry::ClearFsPermissions: uint64_t pid = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = ClearFsPermissions(req->GetData<uint64_t>(8));
				return 0;
			}
			case 256: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IProgramRegistry::SetEnabledProgramVerification: uint8_t enabled = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = SetEnabledProgramVerification(req->GetData<uint8_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::fssrv::sf::IProgramRegistry", req->cmd_id);
			}
		}
		uint32_t ClearFsPermissions(uint64_t pid);
		uint32_t SetEnabledProgramVerification(uint8_t enabled);
		uint32_t SetFsPermissions(uint64_t _0, uint64_t _1, uint8_t _2, uint64_t _3, uint64_t _4, uint8_t * _5, unsigned int _5_size, uint8_t * _6, unsigned int _6_size);
	};
	class ISaveDataInfoReader : public IpcService {
	public:
		ISaveDataInfoReader() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::fssrv::sf::ISaveDataInfoReader::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::fssrv::sf::ISaveDataInfoReader", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t& _0, uint8_t *& _1, unsigned int _1_size);
	};
	class IStorage : public IpcService {
	public:
		IStorage() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x46, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::fssrv::sf::IStorage::Read: uint64_t offset = 0x%%lx, uint64_t length = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Read(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x45, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::fssrv::sf::IStorage::Write: uint64_t offset = 0x%%lx, uint64_t length = 0x%%lx, int8_t *data = buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp2);
				resp->error_code = Write(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IStorage::Flush\n");
				resp->error_code = Flush();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::fssrv::sf::IStorage::SetSize: uint64_t size = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = SetSize(req->GetData<uint64_t>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::fssrv::sf::IStorage::GetSize\n");
				resp->error_code = GetSize(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::fssrv::sf::IStorage", req->cmd_id);
			}
		}
		uint32_t Flush();
		uint32_t GetSize(uint64_t& size);
		uint32_t Read(uint64_t offset, uint64_t length, int8_t *& buffer, unsigned int buffer_size);
		uint32_t SetSize(uint64_t size);
		uint32_t Write(uint64_t offset, uint64_t length, int8_t * data, unsigned int data_size);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::fssrv::sf::IDeviceOperator::EraseAndWriteParamDirectly(uint64_t _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::EraseAndWriteParamDirectly\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::EraseGameCard(uint32_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::EraseGameCard\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::EraseMmc(uint32_t _0) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::EraseMmc\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::FinalizeGameCardDriver() {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::FinalizeGameCardDriver\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::ForceEraseGameCard() {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::ForceEraseGameCard\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetAndClearMmcErrorInfo(uint64_t _0, uint128_t& _1, uint64_t& _2, uint8_t *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetAndClearMmcErrorInfo\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetAndClearSdCardErrorInfo(uint64_t _0, uint128_t& _1, uint64_t& _2, uint8_t *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetAndClearSdCardErrorInfo\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetGameCardAsicInfo(uint64_t _0, uint64_t _1, uint8_t * _2, unsigned int _2_size, uint8_t *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetGameCardAsicInfo\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetGameCardAttribute(uint32_t _0, uint8_t& attribute) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetGameCardAttribute\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetGameCardCid(uint64_t _0, uint8_t *& cid, unsigned int cid_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetGameCardCid\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetGameCardDeviceCertificate(uint64_t _0, uint32_t _1, uint8_t *& certificate, unsigned int certificate_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetGameCardDeviceCertificate\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetGameCardDeviceId(uint64_t _0, uint8_t *& deviceID, unsigned int deviceID_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetGameCardDeviceId\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetGameCardDeviceIdForProdCard(uint64_t _0, uint64_t _1, uint8_t * _2, unsigned int _2_size, uint8_t *& errorInfo, unsigned int errorInfo_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetGameCardDeviceIdForProdCard\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetGameCardErrorInfo(uint128_t& errorInfo) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetGameCardErrorInfo\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetGameCardErrorReportInfo(uint8_t *& errorReportInfo) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetGameCardErrorReportInfo\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetGameCardHandle(uint32_t& gamecardHandle) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetGameCardHandle\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetGameCardIdSet(uint64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetGameCardIdSet\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetGameCardImageHash(uint64_t _0, uint32_t _1, uint8_t *& imageHash, unsigned int imageHash_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetGameCardImageHash\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetGameCardUpdatePartitionInfo(uint32_t _0, uint32_t& version, nn::ApplicationId& TID) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetGameCardUpdatePartitionInfo\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetMmcCid(uint64_t _0, uint8_t *& cid, unsigned int cid_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetMmcCid\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetMmcExtendedCsd(uint64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetMmcExtendedCsd\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetMmcPartitionSize(uint32_t _0, uint64_t& paritionSize) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetMmcPartitionSize\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetMmcPatrolCount(uint32_t& patrolCount) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetMmcPatrolCount\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetMmcSpeedMode(uint64_t& speedMode) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetMmcSpeedMode\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetSdCardCid(uint64_t _0, uint8_t *& cid, unsigned int cid_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetSdCardCid\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetSdCardProtectedAreaSize(uint64_t& protectedSize) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetSdCardProtectedAreaSize\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetSdCardSpeedMode(uint64_t& sdSpeed) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetSdCardSpeedMode\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetSdCardUserAreaSize(uint64_t& size) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetSdCardUserAreaSize\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::GetSpeedEmulationMode(uint32_t& emuMode) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::GetSpeedEmulationMode\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::IsGameCardInserted(uint8_t& isGameInserted) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::IsGameCardInserted\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::IsSdCardInserted(uint8_t& isSdInserted) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::IsSdCardInserted\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::SetSpeedEmulationMode(uint32_t mode) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::SetSpeedEmulationMode\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::SetVerifyWriteEnalbleFlag(uint8_t flag) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::SetVerifyWriteEnalbleFlag\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDeviceOperator::WriteToGameCard(uint64_t _0, uint64_t _1, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IDeviceOperator::WriteToGameCard\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDirectory::GetEntryCount(uint64_t& _0) {
	ns_print("Stub implementation for nn::fssrv::sf::IDirectory::GetEntryCount\n");
	return 0;
}
uint32_t nn::fssrv::sf::IDirectory::Read(uint64_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IDirectory::Read\n");
	return 0;
}
uint32_t nn::fssrv::sf::IEventNotifier::Unknown0(IpcService*& _0) {
	ns_print("Stub implementation for nn::fssrv::sf::IEventNotifier::Unknown0\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFile::Flush() {
	ns_print("Stub implementation for nn::fssrv::sf::IFile::Flush\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFile::GetSize(uint64_t& fileSize) {
	ns_print("Stub implementation for nn::fssrv::sf::IFile::GetSize\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFile::Read(uint64_t _0, uint64_t offset, uint32_t size, uint64_t& out_size, int8_t *& out_buf, unsigned int out_buf_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IFile::Read\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFile::SetSize(uint64_t size) {
	ns_print("Stub implementation for nn::fssrv::sf::IFile::SetSize\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFile::Write(uint64_t _0, uint64_t offset, uint32_t size, int8_t * buf, unsigned int buf_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IFile::Write\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystem::CleanDirectoryRecursively(int8_t * path, unsigned int path_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystem::CleanDirectoryRecursively\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystem::Commit() {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystem::Commit\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystem::CreateDirectory(int8_t * path, unsigned int path_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystem::CreateDirectory\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystem::CreateFile(uint64_t mode, uint32_t size, int8_t * path, unsigned int path_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystem::CreateFile\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystem::DeleteDirectory(int8_t * path, unsigned int path_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystem::DeleteDirectory\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystem::DeleteDirectoryRecursively(int8_t * path, unsigned int path_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystem::DeleteDirectoryRecursively\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystem::DeleteFile(int8_t * path, unsigned int path_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystem::DeleteFile\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystem::GetEntryType(int8_t * path, unsigned int path_size, uint32_t& _1) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystem::GetEntryType\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystem::GetFileTimeStampRaw(int8_t * path, unsigned int path_size, uint8_t *& timestamp) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystem::GetFileTimeStampRaw\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystem::GetFreeSpaceSize(int8_t * path, unsigned int path_size, uint64_t& totalFreeSpace) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystem::GetFreeSpaceSize\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystem::GetTotalSpaceSize(int8_t * path, unsigned int path_size, uint64_t& totalSize) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystem::GetTotalSpaceSize\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystem::OpenDirectory(uint32_t _0, int8_t * path, unsigned int path_size, nn::fssrv::sf::IDirectory*& directory) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystem::OpenDirectory\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystem::OpenFile(uint32_t mode, int8_t * path, unsigned int path_size, nn::fssrv::sf::IFile*& file) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystem::OpenFile\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystem::RenameDirectory(int8_t * oldPath, unsigned int oldPath_size, int8_t * newPath, unsigned int newPath_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystem::RenameDirectory\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystem::RenameFile(int8_t * oldPath, unsigned int oldPath_size, int8_t * newPath, unsigned int newPath_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystem::RenameFile\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::CorruptSaveDataForDebug(nn::ApplicationId tid) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::CorruptSaveDataForDebug\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::CreatePaddingFile(uint64_t size) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::CreatePaddingFile\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::CreateSaveData(nn::fssrv::sf::SaveStruct saveStruct, nn::fssrv::sf::SaveCreateStruct saveCreate, uint128_t input) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::CreateSaveData\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::CreateSystemSaveData(nn::fssrv::sf::SaveStruct saveStruct, nn::fssrv::sf::SaveCreateStruct saveCreate) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::CreateSystemSaveData\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::DeleteAllPaddingFiles() {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::DeleteAllPaddingFiles\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::DeleteSaveData(nn::ApplicationId tid) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::DeleteSaveData\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::DeleteSaveDataWithSpaceId(uint8_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::DeleteSaveDataWithSpaceId\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::DisableAutoSaveDataCreation() {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::DisableAutoSaveDataCreation\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::ExtendSaveData(uint8_t _0, uint64_t _1, uint64_t _2, uint64_t _3) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::ExtendSaveData\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::FormatSdCard() {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::FormatSdCard\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::FormatSdCardDryRun() {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::FormatSdCardDryRun\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::GetAndClearFileSystemProxyErrorInfo(uint8_t *& errorInfo) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::GetAndClearFileSystemProxyErrorInfo\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::GetGlobalAccessLogMode(uint32_t& logMode) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::GetGlobalAccessLogMode\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::GetRightsId(uint64_t _0, uint8_t _1, uint128_t& rights) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::GetRightsId\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::GetRightsIdByPath(int8_t * path, unsigned int path_size, uint128_t& rights) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::GetRightsIdByPath\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::GetRightsIdByPath2(int8_t * path, unsigned int path_size, uint128_t& rights, uint8_t& _2) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::GetRightsIdByPath2\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::Initialize(uint64_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::Initialize\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::InvalidateBisCache() {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::InvalidateBisCache\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::IsExFatSupported(uint8_t& isSupported) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::IsExFatSupported\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::OpenDeviceOperator(nn::fssrv::sf::IDeviceOperator*& _0) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::OpenDeviceOperator\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::OpenGameCardDetectionEventNotifier(nn::fssrv::sf::IEventNotifier*& GameCardEventNotify) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::OpenGameCardDetectionEventNotifier\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::OpenSaveDataInfoReader(nn::fssrv::sf::ISaveDataInfoReader*& _0) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::OpenSaveDataInfoReader\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::OpenSaveDataIterator(uint8_t _0, IUnknown*& _1) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::OpenSaveDataIterator\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::OpenSaveDataThumbnailFile(uint8_t _0, uint8_t * _1, uint32_t _2, nn::fssrv::sf::IFile*& thumbnail) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::OpenSaveDataThumbnailFile\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::OpenSdCardDetectionEventNotifier(nn::fssrv::sf::IEventNotifier*& SdEventNotify) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::OpenSdCardDetectionEventNotifier\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::OutputAccessLogToSdCard(void * logText, unsigned int logText_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::OutputAccessLogToSdCard\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::QuerySaveDataTotalSize(uint64_t _0, uint64_t _1, uint64_t& saveDataSize) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::QuerySaveDataTotalSize\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::ReadSaveDataFileSystemExtraData(uint64_t _0, void *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::ReadSaveDataFileSystemExtraData\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::ReadSaveDataFileSystemExtraDataWithSpaceId(uint8_t _0, uint64_t _1, void *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::ReadSaveDataFileSystemExtraDataWithSpaceId\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::RegisterExternalKey(uint128_t _0, uint128_t _1) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::RegisterExternalKey\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::RegisterSaveDataAtomicDeletion(void * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::RegisterSaveDataAtomicDeletion\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::SetBisRootForHost(uint32_t _0, int8_t * path, unsigned int path_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::SetBisRootForHost\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::SetCurrentPosixTime(uint64_t time) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::SetCurrentPosixTime\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::SetGlobalAccessLogMode(uint32_t mode) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::SetGlobalAccessLogMode\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::SetSaveDataRootPath(int8_t * path, unsigned int path_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::SetSaveDataRootPath\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::SetSaveDataSize(uint64_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::SetSaveDataSize\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::SetSdCardEncryptionSeed(uint128_t seedmaybe) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::SetSdCardEncryptionSeed\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::UnregisterExternalKey() {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::UnregisterExternalKey\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::VerifySaveData(nn::ApplicationId tid, void *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::VerifySaveData\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxy::WriteSaveDataFileSystemExtraData(uint64_t _0, uint8_t _1, void * _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxy::WriteSaveDataFileSystemExtraData\n");
	return 0;
}
uint32_t nn::fssrv::sf::IFileSystemProxyForLoader::IsCodeMounted(nn::ApplicationId TID, uint8_t& isMounted) {
	ns_print("Stub implementation for nn::fssrv::sf::IFileSystemProxyForLoader::IsCodeMounted\n");
	return 0;
}
uint32_t nn::fssrv::sf::IProgramRegistry::ClearFsPermissions(uint64_t pid) {
	ns_print("Stub implementation for nn::fssrv::sf::IProgramRegistry::ClearFsPermissions\n");
	return 0;
}
uint32_t nn::fssrv::sf::IProgramRegistry::SetEnabledProgramVerification(uint8_t enabled) {
	ns_print("Stub implementation for nn::fssrv::sf::IProgramRegistry::SetEnabledProgramVerification\n");
	return 0;
}
uint32_t nn::fssrv::sf::IProgramRegistry::SetFsPermissions(uint64_t _0, uint64_t _1, uint8_t _2, uint64_t _3, uint64_t _4, uint8_t * _5, unsigned int _5_size, uint8_t * _6, unsigned int _6_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IProgramRegistry::SetFsPermissions\n");
	return 0;
}
uint32_t nn::fssrv::sf::ISaveDataInfoReader::Unknown0(uint64_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::fssrv::sf::ISaveDataInfoReader::Unknown0\n");
	return 0;
}
uint32_t nn::fssrv::sf::IStorage::Flush() {
	ns_print("Stub implementation for nn::fssrv::sf::IStorage::Flush\n");
	return 0;
}
uint32_t nn::fssrv::sf::IStorage::GetSize(uint64_t& size) {
	ns_print("Stub implementation for nn::fssrv::sf::IStorage::GetSize\n");
	return 0;
}
uint32_t nn::fssrv::sf::IStorage::Read(uint64_t offset, uint64_t length, int8_t *& buffer, unsigned int buffer_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IStorage::Read\n");
	return 0;
}
uint32_t nn::fssrv::sf::IStorage::SetSize(uint64_t size) {
	ns_print("Stub implementation for nn::fssrv::sf::IStorage::SetSize\n");
	return 0;
}
uint32_t nn::fssrv::sf::IStorage::Write(uint64_t offset, uint64_t length, int8_t * data, unsigned int data_size) {
	ns_print("Stub implementation for nn::fssrv::sf::IStorage::Write\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::gpio {
	class IManager : public IpcService {
	public:
		IManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::gpio::IManager::Unknown0: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown0(req->GetData<uint32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::gpio::IManager::Unknown1: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown1(req->GetData<uint32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::gpio::IManager::Unknown2: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown2(req->GetData<uint32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::gpio::IManager::Unknown3: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown3(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::gpio::IManager::Unknown4\n");
				resp->error_code = Unknown4(*resp->GetDataPointer<uint128_t *>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::gpio::IManager::Unknown5: uint8_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint8_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Unknown5(req->GetData<uint8_t>(8), req->GetData<uint32_t>(0xc));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::gpio::IManager::Unknown6: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown6(req->GetData<uint8_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::gpio::IManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t _0, IUnknown*& _1);
		uint32_t Unknown1(uint32_t _0, IUnknown*& _1);
		uint32_t Unknown2(uint32_t _0, IUnknown*& _1);
		uint32_t Unknown3(uint32_t _0, uint8_t& _1);
		uint32_t Unknown4(uint128_t& _0);
		uint32_t Unknown5(uint8_t _0, uint32_t _1);
		uint32_t Unknown6(uint8_t _0);
	};
	class IPadSession : public IpcService {
	public:
		IPadSession() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::gpio::IPadSession::Unknown0: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown0(req->GetData<uint32_t>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::gpio::IPadSession::Unknown1\n");
				resp->error_code = Unknown1(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::gpio::IPadSession::Unknown2: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown2(req->GetData<uint32_t>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::gpio::IPadSession::Unknown3\n");
				resp->error_code = Unknown3(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::gpio::IPadSession::Unknown4: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown4(req->GetData<uint8_t>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::gpio::IPadSession::Unknown5\n");
				resp->error_code = Unknown5(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::gpio::IPadSession::Unknown6\n");
				resp->error_code = Unknown6(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::gpio::IPadSession::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::gpio::IPadSession::Unknown8: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown8(req->GetData<uint32_t>(8));
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::gpio::IPadSession::Unknown9\n");
				resp->error_code = Unknown9(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::gpio::IPadSession::Unknown10\n");
				resp->error_code = Unknown10(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::gpio::IPadSession::Unknown11\n");
				resp->error_code = Unknown11();
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::gpio::IPadSession::Unknown12: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown12(req->GetData<uint8_t>(8));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::gpio::IPadSession::Unknown13\n");
				resp->error_code = Unknown13(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::gpio::IPadSession::Unknown14: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown14(req->GetData<uint32_t>(8));
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::gpio::IPadSession::Unknown15\n");
				resp->error_code = Unknown15(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::gpio::IPadSession", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t _0);
		uint32_t Unknown1(uint32_t& _0);
		uint32_t Unknown10(IpcService*& _0);
		uint32_t Unknown11();
		uint32_t Unknown12(uint8_t _0);
		uint32_t Unknown13(uint8_t& _0);
		uint32_t Unknown14(uint32_t _0);
		uint32_t Unknown15(uint32_t& _0);
		uint32_t Unknown2(uint32_t _0);
		uint32_t Unknown3(uint32_t& _0);
		uint32_t Unknown4(uint8_t _0);
		uint32_t Unknown5(uint8_t& _0);
		uint32_t Unknown6(uint32_t& _0);
		uint32_t Unknown7();
		uint32_t Unknown8(uint32_t _0);
		uint32_t Unknown9(uint32_t& _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::gpio::IManager::Unknown0(uint32_t _0, IUnknown*& _1) {
	ns_print("Stub implementation for nn::gpio::IManager::Unknown0\n");
	return 0;
}
uint32_t nn::gpio::IManager::Unknown1(uint32_t _0, IUnknown*& _1) {
	ns_print("Stub implementation for nn::gpio::IManager::Unknown1\n");
	return 0;
}
uint32_t nn::gpio::IManager::Unknown2(uint32_t _0, IUnknown*& _1) {
	ns_print("Stub implementation for nn::gpio::IManager::Unknown2\n");
	return 0;
}
uint32_t nn::gpio::IManager::Unknown3(uint32_t _0, uint8_t& _1) {
	ns_print("Stub implementation for nn::gpio::IManager::Unknown3\n");
	return 0;
}
uint32_t nn::gpio::IManager::Unknown4(uint128_t& _0) {
	ns_print("Stub implementation for nn::gpio::IManager::Unknown4\n");
	return 0;
}
uint32_t nn::gpio::IManager::Unknown5(uint8_t _0, uint32_t _1) {
	ns_print("Stub implementation for nn::gpio::IManager::Unknown5\n");
	return 0;
}
uint32_t nn::gpio::IManager::Unknown6(uint8_t _0) {
	ns_print("Stub implementation for nn::gpio::IManager::Unknown6\n");
	return 0;
}
uint32_t nn::gpio::IPadSession::Unknown0(uint32_t _0) {
	ns_print("Stub implementation for nn::gpio::IPadSession::Unknown0\n");
	return 0;
}
uint32_t nn::gpio::IPadSession::Unknown1(uint32_t& _0) {
	ns_print("Stub implementation for nn::gpio::IPadSession::Unknown1\n");
	return 0;
}
uint32_t nn::gpio::IPadSession::Unknown10(IpcService*& _0) {
	ns_print("Stub implementation for nn::gpio::IPadSession::Unknown10\n");
	return 0;
}
uint32_t nn::gpio::IPadSession::Unknown11() {
	ns_print("Stub implementation for nn::gpio::IPadSession::Unknown11\n");
	return 0;
}
uint32_t nn::gpio::IPadSession::Unknown12(uint8_t _0) {
	ns_print("Stub implementation for nn::gpio::IPadSession::Unknown12\n");
	return 0;
}
uint32_t nn::gpio::IPadSession::Unknown13(uint8_t& _0) {
	ns_print("Stub implementation for nn::gpio::IPadSession::Unknown13\n");
	return 0;
}
uint32_t nn::gpio::IPadSession::Unknown14(uint32_t _0) {
	ns_print("Stub implementation for nn::gpio::IPadSession::Unknown14\n");
	return 0;
}
uint32_t nn::gpio::IPadSession::Unknown15(uint32_t& _0) {
	ns_print("Stub implementation for nn::gpio::IPadSession::Unknown15\n");
	return 0;
}
uint32_t nn::gpio::IPadSession::Unknown2(uint32_t _0) {
	ns_print("Stub implementation for nn::gpio::IPadSession::Unknown2\n");
	return 0;
}
uint32_t nn::gpio::IPadSession::Unknown3(uint32_t& _0) {
	ns_print("Stub implementation for nn::gpio::IPadSession::Unknown3\n");
	return 0;
}
uint32_t nn::gpio::IPadSession::Unknown4(uint8_t _0) {
	ns_print("Stub implementation for nn::gpio::IPadSession::Unknown4\n");
	return 0;
}
uint32_t nn::gpio::IPadSession::Unknown5(uint8_t& _0) {
	ns_print("Stub implementation for nn::gpio::IPadSession::Unknown5\n");
	return 0;
}
uint32_t nn::gpio::IPadSession::Unknown6(uint32_t& _0) {
	ns_print("Stub implementation for nn::gpio::IPadSession::Unknown6\n");
	return 0;
}
uint32_t nn::gpio::IPadSession::Unknown7() {
	ns_print("Stub implementation for nn::gpio::IPadSession::Unknown7\n");
	return 0;
}
uint32_t nn::gpio::IPadSession::Unknown8(uint32_t _0) {
	ns_print("Stub implementation for nn::gpio::IPadSession::Unknown8\n");
	return 0;
}
uint32_t nn::gpio::IPadSession::Unknown9(uint32_t& _0) {
	ns_print("Stub implementation for nn::gpio::IPadSession::Unknown9\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::hid {
	class IActiveVibrationDeviceList : public IpcService {
	public:
		IActiveVibrationDeviceList() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IActiveVibrationDeviceList::ActivateVibrationDevice: nn::hid::VibrationDeviceHandle = 0x%x\n", req->GetData<nn::hid::VibrationDeviceHandle>(8));
				resp->error_code = ActivateVibrationDevice(req->GetData<nn::hid::VibrationDeviceHandle>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::hid::IActiveVibrationDeviceList", req->cmd_id);
			}
		}
		uint32_t ActivateVibrationDevice(nn::hid::VibrationDeviceHandle _0);
	};
	class IAppletResource : public IpcService {
	public:
		IAppletResource() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::hid::IAppletResource::GetSharedMemoryHandle\n");
				resp->error_code = GetSharedMemoryHandle(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::hid::IAppletResource", req->cmd_id);
			}
		}
		uint32_t GetSharedMemoryHandle(IpcService*& _0);
	};
	class IHidDebugServer : public IpcService {
	public:
		IHidDebugServer() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::DeactivateDebugPad\n");
				resp->error_code = DeactivateDebugPad();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::SetDebugPadAutoPilotState: nn::hid::debug::DebugPadAutoPilotState = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x18).c_str());
				resp->error_code = SetDebugPadAutoPilotState(req->GetDataPointer<nn::hid::debug::DebugPadAutoPilotState>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::UnsetDebugPadAutoPilotState\n");
				resp->error_code = UnsetDebugPadAutoPilotState();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::DeactivateTouchScreen\n");
				resp->error_code = DeactivateTouchScreen();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				nn::hid::TouchState* temp3 = (nn::hid::TouchState *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::hid::IHidDebugServer::SetTouchScreenAutoPilotState: nn::hid::TouchState *= buffer<0x%lx>\n", temp2);
				resp->error_code = SetTouchScreenAutoPilotState(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::UnsetTouchScreenAutoPilotState\n");
				resp->error_code = UnsetTouchScreenAutoPilotState();
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::DeactivateMouse\n");
				resp->error_code = DeactivateMouse();
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::SetMouseAutoPilotState: nn::hid::debug::MouseAutoPilotState = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x1c).c_str());
				resp->error_code = SetMouseAutoPilotState(req->GetDataPointer<nn::hid::debug::MouseAutoPilotState>(8));
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::UnsetMouseAutoPilotState\n");
				resp->error_code = UnsetMouseAutoPilotState();
				return 0;
			}
			case 30: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::DeactivateKeyboard\n");
				resp->error_code = DeactivateKeyboard();
				return 0;
			}
			case 31: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::SetKeyboardAutoPilotState: nn::hid::debug::KeyboardAutoPilotState = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x28).c_str());
				resp->error_code = SetKeyboardAutoPilotState(req->GetDataPointer<nn::hid::debug::KeyboardAutoPilotState>(8));
				return 0;
			}
			case 32: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::UnsetKeyboardAutoPilotState\n");
				resp->error_code = UnsetKeyboardAutoPilotState();
				return 0;
			}
			case 50: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::DeactivateXpad: nn::hid::BasicXpadId = 0x%x\n", req->GetData<nn::hid::BasicXpadId>(8));
				resp->error_code = DeactivateXpad(req->GetData<nn::hid::BasicXpadId>(8));
				return 0;
			}
			case 51: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::SetXpadAutoPilotState: nn::hid::BasicXpadId = 0x%x, nn::hid::debug::BasicXpadAutoPilotState = %s\n", req->GetData<nn::hid::BasicXpadId>(8), read_string(req->GetDataPointer<uint8_t *>(0xc), 0x1c).c_str());
				resp->error_code = SetXpadAutoPilotState(req->GetData<nn::hid::BasicXpadId>(8), req->GetDataPointer<nn::hid::debug::BasicXpadAutoPilotState>(0xc));
				return 0;
			}
			case 52: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::UnsetXpadAutoPilotState: nn::hid::BasicXpadId = 0x%x\n", req->GetData<nn::hid::BasicXpadId>(8));
				resp->error_code = UnsetXpadAutoPilotState(req->GetData<nn::hid::BasicXpadId>(8));
				return 0;
			}
			case 60: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::DeactivateJoyXpad: nn::hid::JoyXpadId = 0x%x\n", req->GetData<nn::hid::JoyXpadId>(8));
				resp->error_code = DeactivateJoyXpad(req->GetData<nn::hid::JoyXpadId>(8));
				return 0;
			}
			case 91: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::DeactivateGesture\n");
				resp->error_code = DeactivateGesture();
				return 0;
			}
			case 110: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::DeactivateHomeButton\n");
				resp->error_code = DeactivateHomeButton();
				return 0;
			}
			case 111: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::SetHomeButtonAutoPilotState: nn::hid::debug::HomeButtonAutoPilotState = 0x%%lx\n", req->GetData<nn::hid::debug::HomeButtonAutoPilotState>(8));
				resp->error_code = SetHomeButtonAutoPilotState(req->GetData<nn::hid::debug::HomeButtonAutoPilotState>(8));
				return 0;
			}
			case 112: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::UnsetHomeButtonAutoPilotState\n");
				resp->error_code = UnsetHomeButtonAutoPilotState();
				return 0;
			}
			case 120: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::DeactivateSleepButton\n");
				resp->error_code = DeactivateSleepButton();
				return 0;
			}
			case 121: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::SetSleepButtonAutoPilotState: nn::hid::debug::SleepButtonAutoPilotState = 0x%%lx\n", req->GetData<nn::hid::debug::SleepButtonAutoPilotState>(8));
				resp->error_code = SetSleepButtonAutoPilotState(req->GetData<nn::hid::debug::SleepButtonAutoPilotState>(8));
				return 0;
			}
			case 122: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::UnsetSleepButtonAutoPilotState\n");
				resp->error_code = UnsetSleepButtonAutoPilotState();
				return 0;
			}
			case 123: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::DeactivateInputDetector\n");
				resp->error_code = DeactivateInputDetector();
				return 0;
			}
			case 130: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::DeactivateCaptureButton\n");
				resp->error_code = DeactivateCaptureButton();
				return 0;
			}
			case 131: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::SetCaptureButtonAutoPilotState: nn::hid::debug::CaptureButtonAutoPilotState = 0x%%lx\n", req->GetData<nn::hid::debug::CaptureButtonAutoPilotState>(8));
				resp->error_code = SetCaptureButtonAutoPilotState(req->GetData<nn::hid::debug::CaptureButtonAutoPilotState>(8));
				return 0;
			}
			case 132: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::UnsetCaptureButtonAutoPilotState\n");
				resp->error_code = UnsetCaptureButtonAutoPilotState();
				return 0;
			}
			case 133: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::SetShiftAccelerometerCalibrationValue: nn::hid::SixAxisSensorHandle = 0x%x, float = %f, float = %f, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::SixAxisSensorHandle>(8), (double) req->GetData<float>(0xc), (double) req->GetData<float>(0x10), req->GetData<nn::applet::AppletResourceUserId>(0x18));
				resp->error_code = SetShiftAccelerometerCalibrationValue(req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<float>(0xc), req->GetData<float>(0x10), req->GetData<nn::applet::AppletResourceUserId>(0x18), req->pid);
				return 0;
			}
			case 134: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::hid::IHidDebugServer::GetShiftAccelerometerCalibrationValue: nn::hid::SixAxisSensorHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = GetShiftAccelerometerCalibrationValue(req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid, *resp->GetDataPointer<float *>(8), *resp->GetDataPointer<float *>(0xc));
				return 0;
			}
			case 135: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::SetShiftGyroscopeCalibrationValue: nn::hid::SixAxisSensorHandle = 0x%x, float = %f, float = %f, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::SixAxisSensorHandle>(8), (double) req->GetData<float>(0xc), (double) req->GetData<float>(0x10), req->GetData<nn::applet::AppletResourceUserId>(0x18));
				resp->error_code = SetShiftGyroscopeCalibrationValue(req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<float>(0xc), req->GetData<float>(0x10), req->GetData<nn::applet::AppletResourceUserId>(0x18), req->pid);
				return 0;
			}
			case 136: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::hid::IHidDebugServer::GetShiftGyroscopeCalibrationValue: nn::hid::SixAxisSensorHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = GetShiftGyroscopeCalibrationValue(req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid, *resp->GetDataPointer<float *>(8), *resp->GetDataPointer<float *>(0xc));
				return 0;
			}
			case 140: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::DeactivateConsoleSixAxisSensor\n");
				resp->error_code = DeactivateConsoleSixAxisSensor();
				return 0;
			}
			case 201: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::ActivateFirmwareUpdate\n");
				resp->error_code = ActivateFirmwareUpdate();
				return 0;
			}
			case 202: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::DeactivateFirmwareUpdate\n");
				resp->error_code = DeactivateFirmwareUpdate();
				return 0;
			}
			case 203: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::StartFirmwareUpdate: nn::hid::system::UniquePadId = 0x%%lx\n", req->GetData<nn::hid::system::UniquePadId>(8));
				resp->error_code = StartFirmwareUpdate(req->GetData<nn::hid::system::UniquePadId>(8));
				return 0;
			}
			case 204: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::hid::IHidDebugServer::GetFirmwareUpdateStage\n");
				resp->error_code = GetFirmwareUpdateStage(*resp->GetDataPointer<int64_t *>(8), *resp->GetDataPointer<int64_t *>(0x10));
				return 0;
			}
			case 205: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::hid::IHidDebugServer::GetFirmwareVersion: uint32_t = 0x%x, nn::hid::system::DeviceType = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<nn::hid::system::DeviceType>(0xc));
				resp->error_code = GetFirmwareVersion(req->GetData<uint32_t>(8), req->GetData<nn::hid::system::DeviceType>(0xc), *resp->GetDataPointer<nn::hid::system::FirmwareVersion *>(8));
				return 0;
			}
			case 206: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::hid::IHidDebugServer::GetDestinationFirmwareVersion: uint32_t = 0x%x, nn::hid::system::DeviceType = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<nn::hid::system::DeviceType>(0xc));
				resp->error_code = GetDestinationFirmwareVersion(req->GetData<uint32_t>(8), req->GetData<nn::hid::system::DeviceType>(0xc), *resp->GetDataPointer<nn::hid::system::FirmwareVersion *>(8));
				return 0;
			}
			case 207: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::DiscardFirmwareInfoCacheForRevert\n");
				resp->error_code = DiscardFirmwareInfoCacheForRevert();
				return 0;
			}
			case 208: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::StartFirmwareUpdateForRevert: nn::hid::system::UniquePadId = 0x%%lx\n", req->GetData<nn::hid::system::UniquePadId>(8));
				resp->error_code = StartFirmwareUpdateForRevert(req->GetData<nn::hid::system::UniquePadId>(8));
				return 0;
			}
			case 209: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::hid::IHidDebugServer::GetAvailableFirmwareVersionForRevert: nn::hid::system::UniquePadId = 0x%%lx\n", req->GetData<nn::hid::system::UniquePadId>(8));
				resp->error_code = GetAvailableFirmwareVersionForRevert(req->GetData<nn::hid::system::UniquePadId>(8), *resp->GetDataPointer<nn::hid::system::FirmwareVersion *>(8));
				return 0;
			}
			case 221: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidDebugServer::UpdateControllerColor: nn::util::Unorm8x4 = 0x%x, nn::util::Unorm8x4 = 0x%x, nn::hid::system::UniquePadId = 0x%%lx\n", req->GetData<nn::util::Unorm8x4>(8), req->GetData<nn::util::Unorm8x4>(0xc), req->GetData<nn::hid::system::UniquePadId>(0x10));
				resp->error_code = UpdateControllerColor(req->GetData<nn::util::Unorm8x4>(8), req->GetData<nn::util::Unorm8x4>(0xc), req->GetData<nn::hid::system::UniquePadId>(0x10));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::hid::IHidDebugServer", req->cmd_id);
			}
		}
		uint32_t ActivateFirmwareUpdate();
		uint32_t DeactivateCaptureButton();
		uint32_t DeactivateConsoleSixAxisSensor();
		uint32_t DeactivateDebugPad();
		uint32_t DeactivateFirmwareUpdate();
		uint32_t DeactivateGesture();
		uint32_t DeactivateHomeButton();
		uint32_t DeactivateInputDetector();
		uint32_t DeactivateJoyXpad(nn::hid::JoyXpadId _0);
		uint32_t DeactivateKeyboard();
		uint32_t DeactivateMouse();
		uint32_t DeactivateSleepButton();
		uint32_t DeactivateTouchScreen();
		uint32_t DeactivateXpad(nn::hid::BasicXpadId _0);
		uint32_t DiscardFirmwareInfoCacheForRevert();
		uint32_t GetAvailableFirmwareVersionForRevert(nn::hid::system::UniquePadId _0, nn::hid::system::FirmwareVersion& _1);
		uint32_t GetDestinationFirmwareVersion(uint32_t _0, nn::hid::system::DeviceType _1, nn::hid::system::FirmwareVersion& _2);
		uint32_t GetFirmwareUpdateStage(int64_t& _0, int64_t& _1);
		uint32_t GetFirmwareVersion(uint32_t _0, nn::hid::system::DeviceType _1, nn::hid::system::FirmwareVersion& _2);
		uint32_t GetShiftAccelerometerCalibrationValue(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, float& _3, float& _4);
		uint32_t GetShiftGyroscopeCalibrationValue(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, float& _3, float& _4);
		uint32_t SetCaptureButtonAutoPilotState(nn::hid::debug::CaptureButtonAutoPilotState _0);
		uint32_t SetDebugPadAutoPilotState(nn::hid::debug::DebugPadAutoPilotState _0);
		uint32_t SetHomeButtonAutoPilotState(nn::hid::debug::HomeButtonAutoPilotState _0);
		uint32_t SetKeyboardAutoPilotState(nn::hid::debug::KeyboardAutoPilotState _0);
		uint32_t SetMouseAutoPilotState(nn::hid::debug::MouseAutoPilotState _0);
		uint32_t SetShiftAccelerometerCalibrationValue(nn::hid::SixAxisSensorHandle _0, float _1, float _2, nn::applet::AppletResourceUserId _3, uint64_t _4);
		uint32_t SetShiftGyroscopeCalibrationValue(nn::hid::SixAxisSensorHandle _0, float _1, float _2, nn::applet::AppletResourceUserId _3, uint64_t _4);
		uint32_t SetSleepButtonAutoPilotState(nn::hid::debug::SleepButtonAutoPilotState _0);
		uint32_t SetTouchScreenAutoPilotState(nn::hid::TouchState * _0, unsigned int _0_size);
		uint32_t SetXpadAutoPilotState(nn::hid::BasicXpadId _0, nn::hid::debug::BasicXpadAutoPilotState _1);
		uint32_t StartFirmwareUpdate(nn::hid::system::UniquePadId _0);
		uint32_t StartFirmwareUpdateForRevert(nn::hid::system::UniquePadId _0);
		uint32_t UnsetCaptureButtonAutoPilotState();
		uint32_t UnsetDebugPadAutoPilotState();
		uint32_t UnsetHomeButtonAutoPilotState();
		uint32_t UnsetKeyboardAutoPilotState();
		uint32_t UnsetMouseAutoPilotState();
		uint32_t UnsetSleepButtonAutoPilotState();
		uint32_t UnsetTouchScreenAutoPilotState();
		uint32_t UnsetXpadAutoPilotState(nn::hid::BasicXpadId _0);
		uint32_t UpdateControllerColor(nn::util::Unorm8x4 _0, nn::util::Unorm8x4 _1, nn::hid::system::UniquePadId _2);
	};
	class IHidServer : public IpcService {
	public:
		IHidServer() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::hid::IAppletResource* temp1;
				ns_print("IPC message to nn::hid::IHidServer::CreateAppletResource: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = CreateAppletResource(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid, temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::ActivateDebugPad: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = ActivateDebugPad(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid);
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::ActivateTouchScreen: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = ActivateTouchScreen(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid);
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::ActivateMouse: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = ActivateMouse(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid);
				return 0;
			}
			case 31: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::ActivateKeyboard: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = ActivateKeyboard(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid);
				return 0;
			}
			case 40: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::hid::IHidServer::AcquireXpadIdEventHandle: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = AcquireXpadIdEventHandle(req->GetData<uint64_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 41: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::ReleaseXpadIdEventHandle: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = ReleaseXpadIdEventHandle(req->GetData<uint64_t>(8));
				return 0;
			}
			case 51: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::ActivateXpad: nn::hid::BasicXpadId = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::BasicXpadId>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = ActivateXpad(req->GetData<nn::hid::BasicXpadId>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 55: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::hid::BasicXpadId* temp3 = (nn::hid::BasicXpadId *) new uint8_t[temp2];
				ns_print("IPC message to nn::hid::IHidServer::GetXpadIds\n");
				resp->error_code = GetXpadIds(*resp->GetDataPointer<int64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 56: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::ActivateJoyXpad: nn::hid::JoyXpadId = 0x%x\n", req->GetData<nn::hid::JoyXpadId>(8));
				resp->error_code = ActivateJoyXpad(req->GetData<nn::hid::JoyXpadId>(8));
				return 0;
			}
			case 58: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::hid::IHidServer::GetJoyXpadLifoHandle: nn::hid::JoyXpadId = 0x%x\n", req->GetData<nn::hid::JoyXpadId>(8));
				resp->error_code = GetJoyXpadLifoHandle(req->GetData<nn::hid::JoyXpadId>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 59: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::hid::JoyXpadId* temp3 = (nn::hid::JoyXpadId *) new uint8_t[temp2];
				ns_print("IPC message to nn::hid::IHidServer::GetJoyXpadIds\n");
				resp->error_code = GetJoyXpadIds(*resp->GetDataPointer<int64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 60: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::ActivateSixAxisSensor: nn::hid::BasicXpadId = 0x%x\n", req->GetData<nn::hid::BasicXpadId>(8));
				resp->error_code = ActivateSixAxisSensor(req->GetData<nn::hid::BasicXpadId>(8));
				return 0;
			}
			case 61: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::DeactivateSixAxisSensor: nn::hid::BasicXpadId = 0x%x\n", req->GetData<nn::hid::BasicXpadId>(8));
				resp->error_code = DeactivateSixAxisSensor(req->GetData<nn::hid::BasicXpadId>(8));
				return 0;
			}
			case 62: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::hid::IHidServer::GetSixAxisSensorLifoHandle: nn::hid::BasicXpadId = 0x%x\n", req->GetData<nn::hid::BasicXpadId>(8));
				resp->error_code = GetSixAxisSensorLifoHandle(req->GetData<nn::hid::BasicXpadId>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 63: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::ActivateJoySixAxisSensor: nn::hid::JoyXpadId = 0x%x\n", req->GetData<nn::hid::JoyXpadId>(8));
				resp->error_code = ActivateJoySixAxisSensor(req->GetData<nn::hid::JoyXpadId>(8));
				return 0;
			}
			case 64: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::DeactivateJoySixAxisSensor: nn::hid::JoyXpadId = 0x%x\n", req->GetData<nn::hid::JoyXpadId>(8));
				resp->error_code = DeactivateJoySixAxisSensor(req->GetData<nn::hid::JoyXpadId>(8));
				return 0;
			}
			case 65: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::hid::IHidServer::GetJoySixAxisSensorLifoHandle: nn::hid::JoyXpadId = 0x%x\n", req->GetData<nn::hid::JoyXpadId>(8));
				resp->error_code = GetJoySixAxisSensorLifoHandle(req->GetData<nn::hid::JoyXpadId>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 66: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::StartSixAxisSensor: nn::hid::SixAxisSensorHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = StartSixAxisSensor(req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 67: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::StopSixAxisSensor: nn::hid::SixAxisSensorHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = StopSixAxisSensor(req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 68: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::hid::IHidServer::IsSixAxisSensorFusionEnabled: nn::hid::SixAxisSensorHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = IsSixAxisSensorFusionEnabled(req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid, *resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 69: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::EnableSixAxisSensorFusion: bool = 0x%x, nn::hid::SixAxisSensorHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<bool>(8), req->GetData<nn::hid::SixAxisSensorHandle>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = EnableSixAxisSensorFusion(req->GetData<bool>(8), req->GetData<nn::hid::SixAxisSensorHandle>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 70: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::SetSixAxisSensorFusionParameters: nn::hid::SixAxisSensorHandle = 0x%x, float = %f, float = %f, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::SixAxisSensorHandle>(8), (double) req->GetData<float>(0xc), (double) req->GetData<float>(0x10), req->GetData<nn::applet::AppletResourceUserId>(0x18));
				resp->error_code = SetSixAxisSensorFusionParameters(req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<float>(0xc), req->GetData<float>(0x10), req->GetData<nn::applet::AppletResourceUserId>(0x18), req->pid);
				return 0;
			}
			case 71: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::hid::IHidServer::GetSixAxisSensorFusionParameters: nn::hid::SixAxisSensorHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = GetSixAxisSensorFusionParameters(req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid, *resp->GetDataPointer<float *>(8), *resp->GetDataPointer<float *>(0xc));
				return 0;
			}
			case 72: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::ResetSixAxisSensorFusionParameters: nn::hid::SixAxisSensorHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = ResetSixAxisSensorFusionParameters(req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 73: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::SetAccelerometerParameters: nn::hid::SixAxisSensorHandle = 0x%x, float = %f, float = %f, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::SixAxisSensorHandle>(8), (double) req->GetData<float>(0xc), (double) req->GetData<float>(0x10), req->GetData<nn::applet::AppletResourceUserId>(0x18));
				resp->error_code = SetAccelerometerParameters(req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<float>(0xc), req->GetData<float>(0x10), req->GetData<nn::applet::AppletResourceUserId>(0x18), req->pid);
				return 0;
			}
			case 74: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::hid::IHidServer::GetAccelerometerParameters: nn::hid::SixAxisSensorHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = GetAccelerometerParameters(req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid, *resp->GetDataPointer<float *>(8), *resp->GetDataPointer<float *>(0xc));
				return 0;
			}
			case 75: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::ResetAccelerometerParameters: nn::hid::SixAxisSensorHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = ResetAccelerometerParameters(req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 76: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::SetAccelerometerPlayMode: nn::hid::SixAxisSensorHandle = 0x%x, uint32_t = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<uint32_t>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = SetAccelerometerPlayMode(req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<uint32_t>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 77: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::hid::IHidServer::GetAccelerometerPlayMode: nn::hid::SixAxisSensorHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = GetAccelerometerPlayMode(req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid, *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 78: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::ResetAccelerometerPlayMode: nn::hid::SixAxisSensorHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = ResetAccelerometerPlayMode(req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 79: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::SetGyroscopeZeroDriftMode: nn::hid::SixAxisSensorHandle = 0x%x, uint32_t = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<uint32_t>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = SetGyroscopeZeroDriftMode(req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<uint32_t>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 80: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::hid::IHidServer::GetGyroscopeZeroDriftMode: nn::hid::SixAxisSensorHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = GetGyroscopeZeroDriftMode(req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid, *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 81: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::ResetGyroscopeZeroDriftMode: nn::hid::SixAxisSensorHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = ResetGyroscopeZeroDriftMode(req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 82: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::hid::IHidServer::IsSixAxisSensorAtRest: nn::hid::SixAxisSensorHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = IsSixAxisSensorAtRest(req->GetData<nn::hid::SixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid, *resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 91: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::ActivateGesture: int32_t = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<int32_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = ActivateGesture(req->GetData<int32_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::SetSupportedNpadStyleSet: nn::hid::NpadStyleTag = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::NpadStyleTag>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = SetSupportedNpadStyleSet(req->GetData<nn::hid::NpadStyleTag>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::hid::IHidServer::GetSupportedNpadStyleSet: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = GetSupportedNpadStyleSet(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid, *resp->GetDataPointer<nn::hid::NpadStyleTag *>(8));
				return 0;
			}
			case 102: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				uint32_t* temp3 = (uint32_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::hid::IHidServer::SetSupportedNpadIdType: nn::applet::AppletResourceUserId = 0x%%lx, uint32_t *= buffer<0x%lx>\n", req->GetData<nn::applet::AppletResourceUserId>(8), temp2);
				resp->error_code = SetSupportedNpadIdType(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid, temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 103: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::ActivateNpad: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = ActivateNpad(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid);
				return 0;
			}
			case 104: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::DeactivateNpad: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = DeactivateNpad(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid);
				return 0;
			}
			case 106: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::hid::IHidServer::AcquireNpadStyleSetUpdateEventHandle: uint32_t = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->GetData<uint64_t>(0x18));
				resp->error_code = AcquireNpadStyleSetUpdateEventHandle(req->GetData<uint32_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->GetData<uint64_t>(0x18), req->pid, temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 107: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::DisconnectNpad: uint32_t = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = DisconnectNpad(req->GetData<uint32_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 108: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::hid::IHidServer::GetPlayerLedPattern: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = GetPlayerLedPattern(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 120: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::SetNpadJoyHoldType: nn::applet::AppletResourceUserId = 0x%%lx, int64_t = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8), req->GetData<int64_t>(0x10));
				resp->error_code = SetNpadJoyHoldType(req->GetData<nn::applet::AppletResourceUserId>(8), req->GetData<int64_t>(0x10), req->pid);
				return 0;
			}
			case 121: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::hid::IHidServer::GetNpadJoyHoldType: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = GetNpadJoyHoldType(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid, *resp->GetDataPointer<int64_t *>(8));
				return 0;
			}
			case 122: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::SetNpadJoyAssignmentModeSingleByDefault: uint32_t = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = SetNpadJoyAssignmentModeSingleByDefault(req->GetData<uint32_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 123: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::SetNpadJoyAssignmentModeSingle: uint32_t = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx, int64_t = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->GetData<int64_t>(0x18));
				resp->error_code = SetNpadJoyAssignmentModeSingle(req->GetData<uint32_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->GetData<int64_t>(0x18), req->pid);
				return 0;
			}
			case 124: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::SetNpadJoyAssignmentModeDual: uint32_t = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = SetNpadJoyAssignmentModeDual(req->GetData<uint32_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 125: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::MergeSingleJoyAsDualJoy: uint32_t = 0x%x, uint32_t = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = MergeSingleJoyAsDualJoy(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 126: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::StartLrAssignmentMode: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = StartLrAssignmentMode(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid);
				return 0;
			}
			case 127: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::StopLrAssignmentMode: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = StopLrAssignmentMode(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid);
				return 0;
			}
			case 128: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::SetNpadHandheldActivationMode: nn::applet::AppletResourceUserId = 0x%%lx, int64_t = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8), req->GetData<int64_t>(0x10));
				resp->error_code = SetNpadHandheldActivationMode(req->GetData<nn::applet::AppletResourceUserId>(8), req->GetData<int64_t>(0x10), req->pid);
				return 0;
			}
			case 129: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::hid::IHidServer::GetNpadHandheldActivationMode: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = GetNpadHandheldActivationMode(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid, *resp->GetDataPointer<int64_t *>(8));
				return 0;
			}
			case 130: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::SwapNpadAssignment: uint32_t = 0x%x, uint32_t = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = SwapNpadAssignment(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 131: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::hid::IHidServer::IsUnintendedHomeButtonInputProtectionEnabled: uint32_t = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = IsUnintendedHomeButtonInputProtectionEnabled(req->GetData<uint32_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid, *resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 132: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::EnableUnintendedHomeButtonInputProtection: bool = 0x%x, uint32_t = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<bool>(8), req->GetData<uint32_t>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = EnableUnintendedHomeButtonInputProtection(req->GetData<bool>(8), req->GetData<uint32_t>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 200: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::hid::IHidServer::GetVibrationDeviceInfo: nn::hid::VibrationDeviceHandle = 0x%x\n", req->GetData<nn::hid::VibrationDeviceHandle>(8));
				resp->error_code = GetVibrationDeviceInfo(req->GetData<nn::hid::VibrationDeviceHandle>(8), *resp->GetDataPointer<nn::hid::VibrationDeviceInfoForIpc *>(8));
				return 0;
			}
			case 201: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::SendVibrationValue: nn::hid::VibrationDeviceHandle = 0x%x, nn::hid::VibrationValue = %s, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::VibrationDeviceHandle>(8), read_string(req->GetDataPointer<uint8_t *>(0xc), 0x10).c_str(), req->GetData<nn::applet::AppletResourceUserId>(0x20));
				resp->error_code = SendVibrationValue(req->GetData<nn::hid::VibrationDeviceHandle>(8), req->GetData<nn::hid::VibrationValue>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x20), req->pid);
				return 0;
			}
			case 202: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::hid::IHidServer::GetActualVibrationValue: nn::hid::VibrationDeviceHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::VibrationDeviceHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = GetActualVibrationValue(req->GetData<nn::hid::VibrationDeviceHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid, *resp->GetDataPointer<nn::hid::VibrationValue *>(8));
				return 0;
			}
			case 203: {
				resp->GenBuf(1, 0, 0);
				nn::hid::IActiveVibrationDeviceList* temp1;
				ns_print("IPC message to nn::hid::IHidServer::CreateActiveVibrationDeviceList\n");
				resp->error_code = CreateActiveVibrationDeviceList(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 204: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::PermitVibration: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = PermitVibration(req->GetData<bool>(8));
				return 0;
			}
			case 205: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::hid::IHidServer::IsVibrationPermitted\n");
				resp->error_code = IsVibrationPermitted(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 206: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				nn::hid::VibrationDeviceHandle* temp3 = (nn::hid::VibrationDeviceHandle *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(9, 1, temp5);
				nn::hid::VibrationValue* temp6 = (nn::hid::VibrationValue *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				ns_print("IPC message to nn::hid::IHidServer::SendVibrationValues: nn::applet::AppletResourceUserId = 0x%%lx, nn::hid::VibrationDeviceHandle *= buffer<0x%lx>, nn::hid::VibrationValue *= buffer<0x%lx>\n", req->GetData<nn::applet::AppletResourceUserId>(8), temp2, temp5);
				resp->error_code = SendVibrationValues(req->GetData<nn::applet::AppletResourceUserId>(8), temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				return 0;
			}
			case 300: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::ActivateConsoleSixAxisSensor: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = ActivateConsoleSixAxisSensor(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid);
				return 0;
			}
			case 301: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::StartConsoleSixAxisSensor: nn::hid::ConsoleSixAxisSensorHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::ConsoleSixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = StartConsoleSixAxisSensor(req->GetData<nn::hid::ConsoleSixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 302: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::StopConsoleSixAxisSensor: nn::hid::ConsoleSixAxisSensorHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::ConsoleSixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = StopConsoleSixAxisSensor(req->GetData<nn::hid::ConsoleSixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 400: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::hid::IHidServer::IsUsbFullKeyControllerEnabled\n");
				resp->error_code = IsUsbFullKeyControllerEnabled(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 401: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::EnableUsbFullKeyController: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = EnableUsbFullKeyController(req->GetData<bool>(8));
				return 0;
			}
			case 402: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::hid::IHidServer::IsUsbFullKeyControllerConnected: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = IsUsbFullKeyControllerConnected(req->GetData<uint32_t>(8), *resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 1000: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidServer::SetNpadCommunicationMode: nn::applet::AppletResourceUserId = 0x%%lx, int64_t = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8), req->GetData<int64_t>(0x10));
				resp->error_code = SetNpadCommunicationMode(req->GetData<nn::applet::AppletResourceUserId>(8), req->GetData<int64_t>(0x10), req->pid);
				return 0;
			}
			case 1001: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::hid::IHidServer::GetNpadCommunicationMode\n");
				resp->error_code = GetNpadCommunicationMode(*resp->GetDataPointer<int64_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::hid::IHidServer", req->cmd_id);
			}
		}
		uint32_t AcquireNpadStyleSetUpdateEventHandle(uint32_t _0, nn::applet::AppletResourceUserId _1, uint64_t _2, uint64_t _3, IpcService*& _4);
		uint32_t AcquireXpadIdEventHandle(uint64_t _0, IpcService*& _1);
		uint32_t ActivateConsoleSixAxisSensor(nn::applet::AppletResourceUserId _0, uint64_t _1);
		uint32_t ActivateDebugPad(nn::applet::AppletResourceUserId _0, uint64_t _1);
		uint32_t ActivateGesture(int32_t _0, nn::applet::AppletResourceUserId _1, uint64_t _2);
		uint32_t ActivateJoySixAxisSensor(nn::hid::JoyXpadId _0);
		uint32_t ActivateJoyXpad(nn::hid::JoyXpadId _0);
		uint32_t ActivateKeyboard(nn::applet::AppletResourceUserId _0, uint64_t _1);
		uint32_t ActivateMouse(nn::applet::AppletResourceUserId _0, uint64_t _1);
		uint32_t ActivateNpad(nn::applet::AppletResourceUserId _0, uint64_t _1);
		uint32_t ActivateSixAxisSensor(nn::hid::BasicXpadId _0);
		uint32_t ActivateTouchScreen(nn::applet::AppletResourceUserId _0, uint64_t _1);
		uint32_t ActivateXpad(nn::hid::BasicXpadId _0, nn::applet::AppletResourceUserId _1, uint64_t _2);
		uint32_t CreateActiveVibrationDeviceList(nn::hid::IActiveVibrationDeviceList*& _0);
		uint32_t CreateAppletResource(nn::applet::AppletResourceUserId _0, uint64_t _1, nn::hid::IAppletResource*& _2);
		uint32_t DeactivateJoySixAxisSensor(nn::hid::JoyXpadId _0);
		uint32_t DeactivateNpad(nn::applet::AppletResourceUserId _0, uint64_t _1);
		uint32_t DeactivateSixAxisSensor(nn::hid::BasicXpadId _0);
		uint32_t DisconnectNpad(uint32_t _0, nn::applet::AppletResourceUserId _1, uint64_t _2);
		uint32_t EnableSixAxisSensorFusion(bool _0, nn::hid::SixAxisSensorHandle _1, nn::applet::AppletResourceUserId _2, uint64_t _3);
		uint32_t EnableUnintendedHomeButtonInputProtection(bool _0, uint32_t _1, nn::applet::AppletResourceUserId _2, uint64_t _3);
		uint32_t EnableUsbFullKeyController(bool _0);
		uint32_t GetAccelerometerParameters(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, float& _3, float& _4);
		uint32_t GetAccelerometerPlayMode(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, uint32_t& _3);
		uint32_t GetActualVibrationValue(nn::hid::VibrationDeviceHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, nn::hid::VibrationValue& _3);
		uint32_t GetGyroscopeZeroDriftMode(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, uint32_t& _3);
		uint32_t GetJoySixAxisSensorLifoHandle(nn::hid::JoyXpadId _0, IpcService*& _1);
		uint32_t GetJoyXpadIds(int64_t& _0, nn::hid::JoyXpadId *& _1, unsigned int _1_size);
		uint32_t GetJoyXpadLifoHandle(nn::hid::JoyXpadId _0, IpcService*& _1);
		uint32_t GetNpadCommunicationMode(int64_t& _0);
		uint32_t GetNpadHandheldActivationMode(nn::applet::AppletResourceUserId _0, uint64_t _1, int64_t& _2);
		uint32_t GetNpadJoyHoldType(nn::applet::AppletResourceUserId _0, uint64_t _1, int64_t& _2);
		uint32_t GetPlayerLedPattern(uint32_t _0, uint64_t& _1);
		uint32_t GetSixAxisSensorFusionParameters(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, float& _3, float& _4);
		uint32_t GetSixAxisSensorLifoHandle(nn::hid::BasicXpadId _0, IpcService*& _1);
		uint32_t GetSupportedNpadStyleSet(nn::applet::AppletResourceUserId _0, uint64_t _1, nn::hid::NpadStyleTag& _2);
		uint32_t GetVibrationDeviceInfo(nn::hid::VibrationDeviceHandle _0, nn::hid::VibrationDeviceInfoForIpc& _1);
		uint32_t GetXpadIds(int64_t& _0, nn::hid::BasicXpadId *& _1, unsigned int _1_size);
		uint32_t IsSixAxisSensorAtRest(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, bool& _3);
		uint32_t IsSixAxisSensorFusionEnabled(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, bool& _3);
		uint32_t IsUnintendedHomeButtonInputProtectionEnabled(uint32_t _0, nn::applet::AppletResourceUserId _1, uint64_t _2, bool& _3);
		uint32_t IsUsbFullKeyControllerConnected(uint32_t _0, bool& _1);
		uint32_t IsUsbFullKeyControllerEnabled(bool& _0);
		uint32_t IsVibrationPermitted(bool& _0);
		uint32_t MergeSingleJoyAsDualJoy(uint32_t _0, uint32_t _1, nn::applet::AppletResourceUserId _2, uint64_t _3);
		uint32_t PermitVibration(bool _0);
		uint32_t ReleaseXpadIdEventHandle(uint64_t _0);
		uint32_t ResetAccelerometerParameters(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2);
		uint32_t ResetAccelerometerPlayMode(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2);
		uint32_t ResetGyroscopeZeroDriftMode(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2);
		uint32_t ResetSixAxisSensorFusionParameters(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2);
		uint32_t SendVibrationValue(nn::hid::VibrationDeviceHandle _0, nn::hid::VibrationValue _1, nn::applet::AppletResourceUserId _2, uint64_t _3);
		uint32_t SendVibrationValues(nn::applet::AppletResourceUserId _0, nn::hid::VibrationDeviceHandle * _1, unsigned int _1_size, nn::hid::VibrationValue * _2, unsigned int _2_size);
		uint32_t SetAccelerometerParameters(nn::hid::SixAxisSensorHandle _0, float _1, float _2, nn::applet::AppletResourceUserId _3, uint64_t _4);
		uint32_t SetAccelerometerPlayMode(nn::hid::SixAxisSensorHandle _0, uint32_t _1, nn::applet::AppletResourceUserId _2, uint64_t _3);
		uint32_t SetGyroscopeZeroDriftMode(nn::hid::SixAxisSensorHandle _0, uint32_t _1, nn::applet::AppletResourceUserId _2, uint64_t _3);
		uint32_t SetNpadCommunicationMode(nn::applet::AppletResourceUserId _0, int64_t _1, uint64_t _2);
		uint32_t SetNpadHandheldActivationMode(nn::applet::AppletResourceUserId _0, int64_t _1, uint64_t _2);
		uint32_t SetNpadJoyAssignmentModeDual(uint32_t _0, nn::applet::AppletResourceUserId _1, uint64_t _2);
		uint32_t SetNpadJoyAssignmentModeSingle(uint32_t _0, nn::applet::AppletResourceUserId _1, int64_t _2, uint64_t _3);
		uint32_t SetNpadJoyAssignmentModeSingleByDefault(uint32_t _0, nn::applet::AppletResourceUserId _1, uint64_t _2);
		uint32_t SetNpadJoyHoldType(nn::applet::AppletResourceUserId _0, int64_t _1, uint64_t _2);
		uint32_t SetSixAxisSensorFusionParameters(nn::hid::SixAxisSensorHandle _0, float _1, float _2, nn::applet::AppletResourceUserId _3, uint64_t _4);
		uint32_t SetSupportedNpadIdType(nn::applet::AppletResourceUserId _0, uint64_t _1, uint32_t * _2, unsigned int _2_size);
		uint32_t SetSupportedNpadStyleSet(nn::hid::NpadStyleTag _0, nn::applet::AppletResourceUserId _1, uint64_t _2);
		uint32_t StartConsoleSixAxisSensor(nn::hid::ConsoleSixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2);
		uint32_t StartLrAssignmentMode(nn::applet::AppletResourceUserId _0, uint64_t _1);
		uint32_t StartSixAxisSensor(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2);
		uint32_t StopConsoleSixAxisSensor(nn::hid::ConsoleSixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2);
		uint32_t StopLrAssignmentMode(nn::applet::AppletResourceUserId _0, uint64_t _1);
		uint32_t StopSixAxisSensor(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2);
		uint32_t SwapNpadAssignment(uint32_t _0, uint32_t _1, nn::applet::AppletResourceUserId _2, uint64_t _3);
	};
	class IHidSystemServer : public IpcService {
	public:
		IHidSystemServer() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 31: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::SendKeyboardLockKeyEvent: nn::hid::system::KeyboardLockKeyEvent = 0x%x\n", req->GetData<nn::hid::system::KeyboardLockKeyEvent>(8));
				resp->error_code = SendKeyboardLockKeyEvent(req->GetData<nn::hid::system::KeyboardLockKeyEvent>(8));
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::hid::IHidSystemServer::AcquireHomeButtonEventHandle: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = AcquireHomeButtonEventHandle(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid, temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 111: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::ActivateHomeButton: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = ActivateHomeButton(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid);
				return 0;
			}
			case 121: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::hid::IHidSystemServer::AcquireSleepButtonEventHandle: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = AcquireSleepButtonEventHandle(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid, temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 131: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::ActivateSleepButton: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = ActivateSleepButton(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid);
				return 0;
			}
			case 141: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::hid::IHidSystemServer::AcquireCaptureButtonEventHandle: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = AcquireCaptureButtonEventHandle(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid, temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 151: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::ActivateCaptureButton: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = ActivateCaptureButton(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid);
				return 0;
			}
			case 210: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::hid::IHidSystemServer::AcquireNfcDeviceUpdateEventHandle\n");
				resp->error_code = AcquireNfcDeviceUpdateEventHandle(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 211: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				uint32_t* temp3 = (uint32_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::hid::IHidSystemServer::GetNpadsWithNfc\n");
				resp->error_code = GetNpadsWithNfc(*resp->GetDataPointer<int64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 212: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::hid::IHidSystemServer::AcquireNfcActivateEventHandle: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = AcquireNfcActivateEventHandle(req->GetData<uint32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 213: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::ActivateNfc: bool = 0x%x, uint32_t = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<bool>(8), req->GetData<uint32_t>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = ActivateNfc(req->GetData<bool>(8), req->GetData<uint32_t>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 230: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::hid::IHidSystemServer::AcquireIrSensorEventHandle: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = AcquireIrSensorEventHandle(req->GetData<uint32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 231: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::ActivateIrSensor: bool = 0x%x, uint32_t = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<bool>(8), req->GetData<uint32_t>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = ActivateIrSensor(req->GetData<bool>(8), req->GetData<uint32_t>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 301: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::ActivateNpadSystem: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = ActivateNpadSystem(req->GetData<uint32_t>(8));
				return 0;
			}
			case 303: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::ApplyNpadSystemCommonPolicy: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = ApplyNpadSystemCommonPolicy(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid);
				return 0;
			}
			case 304: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::EnableAssigningSingleOnSlSrPress: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = EnableAssigningSingleOnSlSrPress(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid);
				return 0;
			}
			case 305: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::DisableAssigningSingleOnSlSrPress: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = DisableAssigningSingleOnSlSrPress(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid);
				return 0;
			}
			case 306: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::hid::IHidSystemServer::GetLastActiveNpad\n");
				resp->error_code = GetLastActiveNpad(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 307: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::hid::IHidSystemServer::GetNpadSystemExtStyle: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = GetNpadSystemExtStyle(req->GetData<uint32_t>(8), *resp->GetDataPointer<int64_t *>(8), *resp->GetDataPointer<int64_t *>(0x10));
				return 0;
			}
			case 311: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::SetNpadPlayerLedBlinkingDevice: uint32_t = 0x%x, nn::hid::system::DeviceType = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<nn::hid::system::DeviceType>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = SetNpadPlayerLedBlinkingDevice(req->GetData<uint32_t>(8), req->GetData<nn::hid::system::DeviceType>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 321: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::hid::system::UniquePadId* temp3 = (nn::hid::system::UniquePadId *) new uint8_t[temp2];
				ns_print("IPC message to nn::hid::IHidSystemServer::GetUniquePadsFromNpad: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = GetUniquePadsFromNpad(req->GetData<uint32_t>(8), *resp->GetDataPointer<int64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 322: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::hid::IHidSystemServer::GetIrSensorState: uint32_t = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = GetIrSensorState(req->GetData<uint32_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid, *resp->GetDataPointer<int64_t *>(8));
				return 0;
			}
			case 323: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::hid::IHidSystemServer::GetXcdHandleForNpadWithIrSensor: uint32_t = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = GetXcdHandleForNpadWithIrSensor(req->GetData<uint32_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid, *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 500: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::SetAppletResourceUserId: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = SetAppletResourceUserId(req->GetData<nn::applet::AppletResourceUserId>(8));
				return 0;
			}
			case 501: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::RegisterAppletResourceUserId: bool = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<bool>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = RegisterAppletResourceUserId(req->GetData<bool>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				return 0;
			}
			case 502: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::UnregisterAppletResourceUserId: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = UnregisterAppletResourceUserId(req->GetData<nn::applet::AppletResourceUserId>(8));
				return 0;
			}
			case 503: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::EnableAppletToGetInput: bool = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<bool>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = EnableAppletToGetInput(req->GetData<bool>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				return 0;
			}
			case 504: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::SetAruidValidForVibration: bool = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<bool>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = SetAruidValidForVibration(req->GetData<bool>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				return 0;
			}
			case 505: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::EnableAppletToGetSixAxisSensor: bool = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<bool>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = EnableAppletToGetSixAxisSensor(req->GetData<bool>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				return 0;
			}
			case 510: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::SetVibrationMasterVolume: float = %f\n", (double) req->GetData<float>(8));
				resp->error_code = SetVibrationMasterVolume(req->GetData<float>(8));
				return 0;
			}
			case 511: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::hid::IHidSystemServer::GetVibrationMasterVolume\n");
				resp->error_code = GetVibrationMasterVolume(*resp->GetDataPointer<float *>(8));
				return 0;
			}
			case 512: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::BeginPermitVibrationSession: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = BeginPermitVibrationSession(req->GetData<nn::applet::AppletResourceUserId>(8));
				return 0;
			}
			case 513: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::EndPermitVibrationSession\n");
				resp->error_code = EndPermitVibrationSession();
				return 0;
			}
			case 520: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::EnableHandheldHids\n");
				resp->error_code = EnableHandheldHids();
				return 0;
			}
			case 521: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::DisableHandheldHids\n");
				resp->error_code = DisableHandheldHids();
				return 0;
			}
			case 540: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::hid::IHidSystemServer::AcquirePlayReportControllerUsageUpdateEvent\n");
				resp->error_code = AcquirePlayReportControllerUsageUpdateEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 541: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::hid::system::PlayReportControllerUsage* temp3 = (nn::hid::system::PlayReportControllerUsage *) new uint8_t[temp2];
				ns_print("IPC message to nn::hid::IHidSystemServer::GetPlayReportControllerUsages\n");
				resp->error_code = GetPlayReportControllerUsages(*resp->GetDataPointer<int64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 542: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::hid::IHidSystemServer::AcquirePlayReportRegisteredDeviceUpdateEvent\n");
				resp->error_code = AcquirePlayReportRegisteredDeviceUpdateEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 543: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::hid::system::RegisteredDevice* temp3 = (nn::hid::system::RegisteredDevice *) new uint8_t[temp2];
				ns_print("IPC message to nn::hid::IHidSystemServer::GetRegisteredDevices\n");
				resp->error_code = GetRegisteredDevices(*resp->GetDataPointer<int64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 544: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::hid::IHidSystemServer::AcquireConnectionTriggerTimeoutEvent\n");
				resp->error_code = AcquireConnectionTriggerTimeoutEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 545: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::SendConnectionTrigger: nn::bluetooth::Address = %s\n", read_string(req->GetDataPointer<uint8_t *>(0xc), 6).c_str());
				resp->error_code = SendConnectionTrigger(req->GetDataPointer<nn::bluetooth::Address>(0xc));
				return 0;
			}
			case 546: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::hid::IHidSystemServer::AcquireDeviceRegisteredEventForControllerSupport\n");
				resp->error_code = AcquireDeviceRegisteredEventForControllerSupport(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 547: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::hid::IHidSystemServer::GetAllowedBluetoothLinksCount\n");
				resp->error_code = GetAllowedBluetoothLinksCount(*resp->GetDataPointer<int64_t *>(8));
				return 0;
			}
			case 700: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::ActivateUniquePad: nn::applet::AppletResourceUserId = 0x%%lx, nn::hid::system::UniquePadId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8), req->GetData<nn::hid::system::UniquePadId>(0x10));
				resp->error_code = ActivateUniquePad(req->GetData<nn::applet::AppletResourceUserId>(8), req->GetData<nn::hid::system::UniquePadId>(0x10), req->pid);
				return 0;
			}
			case 702: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::hid::IHidSystemServer::AcquireUniquePadConnectionEventHandle\n");
				resp->error_code = AcquireUniquePadConnectionEventHandle(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 703: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::hid::system::UniquePadId* temp3 = (nn::hid::system::UniquePadId *) new uint8_t[temp2];
				ns_print("IPC message to nn::hid::IHidSystemServer::GetUniquePadIds\n");
				resp->error_code = GetUniquePadIds(*resp->GetDataPointer<int64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 751: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::hid::IHidSystemServer::AcquireJoyDetachOnBluetoothOffEventHandle: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = AcquireJoyDetachOnBluetoothOffEventHandle(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid, temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 800: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::hid::system::UniqueSixAxisSensorHandle* temp3 = (nn::hid::system::UniqueSixAxisSensorHandle *) new uint8_t[temp2];
				ns_print("IPC message to nn::hid::IHidSystemServer::ListSixAxisSensorHandles: nn::hid::system::UniquePadId = 0x%%lx\n", req->GetData<nn::hid::system::UniquePadId>(8));
				resp->error_code = ListSixAxisSensorHandles(req->GetData<nn::hid::system::UniquePadId>(8), *resp->GetDataPointer<int64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 801: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::hid::IHidSystemServer::IsSixAxisSensorUserCalibrationSupported: nn::hid::system::UniqueSixAxisSensorHandle = 0x%x\n", req->GetData<nn::hid::system::UniqueSixAxisSensorHandle>(8));
				resp->error_code = IsSixAxisSensorUserCalibrationSupported(req->GetData<nn::hid::system::UniqueSixAxisSensorHandle>(8), *resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 802: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::ResetSixAxisSensorCalibrationValues: nn::hid::system::UniqueSixAxisSensorHandle = 0x%x\n", req->GetData<nn::hid::system::UniqueSixAxisSensorHandle>(8));
				resp->error_code = ResetSixAxisSensorCalibrationValues(req->GetData<nn::hid::system::UniqueSixAxisSensorHandle>(8));
				return 0;
			}
			case 803: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::StartSixAxisSensorUserCalibration: nn::hid::system::UniqueSixAxisSensorHandle = 0x%x\n", req->GetData<nn::hid::system::UniqueSixAxisSensorHandle>(8));
				resp->error_code = StartSixAxisSensorUserCalibration(req->GetData<nn::hid::system::UniqueSixAxisSensorHandle>(8));
				return 0;
			}
			case 804: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::CancelSixAxisSensorUserCalibration: nn::hid::system::UniqueSixAxisSensorHandle = 0x%x\n", req->GetData<nn::hid::system::UniqueSixAxisSensorHandle>(8));
				resp->error_code = CancelSixAxisSensorUserCalibration(req->GetData<nn::hid::system::UniqueSixAxisSensorHandle>(8));
				return 0;
			}
			case 805: {
				resp->GenBuf(0, 0, 10);
				auto temp1 = resp->GetDataPointer<nn::bluetooth::Address>(0xc);
				ns_print("IPC message to nn::hid::IHidSystemServer::GetUniquePadBluetoothAddress: nn::hid::system::UniquePadId = 0x%%lx\n", req->GetData<nn::hid::system::UniquePadId>(8));
				resp->error_code = GetUniquePadBluetoothAddress(req->GetData<nn::hid::system::UniquePadId>(8), temp1);
				return 0;
			}
			case 806: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::DisconnectUniquePad: nn::hid::system::UniquePadId = 0x%%lx\n", req->GetData<nn::hid::system::UniquePadId>(8));
				resp->error_code = DisconnectUniquePad(req->GetData<nn::hid::system::UniquePadId>(8));
				return 0;
			}
			case 821: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::StartAnalogStickManualCalibration: nn::hid::system::UniquePadId = 0x%%lx, int64_t = 0x%%lx\n", req->GetData<nn::hid::system::UniquePadId>(8), req->GetData<int64_t>(0x10));
				resp->error_code = StartAnalogStickManualCalibration(req->GetData<nn::hid::system::UniquePadId>(8), req->GetData<int64_t>(0x10));
				return 0;
			}
			case 822: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::RetryCurrentAnalogStickManualCalibrationStage: nn::hid::system::UniquePadId = 0x%%lx, int64_t = 0x%%lx\n", req->GetData<nn::hid::system::UniquePadId>(8), req->GetData<int64_t>(0x10));
				resp->error_code = RetryCurrentAnalogStickManualCalibrationStage(req->GetData<nn::hid::system::UniquePadId>(8), req->GetData<int64_t>(0x10));
				return 0;
			}
			case 823: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::CancelAnalogStickManualCalibration: nn::hid::system::UniquePadId = 0x%%lx, int64_t = 0x%%lx\n", req->GetData<nn::hid::system::UniquePadId>(8), req->GetData<int64_t>(0x10));
				resp->error_code = CancelAnalogStickManualCalibration(req->GetData<nn::hid::system::UniquePadId>(8), req->GetData<int64_t>(0x10));
				return 0;
			}
			case 824: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::ResetAnalogStickManualCalibration: nn::hid::system::UniquePadId = 0x%%lx, int64_t = 0x%%lx\n", req->GetData<nn::hid::system::UniquePadId>(8), req->GetData<int64_t>(0x10));
				resp->error_code = ResetAnalogStickManualCalibration(req->GetData<nn::hid::system::UniquePadId>(8), req->GetData<int64_t>(0x10));
				return 0;
			}
			case 850: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::hid::IHidSystemServer::IsUsbFullKeyControllerEnabled\n");
				resp->error_code = IsUsbFullKeyControllerEnabled(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 851: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::EnableUsbFullKeyController: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = EnableUsbFullKeyController(req->GetData<bool>(8));
				return 0;
			}
			case 852: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::hid::IHidSystemServer::IsUsbConnected: nn::hid::system::UniquePadId = 0x%%lx\n", req->GetData<nn::hid::system::UniquePadId>(8));
				resp->error_code = IsUsbConnected(req->GetData<nn::hid::system::UniquePadId>(8), *resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 900: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::ActivateInputDetector: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = ActivateInputDetector(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid);
				return 0;
			}
			case 901: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::NotifyInputDetector: nn::hid::system::InputSourceId = 0x%x\n", req->GetData<nn::hid::system::InputSourceId>(8));
				resp->error_code = NotifyInputDetector(req->GetData<nn::hid::system::InputSourceId>(8));
				return 0;
			}
			case 1000: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::InitializeFirmwareUpdate\n");
				resp->error_code = InitializeFirmwareUpdate();
				return 0;
			}
			case 1001: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::hid::IHidSystemServer::GetFirmwareVersion: nn::hid::system::UniquePadId = 0x%%lx\n", req->GetData<nn::hid::system::UniquePadId>(8));
				resp->error_code = GetFirmwareVersion(req->GetData<nn::hid::system::UniquePadId>(8), *resp->GetDataPointer<nn::hid::system::FirmwareVersion *>(8));
				return 0;
			}
			case 1002: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::hid::IHidSystemServer::GetAvailableFirmwareVersion: nn::hid::system::UniquePadId = 0x%%lx\n", req->GetData<nn::hid::system::UniquePadId>(8));
				resp->error_code = GetAvailableFirmwareVersion(req->GetData<nn::hid::system::UniquePadId>(8), *resp->GetDataPointer<nn::hid::system::FirmwareVersion *>(8));
				return 0;
			}
			case 1003: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::hid::IHidSystemServer::IsFirmwareUpdateAvailable: nn::hid::system::UniquePadId = 0x%%lx\n", req->GetData<nn::hid::system::UniquePadId>(8));
				resp->error_code = IsFirmwareUpdateAvailable(req->GetData<nn::hid::system::UniquePadId>(8), *resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 1004: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::hid::IHidSystemServer::CheckFirmwareUpdateRequired: nn::hid::system::UniquePadId = 0x%%lx\n", req->GetData<nn::hid::system::UniquePadId>(8));
				resp->error_code = CheckFirmwareUpdateRequired(req->GetData<nn::hid::system::UniquePadId>(8), *resp->GetDataPointer<int64_t *>(8));
				return 0;
			}
			case 1005: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::hid::IHidSystemServer::StartFirmwareUpdate: nn::hid::system::UniquePadId = 0x%%lx\n", req->GetData<nn::hid::system::UniquePadId>(8));
				resp->error_code = StartFirmwareUpdate(req->GetData<nn::hid::system::UniquePadId>(8), *resp->GetDataPointer<nn::hid::system::FirmwareUpdateDeviceHandle *>(8));
				return 0;
			}
			case 1006: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::hid::IHidSystemServer::AbortFirmwareUpdate\n");
				resp->error_code = AbortFirmwareUpdate();
				return 0;
			}
			case 1007: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::hid::IHidSystemServer::GetFirmwareUpdateState: nn::hid::system::FirmwareUpdateDeviceHandle = 0x%%lx\n", req->GetData<nn::hid::system::FirmwareUpdateDeviceHandle>(8));
				resp->error_code = GetFirmwareUpdateState(req->GetData<nn::hid::system::FirmwareUpdateDeviceHandle>(8), *resp->GetDataPointer<nn::hid::system::FirmwareUpdateState *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::hid::IHidSystemServer", req->cmd_id);
			}
		}
		uint32_t AbortFirmwareUpdate();
		uint32_t AcquireCaptureButtonEventHandle(nn::applet::AppletResourceUserId _0, uint64_t _1, IpcService*& _2);
		uint32_t AcquireConnectionTriggerTimeoutEvent(IpcService*& _0);
		uint32_t AcquireDeviceRegisteredEventForControllerSupport(IpcService*& _0);
		uint32_t AcquireHomeButtonEventHandle(nn::applet::AppletResourceUserId _0, uint64_t _1, IpcService*& _2);
		uint32_t AcquireIrSensorEventHandle(uint32_t _0, IpcService*& _1);
		uint32_t AcquireJoyDetachOnBluetoothOffEventHandle(nn::applet::AppletResourceUserId _0, uint64_t _1, IpcService*& _2);
		uint32_t AcquireNfcActivateEventHandle(uint32_t _0, IpcService*& _1);
		uint32_t AcquireNfcDeviceUpdateEventHandle(IpcService*& _0);
		uint32_t AcquirePlayReportControllerUsageUpdateEvent(IpcService*& _0);
		uint32_t AcquirePlayReportRegisteredDeviceUpdateEvent(IpcService*& _0);
		uint32_t AcquireSleepButtonEventHandle(nn::applet::AppletResourceUserId _0, uint64_t _1, IpcService*& _2);
		uint32_t AcquireUniquePadConnectionEventHandle(IpcService*& _0);
		uint32_t ActivateCaptureButton(nn::applet::AppletResourceUserId _0, uint64_t _1);
		uint32_t ActivateHomeButton(nn::applet::AppletResourceUserId _0, uint64_t _1);
		uint32_t ActivateInputDetector(nn::applet::AppletResourceUserId _0, uint64_t _1);
		uint32_t ActivateIrSensor(bool _0, uint32_t _1, nn::applet::AppletResourceUserId _2, uint64_t _3);
		uint32_t ActivateNfc(bool _0, uint32_t _1, nn::applet::AppletResourceUserId _2, uint64_t _3);
		uint32_t ActivateNpadSystem(uint32_t _0);
		uint32_t ActivateSleepButton(nn::applet::AppletResourceUserId _0, uint64_t _1);
		uint32_t ActivateUniquePad(nn::applet::AppletResourceUserId _0, nn::hid::system::UniquePadId _1, uint64_t _2);
		uint32_t ApplyNpadSystemCommonPolicy(nn::applet::AppletResourceUserId _0, uint64_t _1);
		uint32_t BeginPermitVibrationSession(nn::applet::AppletResourceUserId _0);
		uint32_t CancelAnalogStickManualCalibration(nn::hid::system::UniquePadId _0, int64_t _1);
		uint32_t CancelSixAxisSensorUserCalibration(nn::hid::system::UniqueSixAxisSensorHandle _0);
		uint32_t CheckFirmwareUpdateRequired(nn::hid::system::UniquePadId _0, int64_t& _1);
		uint32_t DisableAssigningSingleOnSlSrPress(nn::applet::AppletResourceUserId _0, uint64_t _1);
		uint32_t DisableHandheldHids();
		uint32_t DisconnectUniquePad(nn::hid::system::UniquePadId _0);
		uint32_t EnableAppletToGetInput(bool _0, nn::applet::AppletResourceUserId _1);
		uint32_t EnableAppletToGetSixAxisSensor(bool _0, nn::applet::AppletResourceUserId _1);
		uint32_t EnableAssigningSingleOnSlSrPress(nn::applet::AppletResourceUserId _0, uint64_t _1);
		uint32_t EnableHandheldHids();
		uint32_t EnableUsbFullKeyController(bool _0);
		uint32_t EndPermitVibrationSession();
		uint32_t GetAllowedBluetoothLinksCount(int64_t& _0);
		uint32_t GetAvailableFirmwareVersion(nn::hid::system::UniquePadId _0, nn::hid::system::FirmwareVersion& _1);
		uint32_t GetFirmwareUpdateState(nn::hid::system::FirmwareUpdateDeviceHandle _0, nn::hid::system::FirmwareUpdateState& _1);
		uint32_t GetFirmwareVersion(nn::hid::system::UniquePadId _0, nn::hid::system::FirmwareVersion& _1);
		uint32_t GetIrSensorState(uint32_t _0, nn::applet::AppletResourceUserId _1, uint64_t _2, int64_t& _3);
		uint32_t GetLastActiveNpad(uint32_t& _0);
		uint32_t GetNpadSystemExtStyle(uint32_t _0, int64_t& _1, int64_t& _2);
		uint32_t GetNpadsWithNfc(int64_t& _0, uint32_t *& _1, unsigned int _1_size);
		uint32_t GetPlayReportControllerUsages(int64_t& _0, nn::hid::system::PlayReportControllerUsage *& _1, unsigned int _1_size);
		uint32_t GetRegisteredDevices(int64_t& _0, nn::hid::system::RegisteredDevice *& _1, unsigned int _1_size);
		uint32_t GetUniquePadBluetoothAddress(nn::hid::system::UniquePadId _0, nn::bluetooth::Address& _1);
		uint32_t GetUniquePadIds(int64_t& _0, nn::hid::system::UniquePadId *& _1, unsigned int _1_size);
		uint32_t GetUniquePadsFromNpad(uint32_t _0, int64_t& _1, nn::hid::system::UniquePadId *& _2, unsigned int _2_size);
		uint32_t GetVibrationMasterVolume(float& _0);
		uint32_t GetXcdHandleForNpadWithIrSensor(uint32_t _0, nn::applet::AppletResourceUserId _1, uint64_t _2, uint64_t& _3);
		uint32_t InitializeFirmwareUpdate();
		uint32_t IsFirmwareUpdateAvailable(nn::hid::system::UniquePadId _0, bool& _1);
		uint32_t IsSixAxisSensorUserCalibrationSupported(nn::hid::system::UniqueSixAxisSensorHandle _0, bool& _1);
		uint32_t IsUsbConnected(nn::hid::system::UniquePadId _0, bool& _1);
		uint32_t IsUsbFullKeyControllerEnabled(bool& _0);
		uint32_t ListSixAxisSensorHandles(nn::hid::system::UniquePadId _0, int64_t& _1, nn::hid::system::UniqueSixAxisSensorHandle *& _2, unsigned int _2_size);
		uint32_t NotifyInputDetector(nn::hid::system::InputSourceId _0);
		uint32_t RegisterAppletResourceUserId(bool _0, nn::applet::AppletResourceUserId _1);
		uint32_t ResetAnalogStickManualCalibration(nn::hid::system::UniquePadId _0, int64_t _1);
		uint32_t ResetSixAxisSensorCalibrationValues(nn::hid::system::UniqueSixAxisSensorHandle _0);
		uint32_t RetryCurrentAnalogStickManualCalibrationStage(nn::hid::system::UniquePadId _0, int64_t _1);
		uint32_t SendConnectionTrigger(nn::bluetooth::Address _0);
		uint32_t SendKeyboardLockKeyEvent(nn::hid::system::KeyboardLockKeyEvent _0);
		uint32_t SetAppletResourceUserId(nn::applet::AppletResourceUserId _0);
		uint32_t SetAruidValidForVibration(bool _0, nn::applet::AppletResourceUserId _1);
		uint32_t SetNpadPlayerLedBlinkingDevice(uint32_t _0, nn::hid::system::DeviceType _1, nn::applet::AppletResourceUserId _2, uint64_t _3);
		uint32_t SetVibrationMasterVolume(float _0);
		uint32_t StartAnalogStickManualCalibration(nn::hid::system::UniquePadId _0, int64_t _1);
		uint32_t StartFirmwareUpdate(nn::hid::system::UniquePadId _0, nn::hid::system::FirmwareUpdateDeviceHandle& _1);
		uint32_t StartSixAxisSensorUserCalibration(nn::hid::system::UniqueSixAxisSensorHandle _0);
		uint32_t UnregisterAppletResourceUserId(nn::applet::AppletResourceUserId _0);
	};
	class IHidTemporaryServer : public IpcService {
	public:
		IHidTemporaryServer() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 24);
				auto temp1 = resp->GetDataPointer<nn::hid::tmp::ConsoleSixAxisSensorCalibrationValues>(8);
				ns_print("IPC message to nn::hid::IHidTemporaryServer::GetConsoleSixAxisSensorCalibrationValues: nn::hid::ConsoleSixAxisSensorHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::hid::ConsoleSixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = GetConsoleSixAxisSensorCalibrationValues(req->GetData<nn::hid::ConsoleSixAxisSensorHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid, temp1);
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::hid::IHidTemporaryServer", req->cmd_id);
			}
		}
		uint32_t GetConsoleSixAxisSensorCalibrationValues(nn::hid::ConsoleSixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, nn::hid::tmp::ConsoleSixAxisSensorCalibrationValues& _3);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::hid::IActiveVibrationDeviceList::ActivateVibrationDevice(nn::hid::VibrationDeviceHandle _0) {
	ns_print("Stub implementation for nn::hid::IActiveVibrationDeviceList::ActivateVibrationDevice\n");
	return 0;
}
uint32_t nn::hid::IAppletResource::GetSharedMemoryHandle(IpcService*& _0) {
	ns_print("Stub implementation for nn::hid::IAppletResource::GetSharedMemoryHandle\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::ActivateFirmwareUpdate() {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::ActivateFirmwareUpdate\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::DeactivateCaptureButton() {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::DeactivateCaptureButton\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::DeactivateConsoleSixAxisSensor() {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::DeactivateConsoleSixAxisSensor\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::DeactivateDebugPad() {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::DeactivateDebugPad\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::DeactivateFirmwareUpdate() {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::DeactivateFirmwareUpdate\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::DeactivateGesture() {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::DeactivateGesture\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::DeactivateHomeButton() {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::DeactivateHomeButton\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::DeactivateInputDetector() {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::DeactivateInputDetector\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::DeactivateJoyXpad(nn::hid::JoyXpadId _0) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::DeactivateJoyXpad\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::DeactivateKeyboard() {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::DeactivateKeyboard\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::DeactivateMouse() {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::DeactivateMouse\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::DeactivateSleepButton() {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::DeactivateSleepButton\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::DeactivateTouchScreen() {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::DeactivateTouchScreen\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::DeactivateXpad(nn::hid::BasicXpadId _0) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::DeactivateXpad\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::DiscardFirmwareInfoCacheForRevert() {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::DiscardFirmwareInfoCacheForRevert\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::GetAvailableFirmwareVersionForRevert(nn::hid::system::UniquePadId _0, nn::hid::system::FirmwareVersion& _1) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::GetAvailableFirmwareVersionForRevert\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::GetDestinationFirmwareVersion(uint32_t _0, nn::hid::system::DeviceType _1, nn::hid::system::FirmwareVersion& _2) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::GetDestinationFirmwareVersion\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::GetFirmwareUpdateStage(int64_t& _0, int64_t& _1) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::GetFirmwareUpdateStage\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::GetFirmwareVersion(uint32_t _0, nn::hid::system::DeviceType _1, nn::hid::system::FirmwareVersion& _2) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::GetFirmwareVersion\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::GetShiftAccelerometerCalibrationValue(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, float& _3, float& _4) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::GetShiftAccelerometerCalibrationValue\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::GetShiftGyroscopeCalibrationValue(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, float& _3, float& _4) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::GetShiftGyroscopeCalibrationValue\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::SetCaptureButtonAutoPilotState(nn::hid::debug::CaptureButtonAutoPilotState _0) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::SetCaptureButtonAutoPilotState\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::SetDebugPadAutoPilotState(nn::hid::debug::DebugPadAutoPilotState _0) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::SetDebugPadAutoPilotState\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::SetHomeButtonAutoPilotState(nn::hid::debug::HomeButtonAutoPilotState _0) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::SetHomeButtonAutoPilotState\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::SetKeyboardAutoPilotState(nn::hid::debug::KeyboardAutoPilotState _0) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::SetKeyboardAutoPilotState\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::SetMouseAutoPilotState(nn::hid::debug::MouseAutoPilotState _0) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::SetMouseAutoPilotState\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::SetShiftAccelerometerCalibrationValue(nn::hid::SixAxisSensorHandle _0, float _1, float _2, nn::applet::AppletResourceUserId _3, uint64_t _4) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::SetShiftAccelerometerCalibrationValue\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::SetShiftGyroscopeCalibrationValue(nn::hid::SixAxisSensorHandle _0, float _1, float _2, nn::applet::AppletResourceUserId _3, uint64_t _4) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::SetShiftGyroscopeCalibrationValue\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::SetSleepButtonAutoPilotState(nn::hid::debug::SleepButtonAutoPilotState _0) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::SetSleepButtonAutoPilotState\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::SetTouchScreenAutoPilotState(nn::hid::TouchState * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::SetTouchScreenAutoPilotState\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::SetXpadAutoPilotState(nn::hid::BasicXpadId _0, nn::hid::debug::BasicXpadAutoPilotState _1) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::SetXpadAutoPilotState\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::StartFirmwareUpdate(nn::hid::system::UniquePadId _0) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::StartFirmwareUpdate\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::StartFirmwareUpdateForRevert(nn::hid::system::UniquePadId _0) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::StartFirmwareUpdateForRevert\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::UnsetCaptureButtonAutoPilotState() {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::UnsetCaptureButtonAutoPilotState\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::UnsetDebugPadAutoPilotState() {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::UnsetDebugPadAutoPilotState\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::UnsetHomeButtonAutoPilotState() {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::UnsetHomeButtonAutoPilotState\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::UnsetKeyboardAutoPilotState() {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::UnsetKeyboardAutoPilotState\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::UnsetMouseAutoPilotState() {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::UnsetMouseAutoPilotState\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::UnsetSleepButtonAutoPilotState() {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::UnsetSleepButtonAutoPilotState\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::UnsetTouchScreenAutoPilotState() {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::UnsetTouchScreenAutoPilotState\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::UnsetXpadAutoPilotState(nn::hid::BasicXpadId _0) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::UnsetXpadAutoPilotState\n");
	return 0;
}
uint32_t nn::hid::IHidDebugServer::UpdateControllerColor(nn::util::Unorm8x4 _0, nn::util::Unorm8x4 _1, nn::hid::system::UniquePadId _2) {
	ns_print("Stub implementation for nn::hid::IHidDebugServer::UpdateControllerColor\n");
	return 0;
}
uint32_t nn::hid::IHidServer::AcquireNpadStyleSetUpdateEventHandle(uint32_t _0, nn::applet::AppletResourceUserId _1, uint64_t _2, uint64_t _3, IpcService*& _4) {
	ns_print("Stub implementation for nn::hid::IHidServer::AcquireNpadStyleSetUpdateEventHandle\n");
	return 0;
}
uint32_t nn::hid::IHidServer::AcquireXpadIdEventHandle(uint64_t _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::hid::IHidServer::AcquireXpadIdEventHandle\n");
	return 0;
}
uint32_t nn::hid::IHidServer::ActivateConsoleSixAxisSensor(nn::applet::AppletResourceUserId _0, uint64_t _1) {
	ns_print("Stub implementation for nn::hid::IHidServer::ActivateConsoleSixAxisSensor\n");
	return 0;
}
uint32_t nn::hid::IHidServer::ActivateDebugPad(nn::applet::AppletResourceUserId _0, uint64_t _1) {
	ns_print("Stub implementation for nn::hid::IHidServer::ActivateDebugPad\n");
	return 0;
}
uint32_t nn::hid::IHidServer::ActivateGesture(int32_t _0, nn::applet::AppletResourceUserId _1, uint64_t _2) {
	ns_print("Stub implementation for nn::hid::IHidServer::ActivateGesture\n");
	return 0;
}
uint32_t nn::hid::IHidServer::ActivateJoySixAxisSensor(nn::hid::JoyXpadId _0) {
	ns_print("Stub implementation for nn::hid::IHidServer::ActivateJoySixAxisSensor\n");
	return 0;
}
uint32_t nn::hid::IHidServer::ActivateJoyXpad(nn::hid::JoyXpadId _0) {
	ns_print("Stub implementation for nn::hid::IHidServer::ActivateJoyXpad\n");
	return 0;
}
uint32_t nn::hid::IHidServer::ActivateKeyboard(nn::applet::AppletResourceUserId _0, uint64_t _1) {
	ns_print("Stub implementation for nn::hid::IHidServer::ActivateKeyboard\n");
	return 0;
}
uint32_t nn::hid::IHidServer::ActivateMouse(nn::applet::AppletResourceUserId _0, uint64_t _1) {
	ns_print("Stub implementation for nn::hid::IHidServer::ActivateMouse\n");
	return 0;
}
uint32_t nn::hid::IHidServer::ActivateNpad(nn::applet::AppletResourceUserId _0, uint64_t _1) {
	ns_print("Stub implementation for nn::hid::IHidServer::ActivateNpad\n");
	return 0;
}
uint32_t nn::hid::IHidServer::ActivateSixAxisSensor(nn::hid::BasicXpadId _0) {
	ns_print("Stub implementation for nn::hid::IHidServer::ActivateSixAxisSensor\n");
	return 0;
}
uint32_t nn::hid::IHidServer::ActivateTouchScreen(nn::applet::AppletResourceUserId _0, uint64_t _1) {
	ns_print("Stub implementation for nn::hid::IHidServer::ActivateTouchScreen\n");
	return 0;
}
uint32_t nn::hid::IHidServer::ActivateXpad(nn::hid::BasicXpadId _0, nn::applet::AppletResourceUserId _1, uint64_t _2) {
	ns_print("Stub implementation for nn::hid::IHidServer::ActivateXpad\n");
	return 0;
}
uint32_t nn::hid::IHidServer::CreateActiveVibrationDeviceList(nn::hid::IActiveVibrationDeviceList*& _0) {
	ns_print("Stub implementation for nn::hid::IHidServer::CreateActiveVibrationDeviceList\n");
	return 0;
}
uint32_t nn::hid::IHidServer::CreateAppletResource(nn::applet::AppletResourceUserId _0, uint64_t _1, nn::hid::IAppletResource*& _2) {
	ns_print("Stub implementation for nn::hid::IHidServer::CreateAppletResource\n");
	return 0;
}
uint32_t nn::hid::IHidServer::DeactivateJoySixAxisSensor(nn::hid::JoyXpadId _0) {
	ns_print("Stub implementation for nn::hid::IHidServer::DeactivateJoySixAxisSensor\n");
	return 0;
}
uint32_t nn::hid::IHidServer::DeactivateNpad(nn::applet::AppletResourceUserId _0, uint64_t _1) {
	ns_print("Stub implementation for nn::hid::IHidServer::DeactivateNpad\n");
	return 0;
}
uint32_t nn::hid::IHidServer::DeactivateSixAxisSensor(nn::hid::BasicXpadId _0) {
	ns_print("Stub implementation for nn::hid::IHidServer::DeactivateSixAxisSensor\n");
	return 0;
}
uint32_t nn::hid::IHidServer::DisconnectNpad(uint32_t _0, nn::applet::AppletResourceUserId _1, uint64_t _2) {
	ns_print("Stub implementation for nn::hid::IHidServer::DisconnectNpad\n");
	return 0;
}
uint32_t nn::hid::IHidServer::EnableSixAxisSensorFusion(bool _0, nn::hid::SixAxisSensorHandle _1, nn::applet::AppletResourceUserId _2, uint64_t _3) {
	ns_print("Stub implementation for nn::hid::IHidServer::EnableSixAxisSensorFusion\n");
	return 0;
}
uint32_t nn::hid::IHidServer::EnableUnintendedHomeButtonInputProtection(bool _0, uint32_t _1, nn::applet::AppletResourceUserId _2, uint64_t _3) {
	ns_print("Stub implementation for nn::hid::IHidServer::EnableUnintendedHomeButtonInputProtection\n");
	return 0;
}
uint32_t nn::hid::IHidServer::EnableUsbFullKeyController(bool _0) {
	ns_print("Stub implementation for nn::hid::IHidServer::EnableUsbFullKeyController\n");
	return 0;
}
uint32_t nn::hid::IHidServer::GetAccelerometerParameters(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, float& _3, float& _4) {
	ns_print("Stub implementation for nn::hid::IHidServer::GetAccelerometerParameters\n");
	return 0;
}
uint32_t nn::hid::IHidServer::GetAccelerometerPlayMode(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, uint32_t& _3) {
	ns_print("Stub implementation for nn::hid::IHidServer::GetAccelerometerPlayMode\n");
	return 0;
}
uint32_t nn::hid::IHidServer::GetActualVibrationValue(nn::hid::VibrationDeviceHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, nn::hid::VibrationValue& _3) {
	ns_print("Stub implementation for nn::hid::IHidServer::GetActualVibrationValue\n");
	return 0;
}
uint32_t nn::hid::IHidServer::GetGyroscopeZeroDriftMode(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, uint32_t& _3) {
	ns_print("Stub implementation for nn::hid::IHidServer::GetGyroscopeZeroDriftMode\n");
	return 0;
}
uint32_t nn::hid::IHidServer::GetJoySixAxisSensorLifoHandle(nn::hid::JoyXpadId _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::hid::IHidServer::GetJoySixAxisSensorLifoHandle\n");
	return 0;
}
uint32_t nn::hid::IHidServer::GetJoyXpadIds(int64_t& _0, nn::hid::JoyXpadId *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::hid::IHidServer::GetJoyXpadIds\n");
	return 0;
}
uint32_t nn::hid::IHidServer::GetJoyXpadLifoHandle(nn::hid::JoyXpadId _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::hid::IHidServer::GetJoyXpadLifoHandle\n");
	return 0;
}
uint32_t nn::hid::IHidServer::GetNpadCommunicationMode(int64_t& _0) {
	ns_print("Stub implementation for nn::hid::IHidServer::GetNpadCommunicationMode\n");
	return 0;
}
uint32_t nn::hid::IHidServer::GetNpadHandheldActivationMode(nn::applet::AppletResourceUserId _0, uint64_t _1, int64_t& _2) {
	ns_print("Stub implementation for nn::hid::IHidServer::GetNpadHandheldActivationMode\n");
	return 0;
}
uint32_t nn::hid::IHidServer::GetNpadJoyHoldType(nn::applet::AppletResourceUserId _0, uint64_t _1, int64_t& _2) {
	ns_print("Stub implementation for nn::hid::IHidServer::GetNpadJoyHoldType\n");
	return 0;
}
uint32_t nn::hid::IHidServer::GetPlayerLedPattern(uint32_t _0, uint64_t& _1) {
	ns_print("Stub implementation for nn::hid::IHidServer::GetPlayerLedPattern\n");
	return 0;
}
uint32_t nn::hid::IHidServer::GetSixAxisSensorFusionParameters(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, float& _3, float& _4) {
	ns_print("Stub implementation for nn::hid::IHidServer::GetSixAxisSensorFusionParameters\n");
	return 0;
}
uint32_t nn::hid::IHidServer::GetSixAxisSensorLifoHandle(nn::hid::BasicXpadId _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::hid::IHidServer::GetSixAxisSensorLifoHandle\n");
	return 0;
}
uint32_t nn::hid::IHidServer::GetSupportedNpadStyleSet(nn::applet::AppletResourceUserId _0, uint64_t _1, nn::hid::NpadStyleTag& _2) {
	ns_print("Stub implementation for nn::hid::IHidServer::GetSupportedNpadStyleSet\n");
	return 0;
}
uint32_t nn::hid::IHidServer::GetVibrationDeviceInfo(nn::hid::VibrationDeviceHandle _0, nn::hid::VibrationDeviceInfoForIpc& _1) {
	ns_print("Stub implementation for nn::hid::IHidServer::GetVibrationDeviceInfo\n");
	return 0;
}
uint32_t nn::hid::IHidServer::GetXpadIds(int64_t& _0, nn::hid::BasicXpadId *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::hid::IHidServer::GetXpadIds\n");
	return 0;
}
uint32_t nn::hid::IHidServer::IsSixAxisSensorAtRest(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, bool& _3) {
	ns_print("Stub implementation for nn::hid::IHidServer::IsSixAxisSensorAtRest\n");
	return 0;
}
uint32_t nn::hid::IHidServer::IsSixAxisSensorFusionEnabled(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, bool& _3) {
	ns_print("Stub implementation for nn::hid::IHidServer::IsSixAxisSensorFusionEnabled\n");
	return 0;
}
uint32_t nn::hid::IHidServer::IsUnintendedHomeButtonInputProtectionEnabled(uint32_t _0, nn::applet::AppletResourceUserId _1, uint64_t _2, bool& _3) {
	ns_print("Stub implementation for nn::hid::IHidServer::IsUnintendedHomeButtonInputProtectionEnabled\n");
	return 0;
}
uint32_t nn::hid::IHidServer::IsUsbFullKeyControllerConnected(uint32_t _0, bool& _1) {
	ns_print("Stub implementation for nn::hid::IHidServer::IsUsbFullKeyControllerConnected\n");
	return 0;
}
uint32_t nn::hid::IHidServer::IsUsbFullKeyControllerEnabled(bool& _0) {
	ns_print("Stub implementation for nn::hid::IHidServer::IsUsbFullKeyControllerEnabled\n");
	return 0;
}
uint32_t nn::hid::IHidServer::IsVibrationPermitted(bool& _0) {
	ns_print("Stub implementation for nn::hid::IHidServer::IsVibrationPermitted\n");
	return 0;
}
uint32_t nn::hid::IHidServer::MergeSingleJoyAsDualJoy(uint32_t _0, uint32_t _1, nn::applet::AppletResourceUserId _2, uint64_t _3) {
	ns_print("Stub implementation for nn::hid::IHidServer::MergeSingleJoyAsDualJoy\n");
	return 0;
}
uint32_t nn::hid::IHidServer::PermitVibration(bool _0) {
	ns_print("Stub implementation for nn::hid::IHidServer::PermitVibration\n");
	return 0;
}
uint32_t nn::hid::IHidServer::ReleaseXpadIdEventHandle(uint64_t _0) {
	ns_print("Stub implementation for nn::hid::IHidServer::ReleaseXpadIdEventHandle\n");
	return 0;
}
uint32_t nn::hid::IHidServer::ResetAccelerometerParameters(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2) {
	ns_print("Stub implementation for nn::hid::IHidServer::ResetAccelerometerParameters\n");
	return 0;
}
uint32_t nn::hid::IHidServer::ResetAccelerometerPlayMode(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2) {
	ns_print("Stub implementation for nn::hid::IHidServer::ResetAccelerometerPlayMode\n");
	return 0;
}
uint32_t nn::hid::IHidServer::ResetGyroscopeZeroDriftMode(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2) {
	ns_print("Stub implementation for nn::hid::IHidServer::ResetGyroscopeZeroDriftMode\n");
	return 0;
}
uint32_t nn::hid::IHidServer::ResetSixAxisSensorFusionParameters(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2) {
	ns_print("Stub implementation for nn::hid::IHidServer::ResetSixAxisSensorFusionParameters\n");
	return 0;
}
uint32_t nn::hid::IHidServer::SendVibrationValue(nn::hid::VibrationDeviceHandle _0, nn::hid::VibrationValue _1, nn::applet::AppletResourceUserId _2, uint64_t _3) {
	ns_print("Stub implementation for nn::hid::IHidServer::SendVibrationValue\n");
	return 0;
}
uint32_t nn::hid::IHidServer::SendVibrationValues(nn::applet::AppletResourceUserId _0, nn::hid::VibrationDeviceHandle * _1, unsigned int _1_size, nn::hid::VibrationValue * _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::hid::IHidServer::SendVibrationValues\n");
	return 0;
}
uint32_t nn::hid::IHidServer::SetAccelerometerParameters(nn::hid::SixAxisSensorHandle _0, float _1, float _2, nn::applet::AppletResourceUserId _3, uint64_t _4) {
	ns_print("Stub implementation for nn::hid::IHidServer::SetAccelerometerParameters\n");
	return 0;
}
uint32_t nn::hid::IHidServer::SetAccelerometerPlayMode(nn::hid::SixAxisSensorHandle _0, uint32_t _1, nn::applet::AppletResourceUserId _2, uint64_t _3) {
	ns_print("Stub implementation for nn::hid::IHidServer::SetAccelerometerPlayMode\n");
	return 0;
}
uint32_t nn::hid::IHidServer::SetGyroscopeZeroDriftMode(nn::hid::SixAxisSensorHandle _0, uint32_t _1, nn::applet::AppletResourceUserId _2, uint64_t _3) {
	ns_print("Stub implementation for nn::hid::IHidServer::SetGyroscopeZeroDriftMode\n");
	return 0;
}
uint32_t nn::hid::IHidServer::SetNpadCommunicationMode(nn::applet::AppletResourceUserId _0, int64_t _1, uint64_t _2) {
	ns_print("Stub implementation for nn::hid::IHidServer::SetNpadCommunicationMode\n");
	return 0;
}
uint32_t nn::hid::IHidServer::SetNpadHandheldActivationMode(nn::applet::AppletResourceUserId _0, int64_t _1, uint64_t _2) {
	ns_print("Stub implementation for nn::hid::IHidServer::SetNpadHandheldActivationMode\n");
	return 0;
}
uint32_t nn::hid::IHidServer::SetNpadJoyAssignmentModeDual(uint32_t _0, nn::applet::AppletResourceUserId _1, uint64_t _2) {
	ns_print("Stub implementation for nn::hid::IHidServer::SetNpadJoyAssignmentModeDual\n");
	return 0;
}
uint32_t nn::hid::IHidServer::SetNpadJoyAssignmentModeSingle(uint32_t _0, nn::applet::AppletResourceUserId _1, int64_t _2, uint64_t _3) {
	ns_print("Stub implementation for nn::hid::IHidServer::SetNpadJoyAssignmentModeSingle\n");
	return 0;
}
uint32_t nn::hid::IHidServer::SetNpadJoyAssignmentModeSingleByDefault(uint32_t _0, nn::applet::AppletResourceUserId _1, uint64_t _2) {
	ns_print("Stub implementation for nn::hid::IHidServer::SetNpadJoyAssignmentModeSingleByDefault\n");
	return 0;
}
uint32_t nn::hid::IHidServer::SetNpadJoyHoldType(nn::applet::AppletResourceUserId _0, int64_t _1, uint64_t _2) {
	ns_print("Stub implementation for nn::hid::IHidServer::SetNpadJoyHoldType\n");
	return 0;
}
uint32_t nn::hid::IHidServer::SetSixAxisSensorFusionParameters(nn::hid::SixAxisSensorHandle _0, float _1, float _2, nn::applet::AppletResourceUserId _3, uint64_t _4) {
	ns_print("Stub implementation for nn::hid::IHidServer::SetSixAxisSensorFusionParameters\n");
	return 0;
}
uint32_t nn::hid::IHidServer::SetSupportedNpadIdType(nn::applet::AppletResourceUserId _0, uint64_t _1, uint32_t * _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::hid::IHidServer::SetSupportedNpadIdType\n");
	return 0;
}
uint32_t nn::hid::IHidServer::SetSupportedNpadStyleSet(nn::hid::NpadStyleTag _0, nn::applet::AppletResourceUserId _1, uint64_t _2) {
	ns_print("Stub implementation for nn::hid::IHidServer::SetSupportedNpadStyleSet\n");
	return 0;
}
uint32_t nn::hid::IHidServer::StartConsoleSixAxisSensor(nn::hid::ConsoleSixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2) {
	ns_print("Stub implementation for nn::hid::IHidServer::StartConsoleSixAxisSensor\n");
	return 0;
}
uint32_t nn::hid::IHidServer::StartLrAssignmentMode(nn::applet::AppletResourceUserId _0, uint64_t _1) {
	ns_print("Stub implementation for nn::hid::IHidServer::StartLrAssignmentMode\n");
	return 0;
}
uint32_t nn::hid::IHidServer::StartSixAxisSensor(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2) {
	ns_print("Stub implementation for nn::hid::IHidServer::StartSixAxisSensor\n");
	return 0;
}
uint32_t nn::hid::IHidServer::StopConsoleSixAxisSensor(nn::hid::ConsoleSixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2) {
	ns_print("Stub implementation for nn::hid::IHidServer::StopConsoleSixAxisSensor\n");
	return 0;
}
uint32_t nn::hid::IHidServer::StopLrAssignmentMode(nn::applet::AppletResourceUserId _0, uint64_t _1) {
	ns_print("Stub implementation for nn::hid::IHidServer::StopLrAssignmentMode\n");
	return 0;
}
uint32_t nn::hid::IHidServer::StopSixAxisSensor(nn::hid::SixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2) {
	ns_print("Stub implementation for nn::hid::IHidServer::StopSixAxisSensor\n");
	return 0;
}
uint32_t nn::hid::IHidServer::SwapNpadAssignment(uint32_t _0, uint32_t _1, nn::applet::AppletResourceUserId _2, uint64_t _3) {
	ns_print("Stub implementation for nn::hid::IHidServer::SwapNpadAssignment\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::AbortFirmwareUpdate() {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::AbortFirmwareUpdate\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::AcquireCaptureButtonEventHandle(nn::applet::AppletResourceUserId _0, uint64_t _1, IpcService*& _2) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::AcquireCaptureButtonEventHandle\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::AcquireConnectionTriggerTimeoutEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::AcquireConnectionTriggerTimeoutEvent\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::AcquireDeviceRegisteredEventForControllerSupport(IpcService*& _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::AcquireDeviceRegisteredEventForControllerSupport\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::AcquireHomeButtonEventHandle(nn::applet::AppletResourceUserId _0, uint64_t _1, IpcService*& _2) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::AcquireHomeButtonEventHandle\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::AcquireIrSensorEventHandle(uint32_t _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::AcquireIrSensorEventHandle\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::AcquireJoyDetachOnBluetoothOffEventHandle(nn::applet::AppletResourceUserId _0, uint64_t _1, IpcService*& _2) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::AcquireJoyDetachOnBluetoothOffEventHandle\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::AcquireNfcActivateEventHandle(uint32_t _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::AcquireNfcActivateEventHandle\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::AcquireNfcDeviceUpdateEventHandle(IpcService*& _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::AcquireNfcDeviceUpdateEventHandle\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::AcquirePlayReportControllerUsageUpdateEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::AcquirePlayReportControllerUsageUpdateEvent\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::AcquirePlayReportRegisteredDeviceUpdateEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::AcquirePlayReportRegisteredDeviceUpdateEvent\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::AcquireSleepButtonEventHandle(nn::applet::AppletResourceUserId _0, uint64_t _1, IpcService*& _2) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::AcquireSleepButtonEventHandle\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::AcquireUniquePadConnectionEventHandle(IpcService*& _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::AcquireUniquePadConnectionEventHandle\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::ActivateCaptureButton(nn::applet::AppletResourceUserId _0, uint64_t _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::ActivateCaptureButton\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::ActivateHomeButton(nn::applet::AppletResourceUserId _0, uint64_t _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::ActivateHomeButton\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::ActivateInputDetector(nn::applet::AppletResourceUserId _0, uint64_t _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::ActivateInputDetector\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::ActivateIrSensor(bool _0, uint32_t _1, nn::applet::AppletResourceUserId _2, uint64_t _3) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::ActivateIrSensor\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::ActivateNfc(bool _0, uint32_t _1, nn::applet::AppletResourceUserId _2, uint64_t _3) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::ActivateNfc\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::ActivateNpadSystem(uint32_t _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::ActivateNpadSystem\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::ActivateSleepButton(nn::applet::AppletResourceUserId _0, uint64_t _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::ActivateSleepButton\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::ActivateUniquePad(nn::applet::AppletResourceUserId _0, nn::hid::system::UniquePadId _1, uint64_t _2) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::ActivateUniquePad\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::ApplyNpadSystemCommonPolicy(nn::applet::AppletResourceUserId _0, uint64_t _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::ApplyNpadSystemCommonPolicy\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::BeginPermitVibrationSession(nn::applet::AppletResourceUserId _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::BeginPermitVibrationSession\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::CancelAnalogStickManualCalibration(nn::hid::system::UniquePadId _0, int64_t _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::CancelAnalogStickManualCalibration\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::CancelSixAxisSensorUserCalibration(nn::hid::system::UniqueSixAxisSensorHandle _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::CancelSixAxisSensorUserCalibration\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::CheckFirmwareUpdateRequired(nn::hid::system::UniquePadId _0, int64_t& _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::CheckFirmwareUpdateRequired\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::DisableAssigningSingleOnSlSrPress(nn::applet::AppletResourceUserId _0, uint64_t _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::DisableAssigningSingleOnSlSrPress\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::DisableHandheldHids() {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::DisableHandheldHids\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::DisconnectUniquePad(nn::hid::system::UniquePadId _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::DisconnectUniquePad\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::EnableAppletToGetInput(bool _0, nn::applet::AppletResourceUserId _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::EnableAppletToGetInput\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::EnableAppletToGetSixAxisSensor(bool _0, nn::applet::AppletResourceUserId _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::EnableAppletToGetSixAxisSensor\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::EnableAssigningSingleOnSlSrPress(nn::applet::AppletResourceUserId _0, uint64_t _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::EnableAssigningSingleOnSlSrPress\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::EnableHandheldHids() {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::EnableHandheldHids\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::EnableUsbFullKeyController(bool _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::EnableUsbFullKeyController\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::EndPermitVibrationSession() {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::EndPermitVibrationSession\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::GetAllowedBluetoothLinksCount(int64_t& _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::GetAllowedBluetoothLinksCount\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::GetAvailableFirmwareVersion(nn::hid::system::UniquePadId _0, nn::hid::system::FirmwareVersion& _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::GetAvailableFirmwareVersion\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::GetFirmwareUpdateState(nn::hid::system::FirmwareUpdateDeviceHandle _0, nn::hid::system::FirmwareUpdateState& _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::GetFirmwareUpdateState\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::GetFirmwareVersion(nn::hid::system::UniquePadId _0, nn::hid::system::FirmwareVersion& _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::GetFirmwareVersion\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::GetIrSensorState(uint32_t _0, nn::applet::AppletResourceUserId _1, uint64_t _2, int64_t& _3) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::GetIrSensorState\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::GetLastActiveNpad(uint32_t& _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::GetLastActiveNpad\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::GetNpadSystemExtStyle(uint32_t _0, int64_t& _1, int64_t& _2) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::GetNpadSystemExtStyle\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::GetNpadsWithNfc(int64_t& _0, uint32_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::GetNpadsWithNfc\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::GetPlayReportControllerUsages(int64_t& _0, nn::hid::system::PlayReportControllerUsage *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::GetPlayReportControllerUsages\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::GetRegisteredDevices(int64_t& _0, nn::hid::system::RegisteredDevice *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::GetRegisteredDevices\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::GetUniquePadBluetoothAddress(nn::hid::system::UniquePadId _0, nn::bluetooth::Address& _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::GetUniquePadBluetoothAddress\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::GetUniquePadIds(int64_t& _0, nn::hid::system::UniquePadId *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::GetUniquePadIds\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::GetUniquePadsFromNpad(uint32_t _0, int64_t& _1, nn::hid::system::UniquePadId *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::GetUniquePadsFromNpad\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::GetVibrationMasterVolume(float& _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::GetVibrationMasterVolume\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::GetXcdHandleForNpadWithIrSensor(uint32_t _0, nn::applet::AppletResourceUserId _1, uint64_t _2, uint64_t& _3) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::GetXcdHandleForNpadWithIrSensor\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::InitializeFirmwareUpdate() {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::InitializeFirmwareUpdate\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::IsFirmwareUpdateAvailable(nn::hid::system::UniquePadId _0, bool& _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::IsFirmwareUpdateAvailable\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::IsSixAxisSensorUserCalibrationSupported(nn::hid::system::UniqueSixAxisSensorHandle _0, bool& _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::IsSixAxisSensorUserCalibrationSupported\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::IsUsbConnected(nn::hid::system::UniquePadId _0, bool& _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::IsUsbConnected\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::IsUsbFullKeyControllerEnabled(bool& _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::IsUsbFullKeyControllerEnabled\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::ListSixAxisSensorHandles(nn::hid::system::UniquePadId _0, int64_t& _1, nn::hid::system::UniqueSixAxisSensorHandle *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::ListSixAxisSensorHandles\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::NotifyInputDetector(nn::hid::system::InputSourceId _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::NotifyInputDetector\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::RegisterAppletResourceUserId(bool _0, nn::applet::AppletResourceUserId _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::RegisterAppletResourceUserId\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::ResetAnalogStickManualCalibration(nn::hid::system::UniquePadId _0, int64_t _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::ResetAnalogStickManualCalibration\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::ResetSixAxisSensorCalibrationValues(nn::hid::system::UniqueSixAxisSensorHandle _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::ResetSixAxisSensorCalibrationValues\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::RetryCurrentAnalogStickManualCalibrationStage(nn::hid::system::UniquePadId _0, int64_t _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::RetryCurrentAnalogStickManualCalibrationStage\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::SendConnectionTrigger(nn::bluetooth::Address _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::SendConnectionTrigger\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::SendKeyboardLockKeyEvent(nn::hid::system::KeyboardLockKeyEvent _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::SendKeyboardLockKeyEvent\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::SetAppletResourceUserId(nn::applet::AppletResourceUserId _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::SetAppletResourceUserId\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::SetAruidValidForVibration(bool _0, nn::applet::AppletResourceUserId _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::SetAruidValidForVibration\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::SetNpadPlayerLedBlinkingDevice(uint32_t _0, nn::hid::system::DeviceType _1, nn::applet::AppletResourceUserId _2, uint64_t _3) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::SetNpadPlayerLedBlinkingDevice\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::SetVibrationMasterVolume(float _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::SetVibrationMasterVolume\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::StartAnalogStickManualCalibration(nn::hid::system::UniquePadId _0, int64_t _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::StartAnalogStickManualCalibration\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::StartFirmwareUpdate(nn::hid::system::UniquePadId _0, nn::hid::system::FirmwareUpdateDeviceHandle& _1) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::StartFirmwareUpdate\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::StartSixAxisSensorUserCalibration(nn::hid::system::UniqueSixAxisSensorHandle _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::StartSixAxisSensorUserCalibration\n");
	return 0;
}
uint32_t nn::hid::IHidSystemServer::UnregisterAppletResourceUserId(nn::applet::AppletResourceUserId _0) {
	ns_print("Stub implementation for nn::hid::IHidSystemServer::UnregisterAppletResourceUserId\n");
	return 0;
}
uint32_t nn::hid::IHidTemporaryServer::GetConsoleSixAxisSensorCalibrationValues(nn::hid::ConsoleSixAxisSensorHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, nn::hid::tmp::ConsoleSixAxisSensorCalibrationValues& _3) {
	ns_print("Stub implementation for nn::hid::IHidTemporaryServer::GetConsoleSixAxisSensorCalibrationValues\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::htc::tenv {
	class IService : public IpcService {
	public:
		IService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::htc::tenv::IService::Unknown0: uint8_t[0x40] = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x40).c_str());
				resp->error_code = Unknown0(req->GetDataPointer<uint8_t *>(8), *resp->GetDataPointer<uint64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::htc::tenv::IService::Unknown1: uint8_t[0x40] = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x40).c_str());
				resp->error_code = Unknown1(req->GetDataPointer<uint8_t *>(8), *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::htc::tenv::IService::Unknown2: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown2(req->GetData<uint64_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::htc::tenv::IService", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint8_t * _0, uint64_t& _1, uint8_t *& _2, unsigned int _2_size);
		uint32_t Unknown1(uint8_t * _0, uint64_t& _1);
		uint32_t Unknown2(uint64_t _0);
	};
	class IServiceManager : public IpcService {
	public:
		IServiceManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::htc::tenv::IServiceManager::Unknown0: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown0(req->GetData<uint64_t>(8), req->pid, temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::htc::tenv::IServiceManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0, uint64_t _1, IUnknown*& _2);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::htc::tenv::IService::Unknown0(uint8_t * _0, uint64_t& _1, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::htc::tenv::IService::Unknown0\n");
	return 0;
}
uint32_t nn::htc::tenv::IService::Unknown1(uint8_t * _0, uint64_t& _1) {
	ns_print("Stub implementation for nn::htc::tenv::IService::Unknown1\n");
	return 0;
}
uint32_t nn::htc::tenv::IService::Unknown2(uint64_t _0) {
	ns_print("Stub implementation for nn::htc::tenv::IService::Unknown2\n");
	return 0;
}
uint32_t nn::htc::tenv::IServiceManager::Unknown0(uint64_t _0, uint64_t _1, IUnknown*& _2) {
	ns_print("Stub implementation for nn::htc::tenv::IServiceManager::Unknown0\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::i2c {
	class IManager : public IpcService {
	public:
		IManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::i2c::IManager::Unknown0: uint16_t = 0x%x, uint32_t = 0x%x, uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint16_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), req->GetData<uint32_t>(0x14));
				resp->error_code = Unknown0(req->GetData<uint16_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), req->GetData<uint32_t>(0x14), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::i2c::IManager::Unknown1: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown1(req->GetData<uint32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::i2c::IManager::Unknown2: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown2(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::i2c::IManager::Unknown3: uint16_t = 0x%x, uint32_t = 0x%x, uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint16_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), req->GetData<uint32_t>(0x14));
				resp->error_code = Unknown3(req->GetData<uint16_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), req->GetData<uint32_t>(0x14), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::i2c::IManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint16_t _0, uint32_t _1, uint32_t _2, uint32_t _3, IUnknown*& _4);
		uint32_t Unknown1(uint32_t _0, IUnknown*& _1);
		uint32_t Unknown2(uint32_t _0, uint8_t& _1);
		uint32_t Unknown3(uint16_t _0, uint32_t _1, uint32_t _2, uint32_t _3, uint8_t& _4);
	};
	class ISession : public IpcService {
	public:
		ISession() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::i2c::ISession::Unknown0: uint32_t = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), temp2);
				resp->error_code = Unknown0(req->GetData<uint32_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::i2c::ISession::Unknown1: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown1(req->GetData<uint32_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::i2c::ISession::Unknown2: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown2(temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::i2c::ISession::Unknown10: uint32_t = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), temp2);
				resp->error_code = Unknown10(req->GetData<uint32_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::i2c::ISession::Unknown11: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown11(req->GetData<uint32_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x22, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::i2c::ISession::Unknown12: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown12(temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::i2c::ISession", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t _0, uint8_t * _1, unsigned int _1_size);
		uint32_t Unknown1(uint32_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown10(uint32_t _0, uint8_t * _1, unsigned int _1_size);
		uint32_t Unknown11(uint32_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown12(uint8_t * _0, unsigned int _0_size, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown2(uint8_t * _0, unsigned int _0_size, uint8_t *& _1, unsigned int _1_size);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::i2c::IManager::Unknown0(uint16_t _0, uint32_t _1, uint32_t _2, uint32_t _3, IUnknown*& _4) {
	ns_print("Stub implementation for nn::i2c::IManager::Unknown0\n");
	return 0;
}
uint32_t nn::i2c::IManager::Unknown1(uint32_t _0, IUnknown*& _1) {
	ns_print("Stub implementation for nn::i2c::IManager::Unknown1\n");
	return 0;
}
uint32_t nn::i2c::IManager::Unknown2(uint32_t _0, uint8_t& _1) {
	ns_print("Stub implementation for nn::i2c::IManager::Unknown2\n");
	return 0;
}
uint32_t nn::i2c::IManager::Unknown3(uint16_t _0, uint32_t _1, uint32_t _2, uint32_t _3, uint8_t& _4) {
	ns_print("Stub implementation for nn::i2c::IManager::Unknown3\n");
	return 0;
}
uint32_t nn::i2c::ISession::Unknown0(uint32_t _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::i2c::ISession::Unknown0\n");
	return 0;
}
uint32_t nn::i2c::ISession::Unknown1(uint32_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::i2c::ISession::Unknown1\n");
	return 0;
}
uint32_t nn::i2c::ISession::Unknown10(uint32_t _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::i2c::ISession::Unknown10\n");
	return 0;
}
uint32_t nn::i2c::ISession::Unknown11(uint32_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::i2c::ISession::Unknown11\n");
	return 0;
}
uint32_t nn::i2c::ISession::Unknown12(uint8_t * _0, unsigned int _0_size, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::i2c::ISession::Unknown12\n");
	return 0;
}
uint32_t nn::i2c::ISession::Unknown2(uint8_t * _0, unsigned int _0_size, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::i2c::ISession::Unknown2\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::idle::detail {
	class IPolicyManagerSystem : public IpcService {
	public:
		IPolicyManagerSystem() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::idle::detail::IPolicyManagerSystem::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::idle::detail::IPolicyManagerSystem::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::idle::detail::IPolicyManagerSystem::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::idle::detail::IPolicyManagerSystem::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::idle::detail::IPolicyManagerSystem::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::idle::detail::IPolicyManagerSystem::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::idle::detail::IPolicyManagerSystem", req->cmd_id);
			}
		}
		uint32_t Unknown0(IpcService*& _0);
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::idle::detail::IPolicyManagerSystem::Unknown0(IpcService*& _0) {
	ns_print("Stub implementation for nn::idle::detail::IPolicyManagerSystem::Unknown0\n");
	return 0;
}
uint32_t nn::idle::detail::IPolicyManagerSystem::Unknown1() {
	ns_print("Stub implementation for nn::idle::detail::IPolicyManagerSystem::Unknown1\n");
	return 0;
}
uint32_t nn::idle::detail::IPolicyManagerSystem::Unknown2() {
	ns_print("Stub implementation for nn::idle::detail::IPolicyManagerSystem::Unknown2\n");
	return 0;
}
uint32_t nn::idle::detail::IPolicyManagerSystem::Unknown3() {
	ns_print("Stub implementation for nn::idle::detail::IPolicyManagerSystem::Unknown3\n");
	return 0;
}
uint32_t nn::idle::detail::IPolicyManagerSystem::Unknown4() {
	ns_print("Stub implementation for nn::idle::detail::IPolicyManagerSystem::Unknown4\n");
	return 0;
}
uint32_t nn::idle::detail::IPolicyManagerSystem::Unknown5() {
	ns_print("Stub implementation for nn::idle::detail::IPolicyManagerSystem::Unknown5\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::irsensor {
	class IIrSensorServer : public IpcService {
	public:
		IIrSensorServer() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 302: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::irsensor::IIrSensorServer::ActivateIrsensor: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = ActivateIrsensor(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid);
				return 0;
			}
			case 303: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::irsensor::IIrSensorServer::DeactivateIrsensor: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = DeactivateIrsensor(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid);
				return 0;
			}
			case 304: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::irsensor::IIrSensorServer::GetIrsensorSharedMemoryHandle: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = GetIrsensorSharedMemoryHandle(req->GetData<nn::applet::AppletResourceUserId>(8), req->pid, temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 305: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::irsensor::IIrSensorServer::StopImageProcessor: nn::irsensor::IrCameraHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::irsensor::IrCameraHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = StopImageProcessor(req->GetData<nn::irsensor::IrCameraHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 306: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::irsensor::IIrSensorServer::RunMomentProcessor: nn::irsensor::IrCameraHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx, nn::irsensor::PackedMomentProcessorConfig = %s\n", req->GetData<nn::irsensor::IrCameraHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), read_string(req->GetDataPointer<uint8_t *>(0x18), 0x20).c_str());
				resp->error_code = RunMomentProcessor(req->GetData<nn::irsensor::IrCameraHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->GetDataPointer<nn::irsensor::PackedMomentProcessorConfig>(0x18), req->pid);
				return 0;
			}
			case 307: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::irsensor::IIrSensorServer::RunClusteringProcessor: nn::irsensor::IrCameraHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx, nn::irsensor::PackedClusteringProcessorConfig = %s\n", req->GetData<nn::irsensor::IrCameraHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), read_string(req->GetDataPointer<uint8_t *>(0x18), 0x28).c_str());
				resp->error_code = RunClusteringProcessor(req->GetData<nn::irsensor::IrCameraHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->GetDataPointer<nn::irsensor::PackedClusteringProcessorConfig>(0x18), req->pid);
				return 0;
			}
			case 308: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::irsensor::IIrSensorServer::RunImageTransferProcessor: nn::irsensor::IrCameraHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx, nn::irsensor::PackedImageTransferProcessorConfig = %s, uint64_t = 0x%%lx, KObject = 0x%x\n", req->GetData<nn::irsensor::IrCameraHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), read_string(req->GetDataPointer<uint8_t *>(0x18), 0x18).c_str(), req->GetData<uint64_t>(0x30), req->GetCopied(0));
				resp->error_code = RunImageTransferProcessor(req->GetData<nn::irsensor::IrCameraHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->GetDataPointer<nn::irsensor::PackedImageTransferProcessorConfig>(0x18), req->GetData<uint64_t>(0x30), req->pid, IPC::GetHandle<IpcService*>(req->GetCopied(0)));
				return 0;
			}
			case 309: {
				resp->GenBuf(0, 0, 16);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::irsensor::IIrSensorServer::GetImageTransferProcessorState: nn::irsensor::IrCameraHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::irsensor::IrCameraHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = GetImageTransferProcessorState(req->GetData<nn::irsensor::IrCameraHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid, *resp->GetDataPointer<nn::irsensor::ImageTransferProcessorState *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 310: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::irsensor::IIrSensorServer::RunTeraPluginProcessor: nn::irsensor::IrCameraHandle = 0x%x, nn::irsensor::PackedTeraPluginProcessorConfig = 0x%%lx, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::irsensor::IrCameraHandle>(8), req->GetData<nn::irsensor::PackedTeraPluginProcessorConfig>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x18));
				resp->error_code = RunTeraPluginProcessor(req->GetData<nn::irsensor::IrCameraHandle>(8), req->GetData<nn::irsensor::PackedTeraPluginProcessorConfig>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x18), req->pid);
				return 0;
			}
			case 311: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::irsensor::IIrSensorServer::GetNpadIrCameraHandle: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = GetNpadIrCameraHandle(req->GetData<uint32_t>(8), *resp->GetDataPointer<nn::irsensor::IrCameraHandle *>(8));
				return 0;
			}
			case 312: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::irsensor::IIrSensorServer::RunDpdProcessor: nn::irsensor::IrCameraHandle = 0x%x, nn::irsensor::PackedDpdProcessorConfig = %s, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::irsensor::IrCameraHandle>(8), read_string(req->GetDataPointer<uint8_t *>(0xc), 0xc).c_str(), req->GetData<nn::applet::AppletResourceUserId>(0x18));
				resp->error_code = RunDpdProcessor(req->GetData<nn::irsensor::IrCameraHandle>(8), req->GetDataPointer<nn::irsensor::PackedDpdProcessorConfig>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x18), req->pid);
				return 0;
			}
			case 313: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::irsensor::IIrSensorServer::SuspendImageProcessor: nn::irsensor::IrCameraHandle = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::irsensor::IrCameraHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = SuspendImageProcessor(req->GetData<nn::irsensor::IrCameraHandle>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			case 314: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::irsensor::IIrSensorServer::CheckFirmwareVersion: nn::irsensor::IrCameraHandle = 0x%x, nn::irsensor::PackedMcuVersion = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::irsensor::IrCameraHandle>(8), req->GetData<nn::irsensor::PackedMcuVersion>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = CheckFirmwareVersion(req->GetData<nn::irsensor::IrCameraHandle>(8), req->GetData<nn::irsensor::PackedMcuVersion>(0xc), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid);
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::irsensor::IIrSensorServer", req->cmd_id);
			}
		}
		uint32_t ActivateIrsensor(nn::applet::AppletResourceUserId _0, uint64_t _1);
		uint32_t CheckFirmwareVersion(nn::irsensor::IrCameraHandle _0, nn::irsensor::PackedMcuVersion _1, nn::applet::AppletResourceUserId _2, uint64_t _3);
		uint32_t DeactivateIrsensor(nn::applet::AppletResourceUserId _0, uint64_t _1);
		uint32_t GetImageTransferProcessorState(nn::irsensor::IrCameraHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, nn::irsensor::ImageTransferProcessorState& _3, uint8_t *& _4, unsigned int _4_size);
		uint32_t GetIrsensorSharedMemoryHandle(nn::applet::AppletResourceUserId _0, uint64_t _1, IpcService*& _2);
		uint32_t GetNpadIrCameraHandle(uint32_t _0, nn::irsensor::IrCameraHandle& _1);
		uint32_t RunClusteringProcessor(nn::irsensor::IrCameraHandle _0, nn::applet::AppletResourceUserId _1, nn::irsensor::PackedClusteringProcessorConfig _2, uint64_t _3);
		uint32_t RunDpdProcessor(nn::irsensor::IrCameraHandle _0, nn::irsensor::PackedDpdProcessorConfig _1, nn::applet::AppletResourceUserId _2, uint64_t _3);
		uint32_t RunImageTransferProcessor(nn::irsensor::IrCameraHandle _0, nn::applet::AppletResourceUserId _1, nn::irsensor::PackedImageTransferProcessorConfig _2, uint64_t _3, uint64_t _4, IpcService* _5);
		uint32_t RunMomentProcessor(nn::irsensor::IrCameraHandle _0, nn::applet::AppletResourceUserId _1, nn::irsensor::PackedMomentProcessorConfig _2, uint64_t _3);
		uint32_t RunTeraPluginProcessor(nn::irsensor::IrCameraHandle _0, nn::irsensor::PackedTeraPluginProcessorConfig _1, nn::applet::AppletResourceUserId _2, uint64_t _3);
		uint32_t StopImageProcessor(nn::irsensor::IrCameraHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2);
		uint32_t SuspendImageProcessor(nn::irsensor::IrCameraHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2);
	};
	class IIrSensorSystemServer : public IpcService {
	public:
		IIrSensorSystemServer() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 500: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::irsensor::IIrSensorSystemServer::SetAppletResourceUserId: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = SetAppletResourceUserId(req->GetData<nn::applet::AppletResourceUserId>(8));
				return 0;
			}
			case 501: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::irsensor::IIrSensorSystemServer::RegisterAppletResourceUserId: bool = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<bool>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = RegisterAppletResourceUserId(req->GetData<bool>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				return 0;
			}
			case 502: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::irsensor::IIrSensorSystemServer::UnregisterAppletResourceUserId: nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<nn::applet::AppletResourceUserId>(8));
				resp->error_code = UnregisterAppletResourceUserId(req->GetData<nn::applet::AppletResourceUserId>(8));
				return 0;
			}
			case 503: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::irsensor::IIrSensorSystemServer::EnableAppletToGetInput: bool = 0x%x, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<bool>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = EnableAppletToGetInput(req->GetData<bool>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::irsensor::IIrSensorSystemServer", req->cmd_id);
			}
		}
		uint32_t EnableAppletToGetInput(bool _0, nn::applet::AppletResourceUserId _1);
		uint32_t RegisterAppletResourceUserId(bool _0, nn::applet::AppletResourceUserId _1);
		uint32_t SetAppletResourceUserId(nn::applet::AppletResourceUserId _0);
		uint32_t UnregisterAppletResourceUserId(nn::applet::AppletResourceUserId _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::irsensor::IIrSensorServer::ActivateIrsensor(nn::applet::AppletResourceUserId _0, uint64_t _1) {
	ns_print("Stub implementation for nn::irsensor::IIrSensorServer::ActivateIrsensor\n");
	return 0;
}
uint32_t nn::irsensor::IIrSensorServer::CheckFirmwareVersion(nn::irsensor::IrCameraHandle _0, nn::irsensor::PackedMcuVersion _1, nn::applet::AppletResourceUserId _2, uint64_t _3) {
	ns_print("Stub implementation for nn::irsensor::IIrSensorServer::CheckFirmwareVersion\n");
	return 0;
}
uint32_t nn::irsensor::IIrSensorServer::DeactivateIrsensor(nn::applet::AppletResourceUserId _0, uint64_t _1) {
	ns_print("Stub implementation for nn::irsensor::IIrSensorServer::DeactivateIrsensor\n");
	return 0;
}
uint32_t nn::irsensor::IIrSensorServer::GetImageTransferProcessorState(nn::irsensor::IrCameraHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2, nn::irsensor::ImageTransferProcessorState& _3, uint8_t *& _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::irsensor::IIrSensorServer::GetImageTransferProcessorState\n");
	return 0;
}
uint32_t nn::irsensor::IIrSensorServer::GetIrsensorSharedMemoryHandle(nn::applet::AppletResourceUserId _0, uint64_t _1, IpcService*& _2) {
	ns_print("Stub implementation for nn::irsensor::IIrSensorServer::GetIrsensorSharedMemoryHandle\n");
	return 0;
}
uint32_t nn::irsensor::IIrSensorServer::GetNpadIrCameraHandle(uint32_t _0, nn::irsensor::IrCameraHandle& _1) {
	ns_print("Stub implementation for nn::irsensor::IIrSensorServer::GetNpadIrCameraHandle\n");
	return 0;
}
uint32_t nn::irsensor::IIrSensorServer::RunClusteringProcessor(nn::irsensor::IrCameraHandle _0, nn::applet::AppletResourceUserId _1, nn::irsensor::PackedClusteringProcessorConfig _2, uint64_t _3) {
	ns_print("Stub implementation for nn::irsensor::IIrSensorServer::RunClusteringProcessor\n");
	return 0;
}
uint32_t nn::irsensor::IIrSensorServer::RunDpdProcessor(nn::irsensor::IrCameraHandle _0, nn::irsensor::PackedDpdProcessorConfig _1, nn::applet::AppletResourceUserId _2, uint64_t _3) {
	ns_print("Stub implementation for nn::irsensor::IIrSensorServer::RunDpdProcessor\n");
	return 0;
}
uint32_t nn::irsensor::IIrSensorServer::RunImageTransferProcessor(nn::irsensor::IrCameraHandle _0, nn::applet::AppletResourceUserId _1, nn::irsensor::PackedImageTransferProcessorConfig _2, uint64_t _3, uint64_t _4, IpcService* _5) {
	ns_print("Stub implementation for nn::irsensor::IIrSensorServer::RunImageTransferProcessor\n");
	return 0;
}
uint32_t nn::irsensor::IIrSensorServer::RunMomentProcessor(nn::irsensor::IrCameraHandle _0, nn::applet::AppletResourceUserId _1, nn::irsensor::PackedMomentProcessorConfig _2, uint64_t _3) {
	ns_print("Stub implementation for nn::irsensor::IIrSensorServer::RunMomentProcessor\n");
	return 0;
}
uint32_t nn::irsensor::IIrSensorServer::RunTeraPluginProcessor(nn::irsensor::IrCameraHandle _0, nn::irsensor::PackedTeraPluginProcessorConfig _1, nn::applet::AppletResourceUserId _2, uint64_t _3) {
	ns_print("Stub implementation for nn::irsensor::IIrSensorServer::RunTeraPluginProcessor\n");
	return 0;
}
uint32_t nn::irsensor::IIrSensorServer::StopImageProcessor(nn::irsensor::IrCameraHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2) {
	ns_print("Stub implementation for nn::irsensor::IIrSensorServer::StopImageProcessor\n");
	return 0;
}
uint32_t nn::irsensor::IIrSensorServer::SuspendImageProcessor(nn::irsensor::IrCameraHandle _0, nn::applet::AppletResourceUserId _1, uint64_t _2) {
	ns_print("Stub implementation for nn::irsensor::IIrSensorServer::SuspendImageProcessor\n");
	return 0;
}
uint32_t nn::irsensor::IIrSensorSystemServer::EnableAppletToGetInput(bool _0, nn::applet::AppletResourceUserId _1) {
	ns_print("Stub implementation for nn::irsensor::IIrSensorSystemServer::EnableAppletToGetInput\n");
	return 0;
}
uint32_t nn::irsensor::IIrSensorSystemServer::RegisterAppletResourceUserId(bool _0, nn::applet::AppletResourceUserId _1) {
	ns_print("Stub implementation for nn::irsensor::IIrSensorSystemServer::RegisterAppletResourceUserId\n");
	return 0;
}
uint32_t nn::irsensor::IIrSensorSystemServer::SetAppletResourceUserId(nn::applet::AppletResourceUserId _0) {
	ns_print("Stub implementation for nn::irsensor::IIrSensorSystemServer::SetAppletResourceUserId\n");
	return 0;
}
uint32_t nn::irsensor::IIrSensorSystemServer::UnregisterAppletResourceUserId(nn::applet::AppletResourceUserId _0) {
	ns_print("Stub implementation for nn::irsensor::IIrSensorSystemServer::UnregisterAppletResourceUserId\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::lbl::detail {
	class ILblController : public IpcService {
	public:
		ILblController() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown2: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown2(req->GetData<uint32_t>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown3\n");
				resp->error_code = Unknown3(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown5\n");
				resp->error_code = Unknown5(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown6: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown6(req->GetData<uint64_t>(8));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown7: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown7(req->GetData<uint64_t>(8));
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown8\n");
				resp->error_code = Unknown8(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown11\n");
				resp->error_code = Unknown11(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown12\n");
				resp->error_code = Unknown12();
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown13\n");
				resp->error_code = Unknown13();
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown14\n");
				resp->error_code = Unknown14(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown15: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown15(req->GetData<uint32_t>(8));
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown16\n");
				resp->error_code = Unknown16(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown17: uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Unknown17(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown18: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown18(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown19: uint8_t[0xc] = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0xc).c_str());
				resp->error_code = Unknown19(req->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 12);
				auto temp1 = resp->GetDataPointer<uint8_t *>(8);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown20\n");
				resp->error_code = Unknown20(temp1);
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown21: uint8_t[0xc] = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0xc).c_str());
				resp->error_code = Unknown21(req->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 12);
				auto temp1 = resp->GetDataPointer<uint8_t *>(8);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown22\n");
				resp->error_code = Unknown22(temp1);
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown23\n");
				resp->error_code = Unknown23(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 24: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown24: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown24(req->GetData<uint32_t>(8));
				return 0;
			}
			case 25: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown25\n");
				resp->error_code = Unknown25(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 26: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown26\n");
				resp->error_code = Unknown26();
				return 0;
			}
			case 27: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown27\n");
				resp->error_code = Unknown27();
				return 0;
			}
			case 28: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::lbl::detail::ILblController::Unknown28\n");
				resp->error_code = Unknown28(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::lbl::detail::ILblController", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown10();
		uint32_t Unknown11(uint8_t& _0);
		uint32_t Unknown12();
		uint32_t Unknown13();
		uint32_t Unknown14(uint8_t& _0);
		uint32_t Unknown15(uint32_t _0);
		uint32_t Unknown16(uint32_t& _0);
		uint32_t Unknown17(uint32_t _0, uint32_t _1);
		uint32_t Unknown18(uint32_t _0, uint32_t& _1);
		uint32_t Unknown19(uint8_t * _0);
		uint32_t Unknown2(uint32_t _0);
		uint32_t Unknown20(uint8_t *& _0);
		uint32_t Unknown21(uint8_t * _0);
		uint32_t Unknown22(uint8_t *& _0);
		uint32_t Unknown23(uint8_t& _0);
		uint32_t Unknown24(uint32_t _0);
		uint32_t Unknown25(uint32_t& _0);
		uint32_t Unknown26();
		uint32_t Unknown27();
		uint32_t Unknown28(uint8_t& _0);
		uint32_t Unknown3(uint32_t& _0);
		uint32_t Unknown4();
		uint32_t Unknown5(uint32_t& _0);
		uint32_t Unknown6(uint64_t _0);
		uint32_t Unknown7(uint64_t _0);
		uint32_t Unknown8(uint32_t& _0);
		uint32_t Unknown9();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::lbl::detail::ILblController::Unknown0() {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown0\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown1() {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown1\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown10() {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown10\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown11(uint8_t& _0) {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown11\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown12() {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown12\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown13() {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown13\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown14(uint8_t& _0) {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown14\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown15(uint32_t _0) {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown15\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown16(uint32_t& _0) {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown16\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown17(uint32_t _0, uint32_t _1) {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown17\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown18(uint32_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown18\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown19(uint8_t * _0) {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown19\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown2(uint32_t _0) {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown2\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown20(uint8_t *& _0) {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown20\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown21(uint8_t * _0) {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown21\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown22(uint8_t *& _0) {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown22\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown23(uint8_t& _0) {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown23\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown24(uint32_t _0) {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown24\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown25(uint32_t& _0) {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown25\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown26() {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown26\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown27() {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown27\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown28(uint8_t& _0) {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown28\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown3(uint32_t& _0) {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown3\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown4() {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown4\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown5(uint32_t& _0) {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown5\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown6(uint64_t _0) {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown6\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown7(uint64_t _0) {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown7\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown8(uint32_t& _0) {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown8\n");
	return 0;
}
uint32_t nn::lbl::detail::ILblController::Unknown9() {
	ns_print("Stub implementation for nn::lbl::detail::ILblController::Unknown9\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::ldn::detail {
	class IMonitorService : public IpcService {
	public:
		IMonitorService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::ldn::detail::IMonitorService::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ldn::detail::IMonitorService::Unknown1\n");
				resp->error_code = Unknown1(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::ldn::detail::IMonitorService::Unknown2\n");
				resp->error_code = Unknown2(*resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 2);
				ns_print("IPC message to nn::ldn::detail::IMonitorService::Unknown3\n");
				resp->error_code = Unknown3(*resp->GetDataPointer<uint16_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 32);
				auto temp1 = resp->GetDataPointer<uint8_t *>(8);
				ns_print("IPC message to nn::ldn::detail::IMonitorService::Unknown4\n");
				resp->error_code = Unknown4(temp1);
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 32);
				auto temp1 = resp->GetDataPointer<uint8_t *>(8);
				ns_print("IPC message to nn::ldn::detail::IMonitorService::Unknown5\n");
				resp->error_code = Unknown5(temp1);
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::IMonitorService::Unknown100\n");
				resp->error_code = Unknown100();
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::IMonitorService::Unknown101\n");
				resp->error_code = Unknown101();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ldn::detail::IMonitorService", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t& _0);
		uint32_t Unknown1(uint8_t *& _0, unsigned int _0_size);
		uint32_t Unknown100();
		uint32_t Unknown101();
		uint32_t Unknown2(uint32_t& _0, uint32_t& _1);
		uint32_t Unknown3(uint16_t& _0);
		uint32_t Unknown4(uint8_t *& _0);
		uint32_t Unknown5(uint8_t *& _0);
	};
	class IMonitorServiceCreator : public IpcService {
	public:
		IMonitorServiceCreator() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::ldn::detail::IMonitorServiceCreator::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ldn::detail::IMonitorServiceCreator", req->cmd_id);
			}
		}
		uint32_t Unknown0(IUnknown*& _0);
	};
	class ISystemLocalCommunicationService : public IpcService {
	public:
		ISystemLocalCommunicationService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown1\n");
				resp->error_code = Unknown1(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown2\n");
				resp->error_code = Unknown2(*resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 2);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown3\n");
				resp->error_code = Unknown3(*resp->GetDataPointer<uint16_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 32);
				auto temp1 = resp->GetDataPointer<uint8_t *>(8);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown4\n");
				resp->error_code = Unknown4(temp1);
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 32);
				auto temp1 = resp->GetDataPointer<uint8_t *>(8);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown5\n");
				resp->error_code = Unknown5(temp1);
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown100\n");
				resp->error_code = Unknown100(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0xa, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown101\n");
				resp->error_code = Unknown101(temp3, temp2, temp6, temp5);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 102: {
				resp->GenBuf(0, 0, 2);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown102: uint16_t = 0x%x, uint8_t[0x60] = %s\n", req->GetData<uint16_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x60).c_str());
				resp->error_code = Unknown102(req->GetData<uint16_t>(8), req->GetDataPointer<uint8_t *>(0x10), *resp->GetDataPointer<uint16_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 103: {
				resp->GenBuf(0, 0, 2);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown103: uint16_t = 0x%x, uint8_t[0x60] = %s\n", req->GetData<uint16_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x60).c_str());
				resp->error_code = Unknown103(req->GetData<uint16_t>(8), req->GetDataPointer<uint8_t *>(0x10), *resp->GetDataPointer<uint16_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 200: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown200\n");
				resp->error_code = Unknown200();
				return 0;
			}
			case 201: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown201\n");
				resp->error_code = Unknown201();
				return 0;
			}
			case 202: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown202: uint8_t[0x44] = %s, uint8_t[0x30] = %s, uint8_t[0x20] = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x44).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x4c), 0x30).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x80), 0x20).c_str());
				resp->error_code = Unknown202(req->GetDataPointer<uint8_t *>(8), req->GetDataPointer<uint8_t *>(0x4c), req->GetDataPointer<uint8_t *>(0x80));
				return 0;
			}
			case 203: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown203: uint8_t[0x44] = %s, uint8_t[0x20] = %s, uint8_t[0x30] = %s, uint8_t[0x20] = %s, uint8_t *= buffer<0x%lx>\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x44).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x4c), 0x20).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x6c), 0x30).c_str(), read_string(req->GetDataPointer<uint8_t *>(0xa0), 0x20).c_str(), temp2);
				resp->error_code = Unknown203(req->GetDataPointer<uint8_t *>(8), req->GetDataPointer<uint8_t *>(0x4c), req->GetDataPointer<uint8_t *>(0x6c), req->GetDataPointer<uint8_t *>(0xa0), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 204: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown204\n");
				resp->error_code = Unknown204();
				return 0;
			}
			case 205: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown205: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown205(req->GetData<uint32_t>(8));
				return 0;
			}
			case 206: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown206: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown206(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 207: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown207: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown207(req->GetData<uint8_t>(8));
				return 0;
			}
			case 208: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown208: uint8_t[6] = %s\n", read_string(req->GetDataPointer<uint8_t *>(0xc), 6).c_str());
				resp->error_code = Unknown208(req->GetDataPointer<uint8_t *>(0xc));
				return 0;
			}
			case 209: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown209\n");
				resp->error_code = Unknown209();
				return 0;
			}
			case 300: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown300\n");
				resp->error_code = Unknown300();
				return 0;
			}
			case 301: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown301\n");
				resp->error_code = Unknown301();
				return 0;
			}
			case 302: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown302: uint8_t[0x44] = %s, uint8_t[0x30] = %s, uint32_t = 0x%x, uint32_t = 0x%x, uint8_t *= buffer<0x%lx>\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x44).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x4c), 0x30).c_str(), req->GetData<uint32_t>(0x7c), req->GetData<uint32_t>(0x80), temp2);
				resp->error_code = Unknown302(req->GetDataPointer<uint8_t *>(8), req->GetDataPointer<uint8_t *>(0x4c), req->GetData<uint32_t>(0x7c), req->GetData<uint32_t>(0x80), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 303: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown303: uint8_t[0x44] = %s, uint8_t[0x20] = %s, uint8_t[0x30] = %s, uint32_t = 0x%x, uint32_t = 0x%x, uint8_t[0x20] = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x44).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x4c), 0x20).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x6c), 0x30).c_str(), req->GetData<uint32_t>(0x9c), req->GetData<uint32_t>(0xa0), read_string(req->GetDataPointer<uint8_t *>(0xa8), 0x20).c_str());
				resp->error_code = Unknown303(req->GetDataPointer<uint8_t *>(8), req->GetDataPointer<uint8_t *>(0x4c), req->GetDataPointer<uint8_t *>(0x6c), req->GetData<uint32_t>(0x9c), req->GetData<uint32_t>(0xa0), req->GetDataPointer<uint8_t *>(0xa8));
				return 0;
			}
			case 304: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown304\n");
				resp->error_code = Unknown304();
				return 0;
			}
			case 400: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown400: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown400(req->GetData<uint64_t>(8), req->pid);
				return 0;
			}
			case 401: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::ISystemLocalCommunicationService::Unknown401\n");
				resp->error_code = Unknown401();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ldn::detail::ISystemLocalCommunicationService", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t& _0);
		uint32_t Unknown1(uint8_t *& _0, unsigned int _0_size);
		uint32_t Unknown100(IpcService*& _0);
		uint32_t Unknown101(uint8_t *& _0, unsigned int _0_size, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown102(uint16_t _0, uint8_t * _1, uint16_t& _2, uint8_t *& _3, unsigned int _3_size);
		uint32_t Unknown103(uint16_t _0, uint8_t * _1, uint16_t& _2, uint8_t *& _3, unsigned int _3_size);
		uint32_t Unknown2(uint32_t& _0, uint32_t& _1);
		uint32_t Unknown200();
		uint32_t Unknown201();
		uint32_t Unknown202(uint8_t * _0, uint8_t * _1, uint8_t * _2);
		uint32_t Unknown203(uint8_t * _0, uint8_t * _1, uint8_t * _2, uint8_t * _3, uint8_t * _4, unsigned int _4_size);
		uint32_t Unknown204();
		uint32_t Unknown205(uint32_t _0);
		uint32_t Unknown206(uint8_t * _0, unsigned int _0_size);
		uint32_t Unknown207(uint8_t _0);
		uint32_t Unknown208(uint8_t * _0);
		uint32_t Unknown209();
		uint32_t Unknown3(uint16_t& _0);
		uint32_t Unknown300();
		uint32_t Unknown301();
		uint32_t Unknown302(uint8_t * _0, uint8_t * _1, uint32_t _2, uint32_t _3, uint8_t * _4, unsigned int _4_size);
		uint32_t Unknown303(uint8_t * _0, uint8_t * _1, uint8_t * _2, uint32_t _3, uint32_t _4, uint8_t * _5);
		uint32_t Unknown304();
		uint32_t Unknown4(uint8_t *& _0);
		uint32_t Unknown400(uint64_t _0, uint64_t _1);
		uint32_t Unknown401();
		uint32_t Unknown5(uint8_t *& _0);
	};
	class ISystemServiceCreator : public IpcService {
	public:
		ISystemServiceCreator() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::ldn::detail::ISystemServiceCreator::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ldn::detail::ISystemServiceCreator", req->cmd_id);
			}
		}
		uint32_t Unknown0(IUnknown*& _0);
	};
	class IUserLocalCommunicationService : public IpcService {
	public:
		IUserLocalCommunicationService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown1\n");
				resp->error_code = Unknown1(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown2\n");
				resp->error_code = Unknown2(*resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 2);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown3\n");
				resp->error_code = Unknown3(*resp->GetDataPointer<uint16_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 32);
				auto temp1 = resp->GetDataPointer<uint8_t *>(8);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown4\n");
				resp->error_code = Unknown4(temp1);
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 32);
				auto temp1 = resp->GetDataPointer<uint8_t *>(8);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown5\n");
				resp->error_code = Unknown5(temp1);
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown100\n");
				resp->error_code = Unknown100(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0xa, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown101\n");
				resp->error_code = Unknown101(temp3, temp2, temp6, temp5);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 102: {
				resp->GenBuf(0, 0, 2);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown102: uint16_t = 0x%x, uint8_t[0x60] = %s\n", req->GetData<uint16_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x60).c_str());
				resp->error_code = Unknown102(req->GetData<uint16_t>(8), req->GetDataPointer<uint8_t *>(0x10), *resp->GetDataPointer<uint16_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 103: {
				resp->GenBuf(0, 0, 2);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown103: uint16_t = 0x%x, uint8_t[0x60] = %s\n", req->GetData<uint16_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x60).c_str());
				resp->error_code = Unknown103(req->GetData<uint16_t>(8), req->GetDataPointer<uint8_t *>(0x10), *resp->GetDataPointer<uint16_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 200: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown200\n");
				resp->error_code = Unknown200();
				return 0;
			}
			case 201: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown201\n");
				resp->error_code = Unknown201();
				return 0;
			}
			case 202: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown202: uint8_t[0x44] = %s, uint8_t[0x30] = %s, uint8_t[0x20] = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x44).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x4c), 0x30).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x80), 0x20).c_str());
				resp->error_code = Unknown202(req->GetDataPointer<uint8_t *>(8), req->GetDataPointer<uint8_t *>(0x4c), req->GetDataPointer<uint8_t *>(0x80));
				return 0;
			}
			case 203: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown203: uint8_t[0x44] = %s, uint8_t[0x20] = %s, uint8_t[0x30] = %s, uint8_t[0x20] = %s, uint8_t *= buffer<0x%lx>\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x44).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x4c), 0x20).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x6c), 0x30).c_str(), read_string(req->GetDataPointer<uint8_t *>(0xa0), 0x20).c_str(), temp2);
				resp->error_code = Unknown203(req->GetDataPointer<uint8_t *>(8), req->GetDataPointer<uint8_t *>(0x4c), req->GetDataPointer<uint8_t *>(0x6c), req->GetDataPointer<uint8_t *>(0xa0), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 204: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown204\n");
				resp->error_code = Unknown204();
				return 0;
			}
			case 205: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown205: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown205(req->GetData<uint32_t>(8));
				return 0;
			}
			case 206: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown206: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown206(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 207: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown207: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown207(req->GetData<uint8_t>(8));
				return 0;
			}
			case 208: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown208: uint8_t[6] = %s\n", read_string(req->GetDataPointer<uint8_t *>(0xc), 6).c_str());
				resp->error_code = Unknown208(req->GetDataPointer<uint8_t *>(0xc));
				return 0;
			}
			case 209: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown209\n");
				resp->error_code = Unknown209();
				return 0;
			}
			case 300: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown300\n");
				resp->error_code = Unknown300();
				return 0;
			}
			case 301: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown301\n");
				resp->error_code = Unknown301();
				return 0;
			}
			case 302: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown302: uint8_t[0x44] = %s, uint8_t[0x30] = %s, uint32_t = 0x%x, uint32_t = 0x%x, uint8_t *= buffer<0x%lx>\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x44).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x4c), 0x30).c_str(), req->GetData<uint32_t>(0x7c), req->GetData<uint32_t>(0x80), temp2);
				resp->error_code = Unknown302(req->GetDataPointer<uint8_t *>(8), req->GetDataPointer<uint8_t *>(0x4c), req->GetData<uint32_t>(0x7c), req->GetData<uint32_t>(0x80), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 303: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown303: uint8_t[0x44] = %s, uint8_t[0x20] = %s, uint8_t[0x30] = %s, uint32_t = 0x%x, uint32_t = 0x%x, uint8_t[0x20] = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x44).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x4c), 0x20).c_str(), read_string(req->GetDataPointer<uint8_t *>(0x6c), 0x30).c_str(), req->GetData<uint32_t>(0x9c), req->GetData<uint32_t>(0xa0), read_string(req->GetDataPointer<uint8_t *>(0xa8), 0x20).c_str());
				resp->error_code = Unknown303(req->GetDataPointer<uint8_t *>(8), req->GetDataPointer<uint8_t *>(0x4c), req->GetDataPointer<uint8_t *>(0x6c), req->GetData<uint32_t>(0x9c), req->GetData<uint32_t>(0xa0), req->GetDataPointer<uint8_t *>(0xa8));
				return 0;
			}
			case 304: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown304\n");
				resp->error_code = Unknown304();
				return 0;
			}
			case 400: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown400: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown400(req->GetData<uint64_t>(8), req->pid);
				return 0;
			}
			case 401: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldn::detail::IUserLocalCommunicationService::Unknown401\n");
				resp->error_code = Unknown401();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ldn::detail::IUserLocalCommunicationService", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t& _0);
		uint32_t Unknown1(uint8_t *& _0, unsigned int _0_size);
		uint32_t Unknown100(IpcService*& _0);
		uint32_t Unknown101(uint8_t *& _0, unsigned int _0_size, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown102(uint16_t _0, uint8_t * _1, uint16_t& _2, uint8_t *& _3, unsigned int _3_size);
		uint32_t Unknown103(uint16_t _0, uint8_t * _1, uint16_t& _2, uint8_t *& _3, unsigned int _3_size);
		uint32_t Unknown2(uint32_t& _0, uint32_t& _1);
		uint32_t Unknown200();
		uint32_t Unknown201();
		uint32_t Unknown202(uint8_t * _0, uint8_t * _1, uint8_t * _2);
		uint32_t Unknown203(uint8_t * _0, uint8_t * _1, uint8_t * _2, uint8_t * _3, uint8_t * _4, unsigned int _4_size);
		uint32_t Unknown204();
		uint32_t Unknown205(uint32_t _0);
		uint32_t Unknown206(uint8_t * _0, unsigned int _0_size);
		uint32_t Unknown207(uint8_t _0);
		uint32_t Unknown208(uint8_t * _0);
		uint32_t Unknown209();
		uint32_t Unknown3(uint16_t& _0);
		uint32_t Unknown300();
		uint32_t Unknown301();
		uint32_t Unknown302(uint8_t * _0, uint8_t * _1, uint32_t _2, uint32_t _3, uint8_t * _4, unsigned int _4_size);
		uint32_t Unknown303(uint8_t * _0, uint8_t * _1, uint8_t * _2, uint32_t _3, uint32_t _4, uint8_t * _5);
		uint32_t Unknown304();
		uint32_t Unknown4(uint8_t *& _0);
		uint32_t Unknown400(uint64_t _0, uint64_t _1);
		uint32_t Unknown401();
		uint32_t Unknown5(uint8_t *& _0);
	};
	class IUserServiceCreator : public IpcService {
	public:
		IUserServiceCreator() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::ldn::detail::IUserServiceCreator::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ldn::detail::IUserServiceCreator", req->cmd_id);
			}
		}
		uint32_t Unknown0(IUnknown*& _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::ldn::detail::IMonitorService::Unknown0(uint32_t& _0) {
	ns_print("Stub implementation for nn::ldn::detail::IMonitorService::Unknown0\n");
	return 0;
}
uint32_t nn::ldn::detail::IMonitorService::Unknown1(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::ldn::detail::IMonitorService::Unknown1\n");
	return 0;
}
uint32_t nn::ldn::detail::IMonitorService::Unknown100() {
	ns_print("Stub implementation for nn::ldn::detail::IMonitorService::Unknown100\n");
	return 0;
}
uint32_t nn::ldn::detail::IMonitorService::Unknown101() {
	ns_print("Stub implementation for nn::ldn::detail::IMonitorService::Unknown101\n");
	return 0;
}
uint32_t nn::ldn::detail::IMonitorService::Unknown2(uint32_t& _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::ldn::detail::IMonitorService::Unknown2\n");
	return 0;
}
uint32_t nn::ldn::detail::IMonitorService::Unknown3(uint16_t& _0) {
	ns_print("Stub implementation for nn::ldn::detail::IMonitorService::Unknown3\n");
	return 0;
}
uint32_t nn::ldn::detail::IMonitorService::Unknown4(uint8_t *& _0) {
	ns_print("Stub implementation for nn::ldn::detail::IMonitorService::Unknown4\n");
	return 0;
}
uint32_t nn::ldn::detail::IMonitorService::Unknown5(uint8_t *& _0) {
	ns_print("Stub implementation for nn::ldn::detail::IMonitorService::Unknown5\n");
	return 0;
}
uint32_t nn::ldn::detail::IMonitorServiceCreator::Unknown0(IUnknown*& _0) {
	ns_print("Stub implementation for nn::ldn::detail::IMonitorServiceCreator::Unknown0\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown0(uint32_t& _0) {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown0\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown1(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown1\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown100(IpcService*& _0) {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown100\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown101(uint8_t *& _0, unsigned int _0_size, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown101\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown102(uint16_t _0, uint8_t * _1, uint16_t& _2, uint8_t *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown102\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown103(uint16_t _0, uint8_t * _1, uint16_t& _2, uint8_t *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown103\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown2(uint32_t& _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown2\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown200() {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown200\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown201() {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown201\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown202(uint8_t * _0, uint8_t * _1, uint8_t * _2) {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown202\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown203(uint8_t * _0, uint8_t * _1, uint8_t * _2, uint8_t * _3, uint8_t * _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown203\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown204() {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown204\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown205(uint32_t _0) {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown205\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown206(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown206\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown207(uint8_t _0) {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown207\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown208(uint8_t * _0) {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown208\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown209() {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown209\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown3(uint16_t& _0) {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown3\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown300() {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown300\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown301() {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown301\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown302(uint8_t * _0, uint8_t * _1, uint32_t _2, uint32_t _3, uint8_t * _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown302\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown303(uint8_t * _0, uint8_t * _1, uint8_t * _2, uint32_t _3, uint32_t _4, uint8_t * _5) {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown303\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown304() {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown304\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown4(uint8_t *& _0) {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown4\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown400(uint64_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown400\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown401() {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown401\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemLocalCommunicationService::Unknown5(uint8_t *& _0) {
	ns_print("Stub implementation for nn::ldn::detail::ISystemLocalCommunicationService::Unknown5\n");
	return 0;
}
uint32_t nn::ldn::detail::ISystemServiceCreator::Unknown0(IUnknown*& _0) {
	ns_print("Stub implementation for nn::ldn::detail::ISystemServiceCreator::Unknown0\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown0(uint32_t& _0) {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown0\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown1(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown1\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown100(IpcService*& _0) {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown100\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown101(uint8_t *& _0, unsigned int _0_size, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown101\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown102(uint16_t _0, uint8_t * _1, uint16_t& _2, uint8_t *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown102\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown103(uint16_t _0, uint8_t * _1, uint16_t& _2, uint8_t *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown103\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown2(uint32_t& _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown2\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown200() {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown200\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown201() {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown201\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown202(uint8_t * _0, uint8_t * _1, uint8_t * _2) {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown202\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown203(uint8_t * _0, uint8_t * _1, uint8_t * _2, uint8_t * _3, uint8_t * _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown203\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown204() {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown204\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown205(uint32_t _0) {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown205\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown206(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown206\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown207(uint8_t _0) {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown207\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown208(uint8_t * _0) {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown208\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown209() {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown209\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown3(uint16_t& _0) {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown3\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown300() {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown300\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown301() {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown301\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown302(uint8_t * _0, uint8_t * _1, uint32_t _2, uint32_t _3, uint8_t * _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown302\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown303(uint8_t * _0, uint8_t * _1, uint8_t * _2, uint32_t _3, uint32_t _4, uint8_t * _5) {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown303\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown304() {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown304\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown4(uint8_t *& _0) {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown4\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown400(uint64_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown400\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown401() {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown401\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserLocalCommunicationService::Unknown5(uint8_t *& _0) {
	ns_print("Stub implementation for nn::ldn::detail::IUserLocalCommunicationService::Unknown5\n");
	return 0;
}
uint32_t nn::ldn::detail::IUserServiceCreator::Unknown0(IUnknown*& _0) {
	ns_print("Stub implementation for nn::ldn::detail::IUserServiceCreator::Unknown0\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::ldr::detail {
	class IShellInterface : public IpcService {
	public:
		IShellInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldr::detail::IShellInterface::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ldr::detail::IShellInterface::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ldr::detail::IShellInterface", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::ldr::detail::IShellInterface::Unknown0() {
	ns_print("Stub implementation for nn::ldr::detail::IShellInterface::Unknown0\n");
	return 0;
}
uint32_t nn::ldr::detail::IShellInterface::Unknown1() {
	ns_print("Stub implementation for nn::ldr::detail::IShellInterface::Unknown1\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::lm {
	class ILogService : public IpcService {
	public:
		ILogService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::lm::ILogService::Unknown0: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown0(req->GetData<uint64_t>(8), req->pid, temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::lm::ILogService", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0, uint64_t _1, IUnknown*& _2);
	};
	class ILogger : public IpcService {
	public:
		ILogger() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::lm::ILogger::Unknown0: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown0(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lm::ILogger::Unknown1: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown1(req->GetData<uint32_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::lm::ILogger", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint8_t * _0, unsigned int _0_size);
		uint32_t Unknown1(uint32_t _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::lm::ILogService::Unknown0(uint64_t _0, uint64_t _1, IUnknown*& _2) {
	ns_print("Stub implementation for nn::lm::ILogService::Unknown0\n");
	return 0;
}
uint32_t nn::lm::ILogger::Unknown0(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::lm::ILogger::Unknown0\n");
	return 0;
}
uint32_t nn::lm::ILogger::Unknown1(uint32_t _0) {
	ns_print("Stub implementation for nn::lm::ILogger::Unknown1\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::lr {
	class IAddOnContentLocationResolver : public IpcService {
	public:
		IAddOnContentLocationResolver() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::IAddOnContentLocationResolver::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::IAddOnContentLocationResolver::Unknown1: uint8_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint8_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Unknown1(req->GetData<uint8_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::IAddOnContentLocationResolver::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::lr::IAddOnContentLocationResolver", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1(uint8_t _0, uint64_t _1);
		uint32_t Unknown2();
	};
	class ILocationResolver : public IpcService {
	public:
		ILocationResolver() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::ILocationResolver::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::ILocationResolver::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::ILocationResolver::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::ILocationResolver::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::ILocationResolver::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::ILocationResolver::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::ILocationResolver::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::ILocationResolver::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::ILocationResolver::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::ILocationResolver::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::lr::ILocationResolver", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6();
		uint32_t Unknown7();
		uint32_t Unknown8();
		uint32_t Unknown9();
	};
	class ILocationResolverManager : public IpcService {
	public:
		ILocationResolverManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::ILocationResolverManager::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::lr::ILocationResolverManager::Unknown1\n");
				resp->error_code = Unknown1(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::ILocationResolverManager::Unknown2: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown2(req->GetData<uint8_t>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::lr::ILocationResolverManager::Unknown3\n");
				resp->error_code = Unknown3(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::lr::ILocationResolverManager", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1(IUnknown*& _0);
		uint32_t Unknown2(uint8_t _0);
		uint32_t Unknown3(IUnknown*& _0);
	};
	class IRegisteredLocationResolver : public IpcService {
	public:
		IRegisteredLocationResolver() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::IRegisteredLocationResolver::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::IRegisteredLocationResolver::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::IRegisteredLocationResolver::Unknown2: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown2(req->GetData<uint64_t>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::IRegisteredLocationResolver::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::IRegisteredLocationResolver::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::IRegisteredLocationResolver::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::IRegisteredLocationResolver::Unknown6: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown6(req->GetData<uint64_t>(8));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::lr::IRegisteredLocationResolver::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::lr::IRegisteredLocationResolver", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2(uint64_t _0);
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6(uint64_t _0);
		uint32_t Unknown7();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::lr::IAddOnContentLocationResolver::Unknown0() {
	ns_print("Stub implementation for nn::lr::IAddOnContentLocationResolver::Unknown0\n");
	return 0;
}
uint32_t nn::lr::IAddOnContentLocationResolver::Unknown1(uint8_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::lr::IAddOnContentLocationResolver::Unknown1\n");
	return 0;
}
uint32_t nn::lr::IAddOnContentLocationResolver::Unknown2() {
	ns_print("Stub implementation for nn::lr::IAddOnContentLocationResolver::Unknown2\n");
	return 0;
}
uint32_t nn::lr::ILocationResolver::Unknown0() {
	ns_print("Stub implementation for nn::lr::ILocationResolver::Unknown0\n");
	return 0;
}
uint32_t nn::lr::ILocationResolver::Unknown1() {
	ns_print("Stub implementation for nn::lr::ILocationResolver::Unknown1\n");
	return 0;
}
uint32_t nn::lr::ILocationResolver::Unknown2() {
	ns_print("Stub implementation for nn::lr::ILocationResolver::Unknown2\n");
	return 0;
}
uint32_t nn::lr::ILocationResolver::Unknown3() {
	ns_print("Stub implementation for nn::lr::ILocationResolver::Unknown3\n");
	return 0;
}
uint32_t nn::lr::ILocationResolver::Unknown4() {
	ns_print("Stub implementation for nn::lr::ILocationResolver::Unknown4\n");
	return 0;
}
uint32_t nn::lr::ILocationResolver::Unknown5() {
	ns_print("Stub implementation for nn::lr::ILocationResolver::Unknown5\n");
	return 0;
}
uint32_t nn::lr::ILocationResolver::Unknown6() {
	ns_print("Stub implementation for nn::lr::ILocationResolver::Unknown6\n");
	return 0;
}
uint32_t nn::lr::ILocationResolver::Unknown7() {
	ns_print("Stub implementation for nn::lr::ILocationResolver::Unknown7\n");
	return 0;
}
uint32_t nn::lr::ILocationResolver::Unknown8() {
	ns_print("Stub implementation for nn::lr::ILocationResolver::Unknown8\n");
	return 0;
}
uint32_t nn::lr::ILocationResolver::Unknown9() {
	ns_print("Stub implementation for nn::lr::ILocationResolver::Unknown9\n");
	return 0;
}
uint32_t nn::lr::ILocationResolverManager::Unknown0() {
	ns_print("Stub implementation for nn::lr::ILocationResolverManager::Unknown0\n");
	return 0;
}
uint32_t nn::lr::ILocationResolverManager::Unknown1(IUnknown*& _0) {
	ns_print("Stub implementation for nn::lr::ILocationResolverManager::Unknown1\n");
	return 0;
}
uint32_t nn::lr::ILocationResolverManager::Unknown2(uint8_t _0) {
	ns_print("Stub implementation for nn::lr::ILocationResolverManager::Unknown2\n");
	return 0;
}
uint32_t nn::lr::ILocationResolverManager::Unknown3(IUnknown*& _0) {
	ns_print("Stub implementation for nn::lr::ILocationResolverManager::Unknown3\n");
	return 0;
}
uint32_t nn::lr::IRegisteredLocationResolver::Unknown0() {
	ns_print("Stub implementation for nn::lr::IRegisteredLocationResolver::Unknown0\n");
	return 0;
}
uint32_t nn::lr::IRegisteredLocationResolver::Unknown1() {
	ns_print("Stub implementation for nn::lr::IRegisteredLocationResolver::Unknown1\n");
	return 0;
}
uint32_t nn::lr::IRegisteredLocationResolver::Unknown2(uint64_t _0) {
	ns_print("Stub implementation for nn::lr::IRegisteredLocationResolver::Unknown2\n");
	return 0;
}
uint32_t nn::lr::IRegisteredLocationResolver::Unknown3() {
	ns_print("Stub implementation for nn::lr::IRegisteredLocationResolver::Unknown3\n");
	return 0;
}
uint32_t nn::lr::IRegisteredLocationResolver::Unknown4() {
	ns_print("Stub implementation for nn::lr::IRegisteredLocationResolver::Unknown4\n");
	return 0;
}
uint32_t nn::lr::IRegisteredLocationResolver::Unknown5() {
	ns_print("Stub implementation for nn::lr::IRegisteredLocationResolver::Unknown5\n");
	return 0;
}
uint32_t nn::lr::IRegisteredLocationResolver::Unknown6(uint64_t _0) {
	ns_print("Stub implementation for nn::lr::IRegisteredLocationResolver::Unknown6\n");
	return 0;
}
uint32_t nn::lr::IRegisteredLocationResolver::Unknown7() {
	ns_print("Stub implementation for nn::lr::IRegisteredLocationResolver::Unknown7\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::mii::detail {
	class IDatabaseService : public IpcService {
	public:
		IDatabaseService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::mii::detail::IDatabaseService::IsUpdated: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = IsUpdated(req->GetData<int32_t>(8), *resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::mii::detail::IDatabaseService::IsFullDatabase\n");
				resp->error_code = IsFullDatabase(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::mii::detail::IDatabaseService::GetCount: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = GetCount(req->GetData<int32_t>(8), *resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::mii::CharInfoElement* temp3 = (nn::mii::CharInfoElement *) new uint8_t[temp2];
				ns_print("IPC message to nn::mii::detail::IDatabaseService::Get: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = Get(req->GetData<int32_t>(8), *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::mii::CharInfo* temp3 = (nn::mii::CharInfo *) new uint8_t[temp2];
				ns_print("IPC message to nn::mii::detail::IDatabaseService::Get1: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = Get1(req->GetData<int32_t>(8), *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 88);
				auto temp1 = resp->GetDataPointer<nn::mii::CharInfo>(8);
				ns_print("IPC message to nn::mii::detail::IDatabaseService::UpdateLatest: nn::mii::CharInfo = %s, int32_t = 0x%x\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x58).c_str(), req->GetData<int32_t>(0x60));
				resp->error_code = UpdateLatest(req->GetDataPointer<nn::mii::CharInfo>(8), req->GetData<int32_t>(0x60), temp1);
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 88);
				auto temp1 = resp->GetDataPointer<nn::mii::CharInfo>(8);
				ns_print("IPC message to nn::mii::detail::IDatabaseService::BuildRandom: int32_t = 0x%x, int32_t = 0x%x, int32_t = 0x%x\n", req->GetData<int32_t>(8), req->GetData<int32_t>(0xc), req->GetData<int32_t>(0x10));
				resp->error_code = BuildRandom(req->GetData<int32_t>(8), req->GetData<int32_t>(0xc), req->GetData<int32_t>(0x10), temp1);
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 88);
				auto temp1 = resp->GetDataPointer<nn::mii::CharInfo>(8);
				ns_print("IPC message to nn::mii::detail::IDatabaseService::BuildDefault: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = BuildDefault(req->GetData<int32_t>(8), temp1);
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::mii::StoreDataElement* temp3 = (nn::mii::StoreDataElement *) new uint8_t[temp2];
				ns_print("IPC message to nn::mii::detail::IDatabaseService::Get2: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = Get2(req->GetData<int32_t>(8), *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::mii::StoreData* temp3 = (nn::mii::StoreData *) new uint8_t[temp2];
				ns_print("IPC message to nn::mii::detail::IDatabaseService::Get3: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = Get3(req->GetData<int32_t>(8), *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 68);
				auto temp1 = resp->GetDataPointer<nn::mii::StoreData>(8);
				ns_print("IPC message to nn::mii::detail::IDatabaseService::UpdateLatest1: nn::mii::StoreData = %s, int32_t = 0x%x\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x44).c_str(), req->GetData<int32_t>(0x4c));
				resp->error_code = UpdateLatest1(req->GetDataPointer<nn::mii::StoreData>(8), req->GetData<int32_t>(0x4c), temp1);
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::mii::detail::IDatabaseService::FindIndex: nn::mii::CreateId = %s, bool = 0x%x\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<bool>(0x18));
				resp->error_code = FindIndex(req->GetData<nn::mii::CreateId>(8), req->GetData<bool>(0x18), *resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::mii::detail::IDatabaseService::Move: nn::mii::CreateId = %s, int32_t = 0x%x\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<int32_t>(0x18));
				resp->error_code = Move(req->GetData<nn::mii::CreateId>(8), req->GetData<int32_t>(0x18));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::mii::detail::IDatabaseService::AddOrReplace: nn::mii::StoreData = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x44).c_str());
				resp->error_code = AddOrReplace(req->GetDataPointer<nn::mii::StoreData>(8));
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::mii::detail::IDatabaseService::Delete: nn::mii::CreateId = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = Delete(req->GetData<nn::mii::CreateId>(8));
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::mii::detail::IDatabaseService::DestroyFile\n");
				resp->error_code = DestroyFile();
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::mii::detail::IDatabaseService::DeleteFile\n");
				resp->error_code = DeleteFile();
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::mii::detail::IDatabaseService::Format\n");
				resp->error_code = Format();
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::mii::detail::IDatabaseService::Import: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Import(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::mii::detail::IDatabaseService::Export\n");
				resp->error_code = Export(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::mii::detail::IDatabaseService::IsBrokenDatabaseWithClearFlag\n");
				resp->error_code = IsBrokenDatabaseWithClearFlag(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::mii::detail::IDatabaseService::GetIndex: nn::mii::CharInfo = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x58).c_str());
				resp->error_code = GetIndex(req->GetDataPointer<nn::mii::CharInfo>(8), *resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::mii::detail::IDatabaseService", req->cmd_id);
			}
		}
		uint32_t AddOrReplace(nn::mii::StoreData _0);
		uint32_t BuildDefault(int32_t _0, nn::mii::CharInfo& _1);
		uint32_t BuildRandom(int32_t _0, int32_t _1, int32_t _2, nn::mii::CharInfo& _3);
		uint32_t Delete(nn::mii::CreateId _0);
		uint32_t DeleteFile();
		uint32_t DestroyFile();
		uint32_t Export(uint8_t *& _0, unsigned int _0_size);
		uint32_t FindIndex(nn::mii::CreateId _0, bool _1, int32_t& _2);
		uint32_t Format();
		uint32_t Get(int32_t _0, int32_t& _1, nn::mii::CharInfoElement *& _2, unsigned int _2_size);
		uint32_t Get1(int32_t _0, int32_t& _1, nn::mii::CharInfo *& _2, unsigned int _2_size);
		uint32_t Get2(int32_t _0, int32_t& _1, nn::mii::StoreDataElement *& _2, unsigned int _2_size);
		uint32_t Get3(int32_t _0, int32_t& _1, nn::mii::StoreData *& _2, unsigned int _2_size);
		uint32_t GetCount(int32_t _0, int32_t& _1);
		uint32_t GetIndex(nn::mii::CharInfo _0, int32_t& _1);
		uint32_t Import(uint8_t * _0, unsigned int _0_size);
		uint32_t IsBrokenDatabaseWithClearFlag(bool& _0);
		uint32_t IsFullDatabase(bool& _0);
		uint32_t IsUpdated(int32_t _0, bool& _1);
		uint32_t Move(nn::mii::CreateId _0, int32_t _1);
		uint32_t UpdateLatest(nn::mii::CharInfo _0, int32_t _1, nn::mii::CharInfo& _2);
		uint32_t UpdateLatest1(nn::mii::StoreData _0, int32_t _1, nn::mii::StoreData& _2);
	};
	class IStaticService : public IpcService {
	public:
		IStaticService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::mii::detail::IDatabaseService* temp1;
				ns_print("IPC message to nn::mii::detail::IStaticService::GetDatabaseService: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = GetDatabaseService(req->GetData<int32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::mii::detail::IStaticService", req->cmd_id);
			}
		}
		uint32_t GetDatabaseService(int32_t _0, nn::mii::detail::IDatabaseService*& _1);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::mii::detail::IDatabaseService::AddOrReplace(nn::mii::StoreData _0) {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::AddOrReplace\n");
	return 0;
}
uint32_t nn::mii::detail::IDatabaseService::BuildDefault(int32_t _0, nn::mii::CharInfo& _1) {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::BuildDefault\n");
	return 0;
}
uint32_t nn::mii::detail::IDatabaseService::BuildRandom(int32_t _0, int32_t _1, int32_t _2, nn::mii::CharInfo& _3) {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::BuildRandom\n");
	return 0;
}
uint32_t nn::mii::detail::IDatabaseService::Delete(nn::mii::CreateId _0) {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::Delete\n");
	return 0;
}
uint32_t nn::mii::detail::IDatabaseService::DeleteFile() {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::DeleteFile\n");
	return 0;
}
uint32_t nn::mii::detail::IDatabaseService::DestroyFile() {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::DestroyFile\n");
	return 0;
}
uint32_t nn::mii::detail::IDatabaseService::Export(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::Export\n");
	return 0;
}
uint32_t nn::mii::detail::IDatabaseService::FindIndex(nn::mii::CreateId _0, bool _1, int32_t& _2) {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::FindIndex\n");
	return 0;
}
uint32_t nn::mii::detail::IDatabaseService::Format() {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::Format\n");
	return 0;
}
uint32_t nn::mii::detail::IDatabaseService::Get(int32_t _0, int32_t& _1, nn::mii::CharInfoElement *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::Get\n");
	return 0;
}
uint32_t nn::mii::detail::IDatabaseService::Get1(int32_t _0, int32_t& _1, nn::mii::CharInfo *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::Get1\n");
	return 0;
}
uint32_t nn::mii::detail::IDatabaseService::Get2(int32_t _0, int32_t& _1, nn::mii::StoreDataElement *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::Get2\n");
	return 0;
}
uint32_t nn::mii::detail::IDatabaseService::Get3(int32_t _0, int32_t& _1, nn::mii::StoreData *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::Get3\n");
	return 0;
}
uint32_t nn::mii::detail::IDatabaseService::GetCount(int32_t _0, int32_t& _1) {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::GetCount\n");
	return 0;
}
uint32_t nn::mii::detail::IDatabaseService::GetIndex(nn::mii::CharInfo _0, int32_t& _1) {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::GetIndex\n");
	return 0;
}
uint32_t nn::mii::detail::IDatabaseService::Import(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::Import\n");
	return 0;
}
uint32_t nn::mii::detail::IDatabaseService::IsBrokenDatabaseWithClearFlag(bool& _0) {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::IsBrokenDatabaseWithClearFlag\n");
	return 0;
}
uint32_t nn::mii::detail::IDatabaseService::IsFullDatabase(bool& _0) {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::IsFullDatabase\n");
	return 0;
}
uint32_t nn::mii::detail::IDatabaseService::IsUpdated(int32_t _0, bool& _1) {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::IsUpdated\n");
	return 0;
}
uint32_t nn::mii::detail::IDatabaseService::Move(nn::mii::CreateId _0, int32_t _1) {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::Move\n");
	return 0;
}
uint32_t nn::mii::detail::IDatabaseService::UpdateLatest(nn::mii::CharInfo _0, int32_t _1, nn::mii::CharInfo& _2) {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::UpdateLatest\n");
	return 0;
}
uint32_t nn::mii::detail::IDatabaseService::UpdateLatest1(nn::mii::StoreData _0, int32_t _1, nn::mii::StoreData& _2) {
	ns_print("Stub implementation for nn::mii::detail::IDatabaseService::UpdateLatest1\n");
	return 0;
}
uint32_t nn::mii::detail::IStaticService::GetDatabaseService(int32_t _0, nn::mii::detail::IDatabaseService*& _1) {
	ns_print("Stub implementation for nn::mii::detail::IStaticService::GetDatabaseService\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::mmnv {
	class IRequest : public IpcService {
	public:
		IRequest() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::mmnv::IRequest::Unknown0: uint32_t = 0x%x, uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10));
				resp->error_code = Unknown0(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::mmnv::IRequest::Unknown1: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown1(req->GetData<uint32_t>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::mmnv::IRequest::Unknown2: uint32_t = 0x%x, uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10));
				resp->error_code = Unknown2(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::mmnv::IRequest::Unknown3: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown3(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::mmnv::IRequest::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::mmnv::IRequest::Unknown5: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown5(req->GetData<uint32_t>(8));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::mmnv::IRequest::Unknown6: uint32_t = 0x%x, uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10));
				resp->error_code = Unknown6(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::mmnv::IRequest::Unknown7: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown7(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::mmnv::IRequest", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t _0, uint32_t _1, uint32_t _2);
		uint32_t Unknown1(uint32_t _0);
		uint32_t Unknown2(uint32_t _0, uint32_t _1, uint32_t _2);
		uint32_t Unknown3(uint32_t _0, uint32_t& _1);
		uint32_t Unknown4();
		uint32_t Unknown5(uint32_t _0);
		uint32_t Unknown6(uint32_t _0, uint32_t _1, uint32_t _2);
		uint32_t Unknown7(uint32_t _0, uint32_t& _1);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::mmnv::IRequest::Unknown0(uint32_t _0, uint32_t _1, uint32_t _2) {
	ns_print("Stub implementation for nn::mmnv::IRequest::Unknown0\n");
	return 0;
}
uint32_t nn::mmnv::IRequest::Unknown1(uint32_t _0) {
	ns_print("Stub implementation for nn::mmnv::IRequest::Unknown1\n");
	return 0;
}
uint32_t nn::mmnv::IRequest::Unknown2(uint32_t _0, uint32_t _1, uint32_t _2) {
	ns_print("Stub implementation for nn::mmnv::IRequest::Unknown2\n");
	return 0;
}
uint32_t nn::mmnv::IRequest::Unknown3(uint32_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::mmnv::IRequest::Unknown3\n");
	return 0;
}
uint32_t nn::mmnv::IRequest::Unknown4() {
	ns_print("Stub implementation for nn::mmnv::IRequest::Unknown4\n");
	return 0;
}
uint32_t nn::mmnv::IRequest::Unknown5(uint32_t _0) {
	ns_print("Stub implementation for nn::mmnv::IRequest::Unknown5\n");
	return 0;
}
uint32_t nn::mmnv::IRequest::Unknown6(uint32_t _0, uint32_t _1, uint32_t _2) {
	ns_print("Stub implementation for nn::mmnv::IRequest::Unknown6\n");
	return 0;
}
uint32_t nn::mmnv::IRequest::Unknown7(uint32_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::mmnv::IRequest::Unknown7\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::ncm {
	class IContentManager : public IpcService {
	public:
		IContentManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentManager::Unknown0: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown0(req->GetData<uint8_t>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentManager::Unknown1: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown1(req->GetData<uint8_t>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentManager::Unknown2: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown2(req->GetData<uint8_t>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentManager::Unknown3: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown3(req->GetData<uint8_t>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentManager::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentManager::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentManager::Unknown8: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown8(req->GetData<uint8_t>(8));
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentManager::Unknown9: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown9(req->GetData<uint8_t>(8));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentManager::Unknown10: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown10(req->GetData<uint8_t>(8));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentManager::Unknown11: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown11(req->GetData<uint8_t>(8));
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentManager::Unknown12: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown12(req->GetData<uint8_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ncm::IContentManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint8_t _0);
		uint32_t Unknown1(uint8_t _0);
		uint32_t Unknown10(uint8_t _0);
		uint32_t Unknown11(uint8_t _0);
		uint32_t Unknown12(uint8_t _0);
		uint32_t Unknown2(uint8_t _0);
		uint32_t Unknown3(uint8_t _0);
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown8(uint8_t _0);
		uint32_t Unknown9(uint8_t _0);
	};
	class IContentMetaDatabase : public IpcService {
	public:
		IContentMetaDatabase() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentMetaDatabase::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentMetaDatabase::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentMetaDatabase::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentMetaDatabase::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentMetaDatabase::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentMetaDatabase::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentMetaDatabase::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentMetaDatabase::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentMetaDatabase::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentMetaDatabase::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentMetaDatabase::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentMetaDatabase::Unknown11\n");
				resp->error_code = Unknown11();
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentMetaDatabase::Unknown12\n");
				resp->error_code = Unknown12();
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentMetaDatabase::Unknown13\n");
				resp->error_code = Unknown13();
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentMetaDatabase::Unknown14\n");
				resp->error_code = Unknown14();
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentMetaDatabase::Unknown15\n");
				resp->error_code = Unknown15();
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentMetaDatabase::Unknown16\n");
				resp->error_code = Unknown16();
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentMetaDatabase::Unknown17\n");
				resp->error_code = Unknown17();
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentMetaDatabase::Unknown18\n");
				resp->error_code = Unknown18();
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentMetaDatabase::Unknown19\n");
				resp->error_code = Unknown19();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ncm::IContentMetaDatabase", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown10();
		uint32_t Unknown11();
		uint32_t Unknown12();
		uint32_t Unknown13();
		uint32_t Unknown14();
		uint32_t Unknown15();
		uint32_t Unknown16();
		uint32_t Unknown17();
		uint32_t Unknown18();
		uint32_t Unknown19();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6();
		uint32_t Unknown7();
		uint32_t Unknown8();
		uint32_t Unknown9();
	};
	class IContentStorage : public IpcService {
	public:
		IContentStorage() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint128_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown2: uint128_t = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = Unknown2(req->GetData<uint128_t>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown6: uint128_t = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = Unknown6(req->GetData<uint128_t>(8));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown11\n");
				resp->error_code = Unknown11(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown12\n");
				resp->error_code = Unknown12(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown13\n");
				resp->error_code = Unknown13();
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown14\n");
				resp->error_code = Unknown14();
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown15\n");
				resp->error_code = Unknown15();
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown16\n");
				resp->error_code = Unknown16();
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown17\n");
				resp->error_code = Unknown17();
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown18\n");
				resp->error_code = Unknown18();
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown19\n");
				resp->error_code = Unknown19();
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown20\n");
				resp->error_code = Unknown20();
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown21\n");
				resp->error_code = Unknown21();
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown22\n");
				resp->error_code = Unknown22(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown23\n");
				resp->error_code = Unknown23(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 24: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ncm::IContentStorage::Unknown24\n");
				resp->error_code = Unknown24();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ncm::IContentStorage", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint128_t& _0);
		uint32_t Unknown1();
		uint32_t Unknown10();
		uint32_t Unknown11(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown12(uint32_t& _0);
		uint32_t Unknown13();
		uint32_t Unknown14();
		uint32_t Unknown15();
		uint32_t Unknown16();
		uint32_t Unknown17();
		uint32_t Unknown18();
		uint32_t Unknown19();
		uint32_t Unknown2(uint128_t _0);
		uint32_t Unknown20();
		uint32_t Unknown21();
		uint32_t Unknown22(uint64_t& _0);
		uint32_t Unknown23(uint64_t& _0);
		uint32_t Unknown24();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6(uint128_t _0);
		uint32_t Unknown7();
		uint32_t Unknown8();
		uint32_t Unknown9();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::ncm::IContentManager::Unknown0(uint8_t _0) {
	ns_print("Stub implementation for nn::ncm::IContentManager::Unknown0\n");
	return 0;
}
uint32_t nn::ncm::IContentManager::Unknown1(uint8_t _0) {
	ns_print("Stub implementation for nn::ncm::IContentManager::Unknown1\n");
	return 0;
}
uint32_t nn::ncm::IContentManager::Unknown10(uint8_t _0) {
	ns_print("Stub implementation for nn::ncm::IContentManager::Unknown10\n");
	return 0;
}
uint32_t nn::ncm::IContentManager::Unknown11(uint8_t _0) {
	ns_print("Stub implementation for nn::ncm::IContentManager::Unknown11\n");
	return 0;
}
uint32_t nn::ncm::IContentManager::Unknown12(uint8_t _0) {
	ns_print("Stub implementation for nn::ncm::IContentManager::Unknown12\n");
	return 0;
}
uint32_t nn::ncm::IContentManager::Unknown2(uint8_t _0) {
	ns_print("Stub implementation for nn::ncm::IContentManager::Unknown2\n");
	return 0;
}
uint32_t nn::ncm::IContentManager::Unknown3(uint8_t _0) {
	ns_print("Stub implementation for nn::ncm::IContentManager::Unknown3\n");
	return 0;
}
uint32_t nn::ncm::IContentManager::Unknown4() {
	ns_print("Stub implementation for nn::ncm::IContentManager::Unknown4\n");
	return 0;
}
uint32_t nn::ncm::IContentManager::Unknown5() {
	ns_print("Stub implementation for nn::ncm::IContentManager::Unknown5\n");
	return 0;
}
uint32_t nn::ncm::IContentManager::Unknown8(uint8_t _0) {
	ns_print("Stub implementation for nn::ncm::IContentManager::Unknown8\n");
	return 0;
}
uint32_t nn::ncm::IContentManager::Unknown9(uint8_t _0) {
	ns_print("Stub implementation for nn::ncm::IContentManager::Unknown9\n");
	return 0;
}
uint32_t nn::ncm::IContentMetaDatabase::Unknown0() {
	ns_print("Stub implementation for nn::ncm::IContentMetaDatabase::Unknown0\n");
	return 0;
}
uint32_t nn::ncm::IContentMetaDatabase::Unknown1() {
	ns_print("Stub implementation for nn::ncm::IContentMetaDatabase::Unknown1\n");
	return 0;
}
uint32_t nn::ncm::IContentMetaDatabase::Unknown10() {
	ns_print("Stub implementation for nn::ncm::IContentMetaDatabase::Unknown10\n");
	return 0;
}
uint32_t nn::ncm::IContentMetaDatabase::Unknown11() {
	ns_print("Stub implementation for nn::ncm::IContentMetaDatabase::Unknown11\n");
	return 0;
}
uint32_t nn::ncm::IContentMetaDatabase::Unknown12() {
	ns_print("Stub implementation for nn::ncm::IContentMetaDatabase::Unknown12\n");
	return 0;
}
uint32_t nn::ncm::IContentMetaDatabase::Unknown13() {
	ns_print("Stub implementation for nn::ncm::IContentMetaDatabase::Unknown13\n");
	return 0;
}
uint32_t nn::ncm::IContentMetaDatabase::Unknown14() {
	ns_print("Stub implementation for nn::ncm::IContentMetaDatabase::Unknown14\n");
	return 0;
}
uint32_t nn::ncm::IContentMetaDatabase::Unknown15() {
	ns_print("Stub implementation for nn::ncm::IContentMetaDatabase::Unknown15\n");
	return 0;
}
uint32_t nn::ncm::IContentMetaDatabase::Unknown16() {
	ns_print("Stub implementation for nn::ncm::IContentMetaDatabase::Unknown16\n");
	return 0;
}
uint32_t nn::ncm::IContentMetaDatabase::Unknown17() {
	ns_print("Stub implementation for nn::ncm::IContentMetaDatabase::Unknown17\n");
	return 0;
}
uint32_t nn::ncm::IContentMetaDatabase::Unknown18() {
	ns_print("Stub implementation for nn::ncm::IContentMetaDatabase::Unknown18\n");
	return 0;
}
uint32_t nn::ncm::IContentMetaDatabase::Unknown19() {
	ns_print("Stub implementation for nn::ncm::IContentMetaDatabase::Unknown19\n");
	return 0;
}
uint32_t nn::ncm::IContentMetaDatabase::Unknown2() {
	ns_print("Stub implementation for nn::ncm::IContentMetaDatabase::Unknown2\n");
	return 0;
}
uint32_t nn::ncm::IContentMetaDatabase::Unknown3() {
	ns_print("Stub implementation for nn::ncm::IContentMetaDatabase::Unknown3\n");
	return 0;
}
uint32_t nn::ncm::IContentMetaDatabase::Unknown4() {
	ns_print("Stub implementation for nn::ncm::IContentMetaDatabase::Unknown4\n");
	return 0;
}
uint32_t nn::ncm::IContentMetaDatabase::Unknown5() {
	ns_print("Stub implementation for nn::ncm::IContentMetaDatabase::Unknown5\n");
	return 0;
}
uint32_t nn::ncm::IContentMetaDatabase::Unknown6() {
	ns_print("Stub implementation for nn::ncm::IContentMetaDatabase::Unknown6\n");
	return 0;
}
uint32_t nn::ncm::IContentMetaDatabase::Unknown7() {
	ns_print("Stub implementation for nn::ncm::IContentMetaDatabase::Unknown7\n");
	return 0;
}
uint32_t nn::ncm::IContentMetaDatabase::Unknown8() {
	ns_print("Stub implementation for nn::ncm::IContentMetaDatabase::Unknown8\n");
	return 0;
}
uint32_t nn::ncm::IContentMetaDatabase::Unknown9() {
	ns_print("Stub implementation for nn::ncm::IContentMetaDatabase::Unknown9\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown0(uint128_t& _0) {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown0\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown1() {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown1\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown10() {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown10\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown11(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown11\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown12(uint32_t& _0) {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown12\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown13() {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown13\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown14() {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown14\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown15() {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown15\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown16() {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown16\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown17() {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown17\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown18() {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown18\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown19() {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown19\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown2(uint128_t _0) {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown2\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown20() {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown20\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown21() {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown21\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown22(uint64_t& _0) {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown22\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown23(uint64_t& _0) {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown23\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown24() {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown24\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown3() {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown3\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown4() {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown4\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown5() {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown5\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown6(uint128_t _0) {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown6\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown7() {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown7\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown8() {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown8\n");
	return 0;
}
uint32_t nn::ncm::IContentStorage::Unknown9() {
	ns_print("Stub implementation for nn::ncm::IContentStorage::Unknown9\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::news::detail::ipc {
	class INewlyArrivedEventHolder : public IpcService {
	public:
		INewlyArrivedEventHolder() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::news::detail::ipc::INewlyArrivedEventHolder::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::news::detail::ipc::INewlyArrivedEventHolder", req->cmd_id);
			}
		}
		uint32_t Unknown0(IpcService*& _0);
	};
	class INewsDataService : public IpcService {
	public:
		INewsDataService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::news::detail::ipc::INewsDataService::Unknown0: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown0(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::news::detail::ipc::INewsDataService::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::news::detail::ipc::INewsDataService::Unknown2: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown2(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::news::detail::ipc::INewsDataService::Unknown3\n");
				resp->error_code = Unknown3(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::news::detail::ipc::INewsDataService", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint8_t * _0, unsigned int _0_size);
		uint32_t Unknown1();
		uint32_t Unknown2(uint64_t _0, uint64_t& _1, uint8_t *& _2, unsigned int _2_size);
		uint32_t Unknown3(uint64_t& _0);
	};
	class INewsDatabaseService : public IpcService {
	public:
		INewsDatabaseService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::news::detail::ipc::INewsDatabaseService::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::news::detail::ipc::INewsDatabaseService::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::news::detail::ipc::INewsDatabaseService::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::news::detail::ipc::INewsDatabaseService::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::news::detail::ipc::INewsDatabaseService::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::news::detail::ipc::INewsDatabaseService::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::news::detail::ipc::INewsDatabaseService", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
	};
	class INewsService : public IpcService {
	public:
		INewsService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 10100: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::news::detail::ipc::INewsService::Unknown10100: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown10100(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 20100: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::news::detail::ipc::INewsService::Unknown20100: uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), temp2);
				resp->error_code = Unknown20100(req->GetData<uint64_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 30100: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::news::detail::ipc::INewsService::Unknown30100\n");
				resp->error_code = Unknown30100();
				return 0;
			}
			case 30101: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::news::detail::ipc::INewsService::Unknown30101: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown30101(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 30200: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::news::detail::ipc::INewsService::Unknown30200\n");
				resp->error_code = Unknown30200(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 30300: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::news::detail::ipc::INewsService::Unknown30300: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown30300(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 30400: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::news::detail::ipc::INewsService::Unknown30400\n");
				resp->error_code = Unknown30400();
				return 0;
			}
			case 40100: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::news::detail::ipc::INewsService::Unknown40100\n");
				resp->error_code = Unknown40100();
				return 0;
			}
			case 40101: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::news::detail::ipc::INewsService::Unknown40101: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown40101(req->GetData<uint64_t>(8));
				return 0;
			}
			case 40200: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::news::detail::ipc::INewsService::Unknown40200\n");
				resp->error_code = Unknown40200();
				return 0;
			}
			case 40201: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::news::detail::ipc::INewsService::Unknown40201\n");
				resp->error_code = Unknown40201();
				return 0;
			}
			case 90100: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::news::detail::ipc::INewsService::Unknown90100\n");
				resp->error_code = Unknown90100(*resp->GetDataPointer<uint64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::news::detail::ipc::INewsService", req->cmd_id);
			}
		}
		uint32_t Unknown10100(uint8_t * _0, unsigned int _0_size);
		uint32_t Unknown20100(uint64_t _0, uint8_t * _1, unsigned int _1_size);
		uint32_t Unknown30100();
		uint32_t Unknown30101(uint32_t _0, uint32_t& _1, uint8_t *& _2, unsigned int _2_size);
		uint32_t Unknown30200(uint8_t& _0);
		uint32_t Unknown30300(uint8_t * _0, unsigned int _0_size);
		uint32_t Unknown30400();
		uint32_t Unknown40100();
		uint32_t Unknown40101(uint64_t _0);
		uint32_t Unknown40200();
		uint32_t Unknown40201();
		uint32_t Unknown90100(uint64_t& _0, uint8_t *& _1, unsigned int _1_size);
	};
	class IOverwriteEventHolder : public IpcService {
	public:
		IOverwriteEventHolder() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::news::detail::ipc::IOverwriteEventHolder::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::news::detail::ipc::IOverwriteEventHolder", req->cmd_id);
			}
		}
		uint32_t Unknown0(IpcService*& _0);
	};
	class IServiceCreator : public IpcService {
	public:
		IServiceCreator() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::news::detail::ipc::IServiceCreator::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::news::detail::ipc::IServiceCreator::Unknown1\n");
				resp->error_code = Unknown1(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::news::detail::ipc::IServiceCreator::Unknown2\n");
				resp->error_code = Unknown2(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::news::detail::ipc::IServiceCreator::Unknown3\n");
				resp->error_code = Unknown3(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 4: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::news::detail::ipc::IServiceCreator::Unknown4\n");
				resp->error_code = Unknown4(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::news::detail::ipc::IServiceCreator", req->cmd_id);
			}
		}
		uint32_t Unknown0(IUnknown*& _0);
		uint32_t Unknown1(IUnknown*& _0);
		uint32_t Unknown2(IUnknown*& _0);
		uint32_t Unknown3(IUnknown*& _0);
		uint32_t Unknown4(IUnknown*& _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::news::detail::ipc::INewlyArrivedEventHolder::Unknown0(IpcService*& _0) {
	ns_print("Stub implementation for nn::news::detail::ipc::INewlyArrivedEventHolder::Unknown0\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsDataService::Unknown0(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsDataService::Unknown0\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsDataService::Unknown1() {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsDataService::Unknown1\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsDataService::Unknown2(uint64_t _0, uint64_t& _1, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsDataService::Unknown2\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsDataService::Unknown3(uint64_t& _0) {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsDataService::Unknown3\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsDatabaseService::Unknown0() {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsDatabaseService::Unknown0\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsDatabaseService::Unknown1() {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsDatabaseService::Unknown1\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsDatabaseService::Unknown2() {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsDatabaseService::Unknown2\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsDatabaseService::Unknown3() {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsDatabaseService::Unknown3\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsDatabaseService::Unknown4() {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsDatabaseService::Unknown4\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsDatabaseService::Unknown5() {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsDatabaseService::Unknown5\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsService::Unknown10100(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsService::Unknown10100\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsService::Unknown20100(uint64_t _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsService::Unknown20100\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsService::Unknown30100() {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsService::Unknown30100\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsService::Unknown30101(uint32_t _0, uint32_t& _1, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsService::Unknown30101\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsService::Unknown30200(uint8_t& _0) {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsService::Unknown30200\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsService::Unknown30300(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsService::Unknown30300\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsService::Unknown30400() {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsService::Unknown30400\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsService::Unknown40100() {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsService::Unknown40100\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsService::Unknown40101(uint64_t _0) {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsService::Unknown40101\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsService::Unknown40200() {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsService::Unknown40200\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsService::Unknown40201() {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsService::Unknown40201\n");
	return 0;
}
uint32_t nn::news::detail::ipc::INewsService::Unknown90100(uint64_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::news::detail::ipc::INewsService::Unknown90100\n");
	return 0;
}
uint32_t nn::news::detail::ipc::IOverwriteEventHolder::Unknown0(IpcService*& _0) {
	ns_print("Stub implementation for nn::news::detail::ipc::IOverwriteEventHolder::Unknown0\n");
	return 0;
}
uint32_t nn::news::detail::ipc::IServiceCreator::Unknown0(IUnknown*& _0) {
	ns_print("Stub implementation for nn::news::detail::ipc::IServiceCreator::Unknown0\n");
	return 0;
}
uint32_t nn::news::detail::ipc::IServiceCreator::Unknown1(IUnknown*& _0) {
	ns_print("Stub implementation for nn::news::detail::ipc::IServiceCreator::Unknown1\n");
	return 0;
}
uint32_t nn::news::detail::ipc::IServiceCreator::Unknown2(IUnknown*& _0) {
	ns_print("Stub implementation for nn::news::detail::ipc::IServiceCreator::Unknown2\n");
	return 0;
}
uint32_t nn::news::detail::ipc::IServiceCreator::Unknown3(IUnknown*& _0) {
	ns_print("Stub implementation for nn::news::detail::ipc::IServiceCreator::Unknown3\n");
	return 0;
}
uint32_t nn::news::detail::ipc::IServiceCreator::Unknown4(IUnknown*& _0) {
	ns_print("Stub implementation for nn::news::detail::ipc::IServiceCreator::Unknown4\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::nfc::am::detail {
	class IAm : public IpcService {
	public:
		IAm() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfc::am::detail::IAm::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfc::am::detail::IAm::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfc::am::detail::IAm::Unknown2: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown2(req->GetData<uint64_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nfc::am::detail::IAm", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2(uint64_t _0);
	};
	class IAmManager : public IpcService {
	public:
		IAmManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::nfc::am::detail::IAmManager::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nfc::am::detail::IAmManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(IUnknown*& _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::nfc::am::detail::IAm::Unknown0() {
	ns_print("Stub implementation for nn::nfc::am::detail::IAm::Unknown0\n");
	return 0;
}
uint32_t nn::nfc::am::detail::IAm::Unknown1() {
	ns_print("Stub implementation for nn::nfc::am::detail::IAm::Unknown1\n");
	return 0;
}
uint32_t nn::nfc::am::detail::IAm::Unknown2(uint64_t _0) {
	ns_print("Stub implementation for nn::nfc::am::detail::IAm::Unknown2\n");
	return 0;
}
uint32_t nn::nfc::am::detail::IAmManager::Unknown0(IUnknown*& _0) {
	ns_print("Stub implementation for nn::nfc::am::detail::IAmManager::Unknown0\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::nfc::detail {
	class ISystem : public IpcService {
	public:
		ISystem() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nfc::detail::ISystem::Unknown0: uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp2);
				resp->error_code = Unknown0(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->pid, temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfc::detail::ISystem::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nfc::detail::ISystem::Unknown2\n");
				resp->error_code = Unknown2(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::nfc::detail::ISystem::Unknown3\n");
				resp->error_code = Unknown3(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfc::detail::ISystem::Unknown100: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown100(req->GetData<uint8_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nfc::detail::ISystem", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0, uint64_t _1, uint64_t _2, uint8_t * _3, unsigned int _3_size);
		uint32_t Unknown1();
		uint32_t Unknown100(uint8_t _0);
		uint32_t Unknown2(uint32_t& _0);
		uint32_t Unknown3(uint8_t& _0);
	};
	class ISystemManager : public IpcService {
	public:
		ISystemManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::nfc::detail::ISystemManager::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nfc::detail::ISystemManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(IUnknown*& _0);
	};
	class IUser : public IpcService {
	public:
		IUser() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nfc::detail::IUser::Unknown0: uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp2);
				resp->error_code = Unknown0(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->pid, temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfc::detail::IUser::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nfc::detail::IUser::Unknown2\n");
				resp->error_code = Unknown2(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::nfc::detail::IUser::Unknown3\n");
				resp->error_code = Unknown3(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nfc::detail::IUser", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0, uint64_t _1, uint64_t _2, uint8_t * _3, unsigned int _3_size);
		uint32_t Unknown1();
		uint32_t Unknown2(uint32_t& _0);
		uint32_t Unknown3(uint8_t& _0);
	};
	class IUserManager : public IpcService {
	public:
		IUserManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::nfc::detail::IUserManager::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nfc::detail::IUserManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(IUnknown*& _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::nfc::detail::ISystem::Unknown0(uint64_t _0, uint64_t _1, uint64_t _2, uint8_t * _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::nfc::detail::ISystem::Unknown0\n");
	return 0;
}
uint32_t nn::nfc::detail::ISystem::Unknown1() {
	ns_print("Stub implementation for nn::nfc::detail::ISystem::Unknown1\n");
	return 0;
}
uint32_t nn::nfc::detail::ISystem::Unknown100(uint8_t _0) {
	ns_print("Stub implementation for nn::nfc::detail::ISystem::Unknown100\n");
	return 0;
}
uint32_t nn::nfc::detail::ISystem::Unknown2(uint32_t& _0) {
	ns_print("Stub implementation for nn::nfc::detail::ISystem::Unknown2\n");
	return 0;
}
uint32_t nn::nfc::detail::ISystem::Unknown3(uint8_t& _0) {
	ns_print("Stub implementation for nn::nfc::detail::ISystem::Unknown3\n");
	return 0;
}
uint32_t nn::nfc::detail::ISystemManager::Unknown0(IUnknown*& _0) {
	ns_print("Stub implementation for nn::nfc::detail::ISystemManager::Unknown0\n");
	return 0;
}
uint32_t nn::nfc::detail::IUser::Unknown0(uint64_t _0, uint64_t _1, uint64_t _2, uint8_t * _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::nfc::detail::IUser::Unknown0\n");
	return 0;
}
uint32_t nn::nfc::detail::IUser::Unknown1() {
	ns_print("Stub implementation for nn::nfc::detail::IUser::Unknown1\n");
	return 0;
}
uint32_t nn::nfc::detail::IUser::Unknown2(uint32_t& _0) {
	ns_print("Stub implementation for nn::nfc::detail::IUser::Unknown2\n");
	return 0;
}
uint32_t nn::nfc::detail::IUser::Unknown3(uint8_t& _0) {
	ns_print("Stub implementation for nn::nfc::detail::IUser::Unknown3\n");
	return 0;
}
uint32_t nn::nfc::detail::IUserManager::Unknown0(IUnknown*& _0) {
	ns_print("Stub implementation for nn::nfc::detail::IUserManager::Unknown0\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::nfc::mifare::detail {
	class IUser : public IpcService {
	public:
		IUser() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nfc::mifare::detail::IUser::Unknown0: uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp2);
				resp->error_code = Unknown0(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->pid, temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfc::mifare::detail::IUser::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfc::mifare::detail::IUser::Unknown2\n");
				resp->error_code = Unknown2(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfc::mifare::detail::IUser::Unknown3: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown3(req->GetData<uint64_t>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfc::mifare::detail::IUser::Unknown4: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown4(req->GetData<uint64_t>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::nfc::mifare::detail::IUser::Unknown5: uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), temp2);
				resp->error_code = Unknown5(req->GetData<uint64_t>(8), temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nfc::mifare::detail::IUser::Unknown6: uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), temp2);
				resp->error_code = Unknown6(req->GetData<uint64_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfc::mifare::detail::IUser::Unknown7: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown7(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::nfc::mifare::detail::IUser::Unknown8: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown8(req->GetData<uint64_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::nfc::mifare::detail::IUser::Unknown9: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown9(req->GetData<uint64_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nfc::mifare::detail::IUser::Unknown10\n");
				resp->error_code = Unknown10(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nfc::mifare::detail::IUser::Unknown11: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown11(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nfc::mifare::detail::IUser::Unknown12: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown12(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::nfc::mifare::detail::IUser::Unknown13\n");
				resp->error_code = Unknown13(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nfc::mifare::detail::IUser", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0, uint64_t _1, uint64_t _2, uint8_t * _3, unsigned int _3_size);
		uint32_t Unknown1();
		uint32_t Unknown10(uint32_t& _0);
		uint32_t Unknown11(uint64_t _0, uint32_t& _1);
		uint32_t Unknown12(uint64_t _0, uint32_t& _1);
		uint32_t Unknown13(IpcService*& _0);
		uint32_t Unknown2(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown3(uint64_t _0);
		uint32_t Unknown4(uint64_t _0);
		uint32_t Unknown5(uint64_t _0, uint8_t * _1, unsigned int _1_size, uint8_t *& _2, unsigned int _2_size);
		uint32_t Unknown6(uint64_t _0, uint8_t * _1, unsigned int _1_size);
		uint32_t Unknown7(uint64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown8(uint64_t _0, IpcService*& _1);
		uint32_t Unknown9(uint64_t _0, IpcService*& _1);
	};
	class IUserManager : public IpcService {
	public:
		IUserManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::nfc::mifare::detail::IUserManager::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nfc::mifare::detail::IUserManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(IUnknown*& _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::nfc::mifare::detail::IUser::Unknown0(uint64_t _0, uint64_t _1, uint64_t _2, uint8_t * _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::nfc::mifare::detail::IUser::Unknown0\n");
	return 0;
}
uint32_t nn::nfc::mifare::detail::IUser::Unknown1() {
	ns_print("Stub implementation for nn::nfc::mifare::detail::IUser::Unknown1\n");
	return 0;
}
uint32_t nn::nfc::mifare::detail::IUser::Unknown10(uint32_t& _0) {
	ns_print("Stub implementation for nn::nfc::mifare::detail::IUser::Unknown10\n");
	return 0;
}
uint32_t nn::nfc::mifare::detail::IUser::Unknown11(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::nfc::mifare::detail::IUser::Unknown11\n");
	return 0;
}
uint32_t nn::nfc::mifare::detail::IUser::Unknown12(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::nfc::mifare::detail::IUser::Unknown12\n");
	return 0;
}
uint32_t nn::nfc::mifare::detail::IUser::Unknown13(IpcService*& _0) {
	ns_print("Stub implementation for nn::nfc::mifare::detail::IUser::Unknown13\n");
	return 0;
}
uint32_t nn::nfc::mifare::detail::IUser::Unknown2(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfc::mifare::detail::IUser::Unknown2\n");
	return 0;
}
uint32_t nn::nfc::mifare::detail::IUser::Unknown3(uint64_t _0) {
	ns_print("Stub implementation for nn::nfc::mifare::detail::IUser::Unknown3\n");
	return 0;
}
uint32_t nn::nfc::mifare::detail::IUser::Unknown4(uint64_t _0) {
	ns_print("Stub implementation for nn::nfc::mifare::detail::IUser::Unknown4\n");
	return 0;
}
uint32_t nn::nfc::mifare::detail::IUser::Unknown5(uint64_t _0, uint8_t * _1, unsigned int _1_size, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::nfc::mifare::detail::IUser::Unknown5\n");
	return 0;
}
uint32_t nn::nfc::mifare::detail::IUser::Unknown6(uint64_t _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfc::mifare::detail::IUser::Unknown6\n");
	return 0;
}
uint32_t nn::nfc::mifare::detail::IUser::Unknown7(uint64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfc::mifare::detail::IUser::Unknown7\n");
	return 0;
}
uint32_t nn::nfc::mifare::detail::IUser::Unknown8(uint64_t _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::nfc::mifare::detail::IUser::Unknown8\n");
	return 0;
}
uint32_t nn::nfc::mifare::detail::IUser::Unknown9(uint64_t _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::nfc::mifare::detail::IUser::Unknown9\n");
	return 0;
}
uint32_t nn::nfc::mifare::detail::IUserManager::Unknown0(IUnknown*& _0) {
	ns_print("Stub implementation for nn::nfc::mifare::detail::IUserManager::Unknown0\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::nfp::detail {
	class IDebug : public IpcService {
	public:
		IDebug() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown0: uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp2);
				resp->error_code = Unknown0(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->pid, temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown2\n");
				resp->error_code = Unknown2(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown3: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown3(req->GetData<uint64_t>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown4: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown4(req->GetData<uint64_t>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown5: uint64_t = 0x%%lx, uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), req->GetData<uint32_t>(0x14));
				resp->error_code = Unknown5(req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), req->GetData<uint32_t>(0x14));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown6: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown6(req->GetData<uint64_t>(8));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown7: uint64_t = 0x%%lx, uint32_t = 0x%x\n", req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10));
				resp->error_code = Unknown7(req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10));
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown8: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown8(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown9: uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), temp2);
				resp->error_code = Unknown9(req->GetData<uint64_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown10: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown10(req->GetData<uint64_t>(8));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown11: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown11(req->GetData<uint64_t>(8));
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown12: uint64_t = 0x%%lx, uint32_t = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), temp2);
				resp->error_code = Unknown12(req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown13: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown13(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown14: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown14(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown15: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown15(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown16: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown16(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown17: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown17(req->GetData<uint64_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown18: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown18(req->GetData<uint64_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown19\n");
				resp->error_code = Unknown19(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown20: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown20(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown21: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown21(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown22: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown22(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown23\n");
				resp->error_code = Unknown23(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 24: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown24: uint64_t = 0x%%lx, uint32_t = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), temp2);
				resp->error_code = Unknown24(req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown100: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown100(req->GetData<uint64_t>(8));
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown101: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown101(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 102: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown102: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown102(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 103: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown103: uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), temp2);
				resp->error_code = Unknown103(req->GetData<uint64_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 104: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown104: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown104(req->GetData<uint64_t>(8));
				return 0;
			}
			case 105: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown105: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown105(req->GetData<uint64_t>(8));
				return 0;
			}
			case 106: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown106: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown106(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 200: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown200: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown200(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 201: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown201: uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), temp2);
				resp->error_code = Unknown201(req->GetData<uint64_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 202: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown202: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown202(req->GetData<uint64_t>(8));
				return 0;
			}
			case 203: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown203: uint64_t = 0x%%lx, uint32_t = 0x%x\n", req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10));
				resp->error_code = Unknown203(req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10));
				return 0;
			}
			case 204: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown204\n");
				resp->error_code = Unknown204(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 205: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown205: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown205(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 206: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown206: uint64_t = 0x%%lx, uint32_t = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), temp2);
				resp->error_code = Unknown206(req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 300: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown300: uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp2);
				resp->error_code = Unknown300(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->pid, temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 301: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown301\n");
				resp->error_code = Unknown301();
				return 0;
			}
			case 302: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown302\n");
				resp->error_code = Unknown302(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 303: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown303: uint64_t = 0x%%lx, uint32_t = 0x%x\n", req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10));
				resp->error_code = Unknown303(req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10));
				return 0;
			}
			case 304: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown304: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown304(req->GetData<uint64_t>(8));
				return 0;
			}
			case 305: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown305: uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp2);
				resp->error_code = Unknown305(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp3, temp2, *resp->GetDataPointer<uint32_t *>(8), temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 306: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown306: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown306(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 307: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown307: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown307(req->GetData<uint64_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 308: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown308: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown308(req->GetData<uint64_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 309: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown309\n");
				resp->error_code = Unknown309(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 310: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown310: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown310(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 311: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown311: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown311(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 312: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown312: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown312(req->GetData<uint64_t>(8));
				return 0;
			}
			case 313: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown313: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown313(req->GetData<uint64_t>(8));
				return 0;
			}
			case 314: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::nfp::detail::IDebug::Unknown314\n");
				resp->error_code = Unknown314(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nfp::detail::IDebug", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0, uint64_t _1, uint64_t _2, uint8_t * _3, unsigned int _3_size);
		uint32_t Unknown1();
		uint32_t Unknown10(uint64_t _0);
		uint32_t Unknown100(uint64_t _0);
		uint32_t Unknown101(uint64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown102(uint64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown103(uint64_t _0, uint8_t * _1, unsigned int _1_size);
		uint32_t Unknown104(uint64_t _0);
		uint32_t Unknown105(uint64_t _0);
		uint32_t Unknown106(uint64_t _0, uint8_t& _1);
		uint32_t Unknown11(uint64_t _0);
		uint32_t Unknown12(uint64_t _0, uint32_t _1, uint8_t * _2, unsigned int _2_size);
		uint32_t Unknown13(uint64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown14(uint64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown15(uint64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown16(uint64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown17(uint64_t _0, IpcService*& _1);
		uint32_t Unknown18(uint64_t _0, IpcService*& _1);
		uint32_t Unknown19(uint32_t& _0);
		uint32_t Unknown2(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown20(uint64_t _0, uint32_t& _1);
		uint32_t Unknown200(uint64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown201(uint64_t _0, uint8_t * _1, unsigned int _1_size);
		uint32_t Unknown202(uint64_t _0);
		uint32_t Unknown203(uint64_t _0, uint32_t _1);
		uint32_t Unknown204(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown205(uint8_t * _0, unsigned int _0_size);
		uint32_t Unknown206(uint64_t _0, uint32_t _1, uint8_t * _2, unsigned int _2_size);
		uint32_t Unknown21(uint64_t _0, uint32_t& _1);
		uint32_t Unknown22(uint64_t _0, uint32_t& _1);
		uint32_t Unknown23(IpcService*& _0);
		uint32_t Unknown24(uint64_t _0, uint32_t _1, uint8_t * _2, unsigned int _2_size);
		uint32_t Unknown3(uint64_t _0);
		uint32_t Unknown300(uint64_t _0, uint64_t _1, uint64_t _2, uint8_t * _3, unsigned int _3_size);
		uint32_t Unknown301();
		uint32_t Unknown302(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown303(uint64_t _0, uint32_t _1);
		uint32_t Unknown304(uint64_t _0);
		uint32_t Unknown305(uint64_t _0, uint64_t _1, uint8_t * _2, unsigned int _2_size, uint32_t& _3, uint8_t *& _4, unsigned int _4_size);
		uint32_t Unknown306(uint64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown307(uint64_t _0, IpcService*& _1);
		uint32_t Unknown308(uint64_t _0, IpcService*& _1);
		uint32_t Unknown309(uint32_t& _0);
		uint32_t Unknown310(uint64_t _0, uint32_t& _1);
		uint32_t Unknown311(uint64_t _0, uint32_t& _1);
		uint32_t Unknown312(uint64_t _0);
		uint32_t Unknown313(uint64_t _0);
		uint32_t Unknown314(IpcService*& _0);
		uint32_t Unknown4(uint64_t _0);
		uint32_t Unknown5(uint64_t _0, uint32_t _1, uint32_t _2);
		uint32_t Unknown6(uint64_t _0);
		uint32_t Unknown7(uint64_t _0, uint32_t _1);
		uint32_t Unknown8(uint64_t _0, uint32_t& _1, uint8_t *& _2, unsigned int _2_size);
		uint32_t Unknown9(uint64_t _0, uint8_t * _1, unsigned int _1_size);
	};
	class IDebugManager : public IpcService {
	public:
		IDebugManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::nfp::detail::IDebugManager::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nfp::detail::IDebugManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(IUnknown*& _0);
	};
	class ISystem : public IpcService {
	public:
		ISystem() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown0: uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp2);
				resp->error_code = Unknown0(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->pid, temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown2\n");
				resp->error_code = Unknown2(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown3: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown3(req->GetData<uint64_t>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown4: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown4(req->GetData<uint64_t>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown5: uint64_t = 0x%%lx, uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), req->GetData<uint32_t>(0x14));
				resp->error_code = Unknown5(req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), req->GetData<uint32_t>(0x14));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown6: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown6(req->GetData<uint64_t>(8));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown10: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown10(req->GetData<uint64_t>(8));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown11: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown11(req->GetData<uint64_t>(8));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown13: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown13(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown14: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown14(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown15: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown15(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown16: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown16(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown17: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown17(req->GetData<uint64_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown18: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown18(req->GetData<uint64_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown19\n");
				resp->error_code = Unknown19(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown20: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown20(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown21: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown21(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown23\n");
				resp->error_code = Unknown23(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown100: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown100(req->GetData<uint64_t>(8));
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown101: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown101(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 102: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown102: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown102(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 103: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown103: uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), temp2);
				resp->error_code = Unknown103(req->GetData<uint64_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 104: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown104: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown104(req->GetData<uint64_t>(8));
				return 0;
			}
			case 105: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown105: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown105(req->GetData<uint64_t>(8));
				return 0;
			}
			case 106: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::nfp::detail::ISystem::Unknown106: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown106(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nfp::detail::ISystem", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0, uint64_t _1, uint64_t _2, uint8_t * _3, unsigned int _3_size);
		uint32_t Unknown1();
		uint32_t Unknown10(uint64_t _0);
		uint32_t Unknown100(uint64_t _0);
		uint32_t Unknown101(uint64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown102(uint64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown103(uint64_t _0, uint8_t * _1, unsigned int _1_size);
		uint32_t Unknown104(uint64_t _0);
		uint32_t Unknown105(uint64_t _0);
		uint32_t Unknown106(uint64_t _0, uint8_t& _1);
		uint32_t Unknown11(uint64_t _0);
		uint32_t Unknown13(uint64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown14(uint64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown15(uint64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown16(uint64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown17(uint64_t _0, IpcService*& _1);
		uint32_t Unknown18(uint64_t _0, IpcService*& _1);
		uint32_t Unknown19(uint32_t& _0);
		uint32_t Unknown2(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown20(uint64_t _0, uint32_t& _1);
		uint32_t Unknown21(uint64_t _0, uint32_t& _1);
		uint32_t Unknown23(IpcService*& _0);
		uint32_t Unknown3(uint64_t _0);
		uint32_t Unknown4(uint64_t _0);
		uint32_t Unknown5(uint64_t _0, uint32_t _1, uint32_t _2);
		uint32_t Unknown6(uint64_t _0);
	};
	class ISystemManager : public IpcService {
	public:
		ISystemManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::nfp::detail::ISystemManager::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nfp::detail::ISystemManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(IUnknown*& _0);
	};
	class IUser : public IpcService {
	public:
		IUser() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown0: uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), temp2);
				resp->error_code = Unknown0(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->pid, temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown2\n");
				resp->error_code = Unknown2(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown3: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown3(req->GetData<uint64_t>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown4: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown4(req->GetData<uint64_t>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown5: uint64_t = 0x%%lx, uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), req->GetData<uint32_t>(0x14));
				resp->error_code = Unknown5(req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), req->GetData<uint32_t>(0x14));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown6: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown6(req->GetData<uint64_t>(8));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown7: uint64_t = 0x%%lx, uint32_t = 0x%x\n", req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10));
				resp->error_code = Unknown7(req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10));
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown8: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown8(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown9: uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), temp2);
				resp->error_code = Unknown9(req->GetData<uint64_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown10: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown10(req->GetData<uint64_t>(8));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown11: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown11(req->GetData<uint64_t>(8));
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown12: uint64_t = 0x%%lx, uint32_t = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), temp2);
				resp->error_code = Unknown12(req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown13: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown13(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown14: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown14(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown15: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown15(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown16: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown16(req->GetData<uint64_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown17: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown17(req->GetData<uint64_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown18: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown18(req->GetData<uint64_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown19\n");
				resp->error_code = Unknown19(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown20: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown20(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown21: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown21(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown22: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown22(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown23\n");
				resp->error_code = Unknown23(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 24: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nfp::detail::IUser::Unknown24: uint64_t = 0x%%lx, uint32_t = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), temp2);
				resp->error_code = Unknown24(req->GetData<uint64_t>(8), req->GetData<uint32_t>(0x10), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nfp::detail::IUser", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0, uint64_t _1, uint64_t _2, uint8_t * _3, unsigned int _3_size);
		uint32_t Unknown1();
		uint32_t Unknown10(uint64_t _0);
		uint32_t Unknown11(uint64_t _0);
		uint32_t Unknown12(uint64_t _0, uint32_t _1, uint8_t * _2, unsigned int _2_size);
		uint32_t Unknown13(uint64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown14(uint64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown15(uint64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown16(uint64_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown17(uint64_t _0, IpcService*& _1);
		uint32_t Unknown18(uint64_t _0, IpcService*& _1);
		uint32_t Unknown19(uint32_t& _0);
		uint32_t Unknown2(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown20(uint64_t _0, uint32_t& _1);
		uint32_t Unknown21(uint64_t _0, uint32_t& _1);
		uint32_t Unknown22(uint64_t _0, uint32_t& _1);
		uint32_t Unknown23(IpcService*& _0);
		uint32_t Unknown24(uint64_t _0, uint32_t _1, uint8_t * _2, unsigned int _2_size);
		uint32_t Unknown3(uint64_t _0);
		uint32_t Unknown4(uint64_t _0);
		uint32_t Unknown5(uint64_t _0, uint32_t _1, uint32_t _2);
		uint32_t Unknown6(uint64_t _0);
		uint32_t Unknown7(uint64_t _0, uint32_t _1);
		uint32_t Unknown8(uint64_t _0, uint32_t& _1, uint8_t *& _2, unsigned int _2_size);
		uint32_t Unknown9(uint64_t _0, uint8_t * _1, unsigned int _1_size);
	};
	class IUserManager : public IpcService {
	public:
		IUserManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::nfp::detail::IUserManager::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nfp::detail::IUserManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(IUnknown*& _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::nfp::detail::IDebug::Unknown0(uint64_t _0, uint64_t _1, uint64_t _2, uint8_t * _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown0\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown1() {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown1\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown10(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown10\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown100(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown100\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown101(uint64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown101\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown102(uint64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown102\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown103(uint64_t _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown103\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown104(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown104\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown105(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown105\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown106(uint64_t _0, uint8_t& _1) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown106\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown11(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown11\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown12(uint64_t _0, uint32_t _1, uint8_t * _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown12\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown13(uint64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown13\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown14(uint64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown14\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown15(uint64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown15\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown16(uint64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown16\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown17(uint64_t _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown17\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown18(uint64_t _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown18\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown19(uint32_t& _0) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown19\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown2(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown2\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown20(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown20\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown200(uint64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown200\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown201(uint64_t _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown201\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown202(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown202\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown203(uint64_t _0, uint32_t _1) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown203\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown204(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown204\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown205(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown205\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown206(uint64_t _0, uint32_t _1, uint8_t * _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown206\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown21(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown21\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown22(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown22\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown23(IpcService*& _0) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown23\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown24(uint64_t _0, uint32_t _1, uint8_t * _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown24\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown3(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown3\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown300(uint64_t _0, uint64_t _1, uint64_t _2, uint8_t * _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown300\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown301() {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown301\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown302(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown302\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown303(uint64_t _0, uint32_t _1) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown303\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown304(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown304\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown305(uint64_t _0, uint64_t _1, uint8_t * _2, unsigned int _2_size, uint32_t& _3, uint8_t *& _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown305\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown306(uint64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown306\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown307(uint64_t _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown307\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown308(uint64_t _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown308\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown309(uint32_t& _0) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown309\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown310(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown310\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown311(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown311\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown312(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown312\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown313(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown313\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown314(IpcService*& _0) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown314\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown4(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown4\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown5(uint64_t _0, uint32_t _1, uint32_t _2) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown5\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown6(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown6\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown7(uint64_t _0, uint32_t _1) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown7\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown8(uint64_t _0, uint32_t& _1, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown8\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebug::Unknown9(uint64_t _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::IDebug::Unknown9\n");
	return 0;
}
uint32_t nn::nfp::detail::IDebugManager::Unknown0(IUnknown*& _0) {
	ns_print("Stub implementation for nn::nfp::detail::IDebugManager::Unknown0\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown0(uint64_t _0, uint64_t _1, uint64_t _2, uint8_t * _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown0\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown1() {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown1\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown10(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown10\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown100(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown100\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown101(uint64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown101\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown102(uint64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown102\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown103(uint64_t _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown103\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown104(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown104\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown105(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown105\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown106(uint64_t _0, uint8_t& _1) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown106\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown11(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown11\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown13(uint64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown13\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown14(uint64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown14\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown15(uint64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown15\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown16(uint64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown16\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown17(uint64_t _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown17\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown18(uint64_t _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown18\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown19(uint32_t& _0) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown19\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown2(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown2\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown20(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown20\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown21(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown21\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown23(IpcService*& _0) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown23\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown3(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown3\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown4(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown4\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown5(uint64_t _0, uint32_t _1, uint32_t _2) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown5\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystem::Unknown6(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::ISystem::Unknown6\n");
	return 0;
}
uint32_t nn::nfp::detail::ISystemManager::Unknown0(IUnknown*& _0) {
	ns_print("Stub implementation for nn::nfp::detail::ISystemManager::Unknown0\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown0(uint64_t _0, uint64_t _1, uint64_t _2, uint8_t * _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown0\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown1() {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown1\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown10(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown10\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown11(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown11\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown12(uint64_t _0, uint32_t _1, uint8_t * _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown12\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown13(uint64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown13\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown14(uint64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown14\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown15(uint64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown15\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown16(uint64_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown16\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown17(uint64_t _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown17\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown18(uint64_t _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown18\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown19(uint32_t& _0) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown19\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown2(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown2\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown20(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown20\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown21(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown21\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown22(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown22\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown23(IpcService*& _0) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown23\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown24(uint64_t _0, uint32_t _1, uint8_t * _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown24\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown3(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown3\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown4(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown4\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown5(uint64_t _0, uint32_t _1, uint32_t _2) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown5\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown6(uint64_t _0) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown6\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown7(uint64_t _0, uint32_t _1) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown7\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown8(uint64_t _0, uint32_t& _1, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown8\n");
	return 0;
}
uint32_t nn::nfp::detail::IUser::Unknown9(uint64_t _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nfp::detail::IUser::Unknown9\n");
	return 0;
}
uint32_t nn::nfp::detail::IUserManager::Unknown0(IUnknown*& _0) {
	ns_print("Stub implementation for nn::nfp::detail::IUserManager::Unknown0\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::nifm::detail {
	class IGeneralService : public IpcService {
	public:
		IGeneralService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 1: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::nifm::ClientId* temp3 = (nn::nifm::ClientId *) new uint8_t[temp2];
				ns_print("IPC message to nn::nifm::detail::IGeneralService::GetClientId\n");
				resp->error_code = GetClientId(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(1, 0, 0);
				nn::nifm::detail::IScanRequest* temp1;
				ns_print("IPC message to nn::nifm::detail::IGeneralService::CreateScanRequest\n");
				resp->error_code = CreateScanRequest(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 4: {
				resp->GenBuf(1, 0, 0);
				nn::nifm::detail::IRequest* temp1;
				ns_print("IPC message to nn::nifm::detail::IGeneralService::CreateRequest: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = CreateRequest(req->GetData<int32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::nifm::detail::sf::NetworkProfileData* temp3 = (nn::nifm::detail::sf::NetworkProfileData *) new uint8_t[temp2];
				ns_print("IPC message to nn::nifm::detail::IGeneralService::GetCurrentNetworkProfile\n");
				resp->error_code = GetCurrentNetworkProfile(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::nifm::detail::sf::NetworkInterfaceInfo* temp3 = (nn::nifm::detail::sf::NetworkInterfaceInfo *) new uint8_t[temp2];
				ns_print("IPC message to nn::nifm::detail::IGeneralService::EnumerateNetworkInterfaces: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = EnumerateNetworkInterfaces(req->GetData<uint32_t>(8), *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::nifm::detail::sf::NetworkProfileBasicInfo* temp3 = (nn::nifm::detail::sf::NetworkProfileBasicInfo *) new uint8_t[temp2];
				ns_print("IPC message to nn::nifm::detail::IGeneralService::EnumerateNetworkProfiles: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = EnumerateNetworkProfiles(req->GetData<uint8_t>(8), *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::nifm::detail::sf::NetworkProfileData* temp3 = (nn::nifm::detail::sf::NetworkProfileData *) new uint8_t[temp2];
				ns_print("IPC message to nn::nifm::detail::IGeneralService::GetNetworkProfile: nn::util::Uuid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetNetworkProfile(req->GetData<nn::util::Uuid>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 16);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::nifm::detail::sf::NetworkProfileData* temp3 = (nn::nifm::detail::sf::NetworkProfileData *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nifm::detail::IGeneralService::SetNetworkProfile: nn::nifm::detail::sf::NetworkProfileData *= buffer<0x%lx>\n", temp2);
				resp->error_code = SetNetworkProfile(temp3, temp2, *resp->GetDataPointer<nn::util::Uuid *>(8));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IGeneralService::RemoveNetworkProfile: nn::util::Uuid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = RemoveNetworkProfile(req->GetData<nn::util::Uuid>(8));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::nifm::detail::sf::AccessPointData* temp3 = (nn::nifm::detail::sf::AccessPointData *) new uint8_t[temp2];
				ns_print("IPC message to nn::nifm::detail::IGeneralService::GetScanData\n");
				resp->error_code = GetScanData(*resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nifm::detail::IGeneralService::GetCurrentIpAddress\n");
				resp->error_code = GetCurrentIpAddress(*resp->GetDataPointer<nn::nifm::IpV4Address *>(8));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::nifm::detail::sf::AccessPointData* temp3 = (nn::nifm::detail::sf::AccessPointData *) new uint8_t[temp2];
				ns_print("IPC message to nn::nifm::detail::IGeneralService::GetCurrentAccessPoint\n");
				resp->error_code = GetCurrentAccessPoint(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 14: {
				resp->GenBuf(1, 0, 16);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::nifm::detail::sf::NetworkProfileData* temp3 = (nn::nifm::detail::sf::NetworkProfileData *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				nn::nifm::detail::INetworkProfile* temp4;
				ns_print("IPC message to nn::nifm::detail::IGeneralService::CreateTemporaryNetworkProfile: nn::nifm::detail::sf::NetworkProfileData *= buffer<0x%lx>\n", temp2);
				resp->error_code = CreateTemporaryNetworkProfile(temp3, temp2, *resp->GetDataPointer<nn::util::Uuid *>(8), temp4);
				delete[] (uint8_t *) temp3;
				if(temp4 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp4));
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 22);
				auto temp1 = resp->GetDataPointer<nn::nifm::IpAddressSetting>(8);
				auto temp2 = resp->GetDataPointer<nn::nifm::DnsSetting>(0x15);
				ns_print("IPC message to nn::nifm::detail::IGeneralService::GetCurrentIpConfigInfo\n");
				resp->error_code = GetCurrentIpConfigInfo(temp1, temp2);
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IGeneralService::SetWirelessCommunicationEnabled: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetWirelessCommunicationEnabled(req->GetData<bool>(8));
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::nifm::detail::IGeneralService::IsWirelessCommunicationEnabled\n");
				resp->error_code = IsWirelessCommunicationEnabled(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 4);
				auto temp1 = resp->GetDataPointer<nn::nifm::detail::sf::InternetConnectionStatus>(9);
				ns_print("IPC message to nn::nifm::detail::IGeneralService::GetInternetConnectionStatus\n");
				resp->error_code = GetInternetConnectionStatus(temp1);
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IGeneralService::SetEthernetCommunicationEnabled: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetEthernetCommunicationEnabled(req->GetData<bool>(8));
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::nifm::detail::IGeneralService::IsEthernetCommunicationEnabled\n");
				resp->error_code = IsEthernetCommunicationEnabled(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 1);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::nifm::ClientId* temp3 = (nn::nifm::ClientId *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nifm::detail::IGeneralService::IsAnyInternetRequestAccepted: nn::nifm::ClientId *= buffer<0x%lx>\n", temp2);
				resp->error_code = IsAnyInternetRequestAccepted(temp3, temp2, *resp->GetDataPointer<bool *>(8));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::nifm::detail::IGeneralService::IsAnyForegroundRequestAccepted\n");
				resp->error_code = IsAnyForegroundRequestAccepted(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IGeneralService::PutToSleep\n");
				resp->error_code = PutToSleep();
				return 0;
			}
			case 24: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IGeneralService::WakeUp\n");
				resp->error_code = WakeUp();
				return 0;
			}
			case 25: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::nifm::detail::IGeneralService::GetSsidListVersion\n");
				resp->error_code = GetSsidListVersion(*resp->GetDataPointer<nn::nifm::SsidListVersion *>(8));
				return 0;
			}
			case 26: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::nifm::ClientId* temp3 = (nn::nifm::ClientId *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nifm::detail::IGeneralService::SetExclusiveClient: nn::nifm::ClientId *= buffer<0x%lx>\n", temp2);
				resp->error_code = SetExclusiveClient(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 27: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::nifm::IpSettingData* temp3 = (nn::nifm::IpSettingData *) new uint8_t[temp2];
				ns_print("IPC message to nn::nifm::detail::IGeneralService::GetDefaultIpSetting\n");
				resp->error_code = GetDefaultIpSetting(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 28: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::nifm::IpSettingData* temp3 = (nn::nifm::IpSettingData *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nifm::detail::IGeneralService::SetDefaultIpSetting: nn::nifm::IpSettingData *= buffer<0x%lx>\n", temp2);
				resp->error_code = SetDefaultIpSetting(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 29: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IGeneralService::SetWirelessCommunicationEnabledForTest: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetWirelessCommunicationEnabledForTest(req->GetData<bool>(8));
				return 0;
			}
			case 30: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IGeneralService::SetEthernetCommunicationEnabledForTest: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetEthernetCommunicationEnabledForTest(req->GetData<bool>(8));
				return 0;
			}
			case 31: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::nifm::detail::IGeneralService::GetTelemetorySystemEventReadableHandle\n");
				resp->error_code = GetTelemetorySystemEventReadableHandle(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 32: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x16, 0, temp2);
				nn::nifm::TelemetryInfo* temp3 = (nn::nifm::TelemetryInfo *) new uint8_t[temp2];
				ns_print("IPC message to nn::nifm::detail::IGeneralService::GetTelemetryInfo\n");
				resp->error_code = GetTelemetryInfo(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 33: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IGeneralService::ConfirmSystemAvailability\n");
				resp->error_code = ConfirmSystemAvailability();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nifm::detail::IGeneralService", req->cmd_id);
			}
		}
		uint32_t ConfirmSystemAvailability();
		uint32_t CreateRequest(int32_t _0, nn::nifm::detail::IRequest*& _1);
		uint32_t CreateScanRequest(nn::nifm::detail::IScanRequest*& _0);
		uint32_t CreateTemporaryNetworkProfile(nn::nifm::detail::sf::NetworkProfileData * _0, unsigned int _0_size, nn::util::Uuid& _1, nn::nifm::detail::INetworkProfile*& _2);
		uint32_t EnumerateNetworkInterfaces(uint32_t _0, int32_t& _1, nn::nifm::detail::sf::NetworkInterfaceInfo *& _2, unsigned int _2_size);
		uint32_t EnumerateNetworkProfiles(uint8_t _0, int32_t& _1, nn::nifm::detail::sf::NetworkProfileBasicInfo *& _2, unsigned int _2_size);
		uint32_t GetClientId(nn::nifm::ClientId *& _0, unsigned int _0_size);
		uint32_t GetCurrentAccessPoint(nn::nifm::detail::sf::AccessPointData *& _0, unsigned int _0_size);
		uint32_t GetCurrentIpAddress(nn::nifm::IpV4Address& _0);
		uint32_t GetCurrentIpConfigInfo(nn::nifm::IpAddressSetting& _0, nn::nifm::DnsSetting& _1);
		uint32_t GetCurrentNetworkProfile(nn::nifm::detail::sf::NetworkProfileData *& _0, unsigned int _0_size);
		uint32_t GetDefaultIpSetting(nn::nifm::IpSettingData *& _0, unsigned int _0_size);
		uint32_t GetInternetConnectionStatus(nn::nifm::detail::sf::InternetConnectionStatus& _0);
		uint32_t GetNetworkProfile(nn::util::Uuid _0, nn::nifm::detail::sf::NetworkProfileData *& _1, unsigned int _1_size);
		uint32_t GetScanData(int32_t& _0, nn::nifm::detail::sf::AccessPointData *& _1, unsigned int _1_size);
		uint32_t GetSsidListVersion(nn::nifm::SsidListVersion& _0);
		uint32_t GetTelemetorySystemEventReadableHandle(IpcService*& _0);
		uint32_t GetTelemetryInfo(nn::nifm::TelemetryInfo *& _0, unsigned int _0_size);
		uint32_t IsAnyForegroundRequestAccepted(bool& _0);
		uint32_t IsAnyInternetRequestAccepted(nn::nifm::ClientId * _0, unsigned int _0_size, bool& _1);
		uint32_t IsEthernetCommunicationEnabled(bool& _0);
		uint32_t IsWirelessCommunicationEnabled(bool& _0);
		uint32_t PutToSleep();
		uint32_t RemoveNetworkProfile(nn::util::Uuid _0);
		uint32_t SetDefaultIpSetting(nn::nifm::IpSettingData * _0, unsigned int _0_size);
		uint32_t SetEthernetCommunicationEnabled(bool _0);
		uint32_t SetEthernetCommunicationEnabledForTest(bool _0);
		uint32_t SetExclusiveClient(nn::nifm::ClientId * _0, unsigned int _0_size);
		uint32_t SetNetworkProfile(nn::nifm::detail::sf::NetworkProfileData * _0, unsigned int _0_size, nn::util::Uuid& _1);
		uint32_t SetWirelessCommunicationEnabled(bool _0);
		uint32_t SetWirelessCommunicationEnabledForTest(bool _0);
		uint32_t WakeUp();
	};
	class INetworkProfile : public IpcService {
	public:
		INetworkProfile() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 16);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::nifm::detail::sf::NetworkProfileData* temp3 = (nn::nifm::detail::sf::NetworkProfileData *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nifm::detail::INetworkProfile::Update: nn::nifm::detail::sf::NetworkProfileData *= buffer<0x%lx>\n", temp2);
				resp->error_code = Update(temp3, temp2, *resp->GetDataPointer<nn::util::Uuid *>(8));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::nifm::detail::INetworkProfile::PersistOld: nn::util::Uuid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = PersistOld(req->GetData<nn::util::Uuid>(8), *resp->GetDataPointer<nn::util::Uuid *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::nifm::detail::INetworkProfile::Persist\n");
				resp->error_code = Persist(*resp->GetDataPointer<nn::util::Uuid *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nifm::detail::INetworkProfile", req->cmd_id);
			}
		}
		uint32_t Persist(nn::util::Uuid& _0);
		uint32_t PersistOld(nn::util::Uuid _0, nn::util::Uuid& _1);
		uint32_t Update(nn::nifm::detail::sf::NetworkProfileData * _0, unsigned int _0_size, nn::util::Uuid& _1);
	};
	class IRequest : public IpcService {
	public:
		IRequest() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nifm::detail::IRequest::GetRequestState\n");
				resp->error_code = GetRequestState(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IRequest::GetResult\n");
				resp->error_code = GetResult();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 2, 0);
				IpcService *temp1;
				IpcService *temp2;
				ns_print("IPC message to nn::nifm::detail::IRequest::GetSystemEventReadableHandles\n");
				resp->error_code = GetSystemEventReadableHandles(temp1, temp2);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				if(temp2 != nullptr)
					resp->SetCopy(1, NewHandle(temp2));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IRequest::Cancel\n");
				resp->error_code = Cancel();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IRequest::Submit\n");
				resp->error_code = Submit();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IRequest::SetRequirement: nn::nifm::Requirement = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x24).c_str());
				resp->error_code = SetRequirement(req->GetDataPointer<nn::nifm::Requirement>(8));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IRequest::SetRequirementPreset: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = SetRequirementPreset(req->GetData<int32_t>(8));
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IRequest::SetPriority: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = SetPriority(req->GetData<uint8_t>(8));
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IRequest::SetNetworkProfileId: nn::util::Uuid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = SetNetworkProfileId(req->GetData<nn::util::Uuid>(8));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IRequest::SetRejectable: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetRejectable(req->GetData<bool>(8));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IRequest::SetConnectionConfirmationOption: int8_t = 0x%x\n", req->GetData<int8_t>(8));
				resp->error_code = SetConnectionConfirmationOption(req->GetData<int8_t>(8));
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IRequest::SetPersistent: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetPersistent(req->GetData<bool>(8));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IRequest::SetInstant: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetInstant(req->GetData<bool>(8));
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IRequest::SetSustainable: bool = 0x%x, uint8_t = 0x%x\n", req->GetData<bool>(8), req->GetData<uint8_t>(9));
				resp->error_code = SetSustainable(req->GetData<bool>(8), req->GetData<uint8_t>(9));
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IRequest::SetRawPriority: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = SetRawPriority(req->GetData<uint8_t>(8));
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IRequest::SetGreedy: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetGreedy(req->GetData<bool>(8));
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IRequest::SetSharable: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetSharable(req->GetData<bool>(8));
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IRequest::SetRequirementByRevision: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = SetRequirementByRevision(req->GetData<uint32_t>(8));
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 36);
				auto temp1 = resp->GetDataPointer<nn::nifm::Requirement>(8);
				ns_print("IPC message to nn::nifm::detail::IRequest::GetRequirement\n");
				resp->error_code = GetRequirement(temp1);
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::nifm::detail::IRequest::GetRevision\n");
				resp->error_code = GetRevision(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 12);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nifm::detail::IRequest::GetAppletInfo: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = GetAppletInfo(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), *resp->GetDataPointer<uint32_t *>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x16, 0, temp2);
				nn::nifm::AdditionalInfo* temp3 = (nn::nifm::AdditionalInfo *) new uint8_t[temp2];
				ns_print("IPC message to nn::nifm::detail::IRequest::GetAdditionalInfo\n");
				resp->error_code = GetAdditionalInfo(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IRequest::SetKeptInSleep: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetKeptInSleep(req->GetData<bool>(8));
				return 0;
			}
			case 24: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IRequest::RegisterSocketDescriptor: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = RegisterSocketDescriptor(req->GetData<int32_t>(8));
				return 0;
			}
			case 25: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IRequest::UnregisterSocketDescriptor: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = UnregisterSocketDescriptor(req->GetData<int32_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nifm::detail::IRequest", req->cmd_id);
			}
		}
		uint32_t Cancel();
		uint32_t GetAdditionalInfo(uint32_t& _0, nn::nifm::AdditionalInfo *& _1, unsigned int _1_size);
		uint32_t GetAppletInfo(uint32_t _0, uint32_t& _1, uint32_t& _2, uint32_t& _3, uint8_t *& _4, unsigned int _4_size);
		uint32_t GetRequestState(int32_t& _0);
		uint32_t GetRequirement(nn::nifm::Requirement& _0);
		uint32_t GetResult();
		uint32_t GetRevision(uint32_t& _0);
		uint32_t GetSystemEventReadableHandles(IpcService*& _0, IpcService*& _1);
		uint32_t RegisterSocketDescriptor(int32_t _0);
		uint32_t SetConnectionConfirmationOption(int8_t _0);
		uint32_t SetGreedy(bool _0);
		uint32_t SetInstant(bool _0);
		uint32_t SetKeptInSleep(bool _0);
		uint32_t SetNetworkProfileId(nn::util::Uuid _0);
		uint32_t SetPersistent(bool _0);
		uint32_t SetPriority(uint8_t _0);
		uint32_t SetRawPriority(uint8_t _0);
		uint32_t SetRejectable(bool _0);
		uint32_t SetRequirement(nn::nifm::Requirement _0);
		uint32_t SetRequirementByRevision(uint32_t _0);
		uint32_t SetRequirementPreset(int32_t _0);
		uint32_t SetSharable(bool _0);
		uint32_t SetSustainable(bool _0, uint8_t _1);
		uint32_t Submit();
		uint32_t UnregisterSocketDescriptor(int32_t _0);
	};
	class IScanRequest : public IpcService {
	public:
		IScanRequest() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IScanRequest::Submit\n");
				resp->error_code = Submit();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::nifm::detail::IScanRequest::IsProcessing\n");
				resp->error_code = IsProcessing(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nifm::detail::IScanRequest::GetResult\n");
				resp->error_code = GetResult();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::nifm::detail::IScanRequest::GetSystemEventReadableHandle\n");
				resp->error_code = GetSystemEventReadableHandle(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nifm::detail::IScanRequest", req->cmd_id);
			}
		}
		uint32_t GetResult();
		uint32_t GetSystemEventReadableHandle(IpcService*& _0);
		uint32_t IsProcessing(bool& _0);
		uint32_t Submit();
	};
	class IStaticService : public IpcService {
	public:
		IStaticService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 4: {
				resp->GenBuf(1, 0, 0);
				nn::nifm::detail::IGeneralService* temp1;
				ns_print("IPC message to nn::nifm::detail::IStaticService::CreateGeneralServiceOld\n");
				resp->error_code = CreateGeneralServiceOld(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 5: {
				resp->GenBuf(1, 0, 0);
				nn::nifm::detail::IGeneralService* temp1;
				ns_print("IPC message to nn::nifm::detail::IStaticService::CreateGeneralService: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = CreateGeneralService(req->GetData<uint64_t>(8), req->pid, temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nifm::detail::IStaticService", req->cmd_id);
			}
		}
		uint32_t CreateGeneralService(uint64_t _0, uint64_t _1, nn::nifm::detail::IGeneralService*& _2);
		uint32_t CreateGeneralServiceOld(nn::nifm::detail::IGeneralService*& _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::nifm::detail::IGeneralService::ConfirmSystemAvailability() {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::ConfirmSystemAvailability\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::CreateRequest(int32_t _0, nn::nifm::detail::IRequest*& _1) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::CreateRequest\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::CreateScanRequest(nn::nifm::detail::IScanRequest*& _0) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::CreateScanRequest\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::CreateTemporaryNetworkProfile(nn::nifm::detail::sf::NetworkProfileData * _0, unsigned int _0_size, nn::util::Uuid& _1, nn::nifm::detail::INetworkProfile*& _2) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::CreateTemporaryNetworkProfile\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::EnumerateNetworkInterfaces(uint32_t _0, int32_t& _1, nn::nifm::detail::sf::NetworkInterfaceInfo *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::EnumerateNetworkInterfaces\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::EnumerateNetworkProfiles(uint8_t _0, int32_t& _1, nn::nifm::detail::sf::NetworkProfileBasicInfo *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::EnumerateNetworkProfiles\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::GetClientId(nn::nifm::ClientId *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::GetClientId\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::GetCurrentAccessPoint(nn::nifm::detail::sf::AccessPointData *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::GetCurrentAccessPoint\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::GetCurrentIpAddress(nn::nifm::IpV4Address& _0) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::GetCurrentIpAddress\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::GetCurrentIpConfigInfo(nn::nifm::IpAddressSetting& _0, nn::nifm::DnsSetting& _1) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::GetCurrentIpConfigInfo\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::GetCurrentNetworkProfile(nn::nifm::detail::sf::NetworkProfileData *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::GetCurrentNetworkProfile\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::GetDefaultIpSetting(nn::nifm::IpSettingData *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::GetDefaultIpSetting\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::GetInternetConnectionStatus(nn::nifm::detail::sf::InternetConnectionStatus& _0) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::GetInternetConnectionStatus\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::GetNetworkProfile(nn::util::Uuid _0, nn::nifm::detail::sf::NetworkProfileData *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::GetNetworkProfile\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::GetScanData(int32_t& _0, nn::nifm::detail::sf::AccessPointData *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::GetScanData\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::GetSsidListVersion(nn::nifm::SsidListVersion& _0) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::GetSsidListVersion\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::GetTelemetorySystemEventReadableHandle(IpcService*& _0) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::GetTelemetorySystemEventReadableHandle\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::GetTelemetryInfo(nn::nifm::TelemetryInfo *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::GetTelemetryInfo\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::IsAnyForegroundRequestAccepted(bool& _0) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::IsAnyForegroundRequestAccepted\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::IsAnyInternetRequestAccepted(nn::nifm::ClientId * _0, unsigned int _0_size, bool& _1) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::IsAnyInternetRequestAccepted\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::IsEthernetCommunicationEnabled(bool& _0) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::IsEthernetCommunicationEnabled\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::IsWirelessCommunicationEnabled(bool& _0) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::IsWirelessCommunicationEnabled\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::PutToSleep() {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::PutToSleep\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::RemoveNetworkProfile(nn::util::Uuid _0) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::RemoveNetworkProfile\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::SetDefaultIpSetting(nn::nifm::IpSettingData * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::SetDefaultIpSetting\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::SetEthernetCommunicationEnabled(bool _0) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::SetEthernetCommunicationEnabled\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::SetEthernetCommunicationEnabledForTest(bool _0) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::SetEthernetCommunicationEnabledForTest\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::SetExclusiveClient(nn::nifm::ClientId * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::SetExclusiveClient\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::SetNetworkProfile(nn::nifm::detail::sf::NetworkProfileData * _0, unsigned int _0_size, nn::util::Uuid& _1) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::SetNetworkProfile\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::SetWirelessCommunicationEnabled(bool _0) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::SetWirelessCommunicationEnabled\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::SetWirelessCommunicationEnabledForTest(bool _0) {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::SetWirelessCommunicationEnabledForTest\n");
	return 0;
}
uint32_t nn::nifm::detail::IGeneralService::WakeUp() {
	ns_print("Stub implementation for nn::nifm::detail::IGeneralService::WakeUp\n");
	return 0;
}
uint32_t nn::nifm::detail::INetworkProfile::Persist(nn::util::Uuid& _0) {
	ns_print("Stub implementation for nn::nifm::detail::INetworkProfile::Persist\n");
	return 0;
}
uint32_t nn::nifm::detail::INetworkProfile::PersistOld(nn::util::Uuid _0, nn::util::Uuid& _1) {
	ns_print("Stub implementation for nn::nifm::detail::INetworkProfile::PersistOld\n");
	return 0;
}
uint32_t nn::nifm::detail::INetworkProfile::Update(nn::nifm::detail::sf::NetworkProfileData * _0, unsigned int _0_size, nn::util::Uuid& _1) {
	ns_print("Stub implementation for nn::nifm::detail::INetworkProfile::Update\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::Cancel() {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::Cancel\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::GetAdditionalInfo(uint32_t& _0, nn::nifm::AdditionalInfo *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::GetAdditionalInfo\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::GetAppletInfo(uint32_t _0, uint32_t& _1, uint32_t& _2, uint32_t& _3, uint8_t *& _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::GetAppletInfo\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::GetRequestState(int32_t& _0) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::GetRequestState\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::GetRequirement(nn::nifm::Requirement& _0) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::GetRequirement\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::GetResult() {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::GetResult\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::GetRevision(uint32_t& _0) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::GetRevision\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::GetSystemEventReadableHandles(IpcService*& _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::GetSystemEventReadableHandles\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::RegisterSocketDescriptor(int32_t _0) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::RegisterSocketDescriptor\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::SetConnectionConfirmationOption(int8_t _0) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::SetConnectionConfirmationOption\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::SetGreedy(bool _0) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::SetGreedy\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::SetInstant(bool _0) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::SetInstant\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::SetKeptInSleep(bool _0) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::SetKeptInSleep\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::SetNetworkProfileId(nn::util::Uuid _0) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::SetNetworkProfileId\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::SetPersistent(bool _0) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::SetPersistent\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::SetPriority(uint8_t _0) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::SetPriority\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::SetRawPriority(uint8_t _0) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::SetRawPriority\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::SetRejectable(bool _0) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::SetRejectable\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::SetRequirement(nn::nifm::Requirement _0) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::SetRequirement\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::SetRequirementByRevision(uint32_t _0) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::SetRequirementByRevision\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::SetRequirementPreset(int32_t _0) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::SetRequirementPreset\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::SetSharable(bool _0) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::SetSharable\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::SetSustainable(bool _0, uint8_t _1) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::SetSustainable\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::Submit() {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::Submit\n");
	return 0;
}
uint32_t nn::nifm::detail::IRequest::UnregisterSocketDescriptor(int32_t _0) {
	ns_print("Stub implementation for nn::nifm::detail::IRequest::UnregisterSocketDescriptor\n");
	return 0;
}
uint32_t nn::nifm::detail::IScanRequest::GetResult() {
	ns_print("Stub implementation for nn::nifm::detail::IScanRequest::GetResult\n");
	return 0;
}
uint32_t nn::nifm::detail::IScanRequest::GetSystemEventReadableHandle(IpcService*& _0) {
	ns_print("Stub implementation for nn::nifm::detail::IScanRequest::GetSystemEventReadableHandle\n");
	return 0;
}
uint32_t nn::nifm::detail::IScanRequest::IsProcessing(bool& _0) {
	ns_print("Stub implementation for nn::nifm::detail::IScanRequest::IsProcessing\n");
	return 0;
}
uint32_t nn::nifm::detail::IScanRequest::Submit() {
	ns_print("Stub implementation for nn::nifm::detail::IScanRequest::Submit\n");
	return 0;
}
uint32_t nn::nifm::detail::IStaticService::CreateGeneralService(uint64_t _0, uint64_t _1, nn::nifm::detail::IGeneralService*& _2) {
	ns_print("Stub implementation for nn::nifm::detail::IStaticService::CreateGeneralService\n");
	return 0;
}
uint32_t nn::nifm::detail::IStaticService::CreateGeneralServiceOld(nn::nifm::detail::IGeneralService*& _0) {
	ns_print("Stub implementation for nn::nifm::detail::IStaticService::CreateGeneralServiceOld\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::nim::detail {
	class IAsyncData : public IpcService {
	public:
		IAsyncData() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IAsyncData::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IAsyncData::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::nim::detail::IAsyncData::Unknown2\n");
				resp->error_code = Unknown2(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IAsyncData::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IAsyncData::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nim::detail::IAsyncData", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2(uint64_t& _0);
		uint32_t Unknown3();
		uint32_t Unknown4();
	};
	class IAsyncProgressResult : public IpcService {
	public:
		IAsyncProgressResult() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IAsyncProgressResult::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IAsyncProgressResult::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::nim::detail::IAsyncProgressResult::Unknown2\n");
				resp->error_code = Unknown2(*resp->GetDataPointer<uint128_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nim::detail::IAsyncProgressResult", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2(uint128_t& _0);
	};
	class IAsyncResult : public IpcService {
	public:
		IAsyncResult() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IAsyncResult::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IAsyncResult::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nim::detail::IAsyncResult", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
	};
	class IAsyncValue : public IpcService {
	public:
		IAsyncValue() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::nim::detail::IAsyncValue::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nim::detail::IAsyncValue::Unknown1\n");
				resp->error_code = Unknown1(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IAsyncValue::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nim::detail::IAsyncValue", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t& _0);
		uint32_t Unknown1(uint8_t *& _0, unsigned int _0_size);
		uint32_t Unknown2();
	};
	class INetworkInstallManager : public IpcService {
	public:
		INetworkInstallManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown1: uint128_t = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = Unknown1(req->GetData<uint128_t>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown2\n");
				resp->error_code = Unknown2(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown5: uint128_t = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = Unknown5(req->GetData<uint128_t>(8));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown7: uint128_t = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = Unknown7(req->GetData<uint128_t>(8));
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown8\n");
				resp->error_code = Unknown8(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown11: uint128_t = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = Unknown11(req->GetData<uint128_t>(8));
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown12\n");
				resp->error_code = Unknown12();
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown14\n");
				resp->error_code = Unknown14();
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown15\n");
				resp->error_code = Unknown15();
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown16\n");
				resp->error_code = Unknown16();
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown17\n");
				resp->error_code = Unknown17();
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown18\n");
				resp->error_code = Unknown18();
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown19\n");
				resp->error_code = Unknown19();
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown20\n");
				resp->error_code = Unknown20();
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown21\n");
				resp->error_code = Unknown21();
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown22\n");
				resp->error_code = Unknown22(*resp->GetDataPointer<uint128_t *>(8));
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown23\n");
				resp->error_code = Unknown23();
				return 0;
			}
			case 24: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown24\n");
				resp->error_code = Unknown24();
				return 0;
			}
			case 25: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown25\n");
				resp->error_code = Unknown25();
				return 0;
			}
			case 26: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown26\n");
				resp->error_code = Unknown26();
				return 0;
			}
			case 27: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown27\n");
				resp->error_code = Unknown27();
				return 0;
			}
			case 28: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown28\n");
				resp->error_code = Unknown28();
				return 0;
			}
			case 29: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown29\n");
				resp->error_code = Unknown29();
				return 0;
			}
			case 30: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown30\n");
				resp->error_code = Unknown30();
				return 0;
			}
			case 31: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown31\n");
				resp->error_code = Unknown31();
				return 0;
			}
			case 32: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown32: uint128_t = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = Unknown32(req->GetData<uint128_t>(8));
				return 0;
			}
			case 33: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown33\n");
				resp->error_code = Unknown33();
				return 0;
			}
			case 34: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown34\n");
				resp->error_code = Unknown34();
				return 0;
			}
			case 35: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown35\n");
				resp->error_code = Unknown35();
				return 0;
			}
			case 36: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown36\n");
				resp->error_code = Unknown36();
				return 0;
			}
			case 37: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown37: uint128_t = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = Unknown37(req->GetData<uint128_t>(8));
				return 0;
			}
			case 38: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown38\n");
				resp->error_code = Unknown38();
				return 0;
			}
			case 39: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown39\n");
				resp->error_code = Unknown39();
				return 0;
			}
			case 40: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown40\n");
				resp->error_code = Unknown40(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 41: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown41: uint128_t = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = Unknown41(req->GetData<uint128_t>(8));
				return 0;
			}
			case 42: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown42\n");
				resp->error_code = Unknown42();
				return 0;
			}
			case 43: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown43\n");
				resp->error_code = Unknown43(*resp->GetDataPointer<uint128_t *>(8));
				return 0;
			}
			case 44: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown44\n");
				resp->error_code = Unknown44();
				return 0;
			}
			case 45: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown45\n");
				resp->error_code = Unknown45();
				return 0;
			}
			case 46: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::INetworkInstallManager::Unknown46\n");
				resp->error_code = Unknown46();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nim::detail::INetworkInstallManager", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1(uint128_t _0);
		uint32_t Unknown10();
		uint32_t Unknown11(uint128_t _0);
		uint32_t Unknown12();
		uint32_t Unknown14();
		uint32_t Unknown15();
		uint32_t Unknown16();
		uint32_t Unknown17();
		uint32_t Unknown18();
		uint32_t Unknown19();
		uint32_t Unknown2(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown20();
		uint32_t Unknown21();
		uint32_t Unknown22(uint128_t& _0);
		uint32_t Unknown23();
		uint32_t Unknown24();
		uint32_t Unknown25();
		uint32_t Unknown26();
		uint32_t Unknown27();
		uint32_t Unknown28();
		uint32_t Unknown29();
		uint32_t Unknown3();
		uint32_t Unknown30();
		uint32_t Unknown31();
		uint32_t Unknown32(uint128_t _0);
		uint32_t Unknown33();
		uint32_t Unknown34();
		uint32_t Unknown35();
		uint32_t Unknown36();
		uint32_t Unknown37(uint128_t _0);
		uint32_t Unknown38();
		uint32_t Unknown39();
		uint32_t Unknown4();
		uint32_t Unknown40(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown41(uint128_t _0);
		uint32_t Unknown42();
		uint32_t Unknown43(uint128_t& _0);
		uint32_t Unknown44();
		uint32_t Unknown45();
		uint32_t Unknown46();
		uint32_t Unknown5(uint128_t _0);
		uint32_t Unknown6();
		uint32_t Unknown7(uint128_t _0);
		uint32_t Unknown8(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown9();
	};
	class IShopServiceManager : public IpcService {
	public:
		IShopServiceManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IShopServiceManager::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IShopServiceManager::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IShopServiceManager::Unknown100\n");
				resp->error_code = Unknown100();
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IShopServiceManager::Unknown101\n");
				resp->error_code = Unknown101();
				return 0;
			}
			case 102: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IShopServiceManager::Unknown102\n");
				resp->error_code = Unknown102();
				return 0;
			}
			case 103: {
				resp->GenBuf(0, 0, 32);
				auto temp1 = resp->GetDataPointer<uint8_t *>(8);
				ns_print("IPC message to nn::nim::detail::IShopServiceManager::Unknown103\n");
				resp->error_code = Unknown103(temp1);
				return 0;
			}
			case 104: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IShopServiceManager::Unknown104\n");
				resp->error_code = Unknown104();
				return 0;
			}
			case 105: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IShopServiceManager::Unknown105\n");
				resp->error_code = Unknown105();
				return 0;
			}
			case 106: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IShopServiceManager::Unknown106\n");
				resp->error_code = Unknown106();
				return 0;
			}
			case 107: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::nim::detail::IShopServiceManager::Unknown107: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown107(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 200: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IShopServiceManager::Unknown200\n");
				resp->error_code = Unknown200();
				return 0;
			}
			case 300: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IShopServiceManager::Unknown300\n");
				resp->error_code = Unknown300();
				return 0;
			}
			case 301: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IShopServiceManager::Unknown301\n");
				resp->error_code = Unknown301();
				return 0;
			}
			case 302: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IShopServiceManager::Unknown302\n");
				resp->error_code = Unknown302();
				return 0;
			}
			case 303: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IShopServiceManager::Unknown303\n");
				resp->error_code = Unknown303();
				return 0;
			}
			case 400: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IShopServiceManager::Unknown400\n");
				resp->error_code = Unknown400();
				return 0;
			}
			case 500: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IShopServiceManager::Unknown500\n");
				resp->error_code = Unknown500();
				return 0;
			}
			case 501: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nim::detail::IShopServiceManager::Unknown501\n");
				resp->error_code = Unknown501();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nim::detail::IShopServiceManager", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown100();
		uint32_t Unknown101();
		uint32_t Unknown102();
		uint32_t Unknown103(uint8_t *& _0);
		uint32_t Unknown104();
		uint32_t Unknown105();
		uint32_t Unknown106();
		uint32_t Unknown107(uint64_t _0, uint8_t& _1);
		uint32_t Unknown200();
		uint32_t Unknown300();
		uint32_t Unknown301();
		uint32_t Unknown302();
		uint32_t Unknown303();
		uint32_t Unknown400();
		uint32_t Unknown500();
		uint32_t Unknown501();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::nim::detail::IAsyncData::Unknown0() {
	ns_print("Stub implementation for nn::nim::detail::IAsyncData::Unknown0\n");
	return 0;
}
uint32_t nn::nim::detail::IAsyncData::Unknown1() {
	ns_print("Stub implementation for nn::nim::detail::IAsyncData::Unknown1\n");
	return 0;
}
uint32_t nn::nim::detail::IAsyncData::Unknown2(uint64_t& _0) {
	ns_print("Stub implementation for nn::nim::detail::IAsyncData::Unknown2\n");
	return 0;
}
uint32_t nn::nim::detail::IAsyncData::Unknown3() {
	ns_print("Stub implementation for nn::nim::detail::IAsyncData::Unknown3\n");
	return 0;
}
uint32_t nn::nim::detail::IAsyncData::Unknown4() {
	ns_print("Stub implementation for nn::nim::detail::IAsyncData::Unknown4\n");
	return 0;
}
uint32_t nn::nim::detail::IAsyncProgressResult::Unknown0() {
	ns_print("Stub implementation for nn::nim::detail::IAsyncProgressResult::Unknown0\n");
	return 0;
}
uint32_t nn::nim::detail::IAsyncProgressResult::Unknown1() {
	ns_print("Stub implementation for nn::nim::detail::IAsyncProgressResult::Unknown1\n");
	return 0;
}
uint32_t nn::nim::detail::IAsyncProgressResult::Unknown2(uint128_t& _0) {
	ns_print("Stub implementation for nn::nim::detail::IAsyncProgressResult::Unknown2\n");
	return 0;
}
uint32_t nn::nim::detail::IAsyncResult::Unknown0() {
	ns_print("Stub implementation for nn::nim::detail::IAsyncResult::Unknown0\n");
	return 0;
}
uint32_t nn::nim::detail::IAsyncResult::Unknown1() {
	ns_print("Stub implementation for nn::nim::detail::IAsyncResult::Unknown1\n");
	return 0;
}
uint32_t nn::nim::detail::IAsyncValue::Unknown0(uint64_t& _0) {
	ns_print("Stub implementation for nn::nim::detail::IAsyncValue::Unknown0\n");
	return 0;
}
uint32_t nn::nim::detail::IAsyncValue::Unknown1(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::nim::detail::IAsyncValue::Unknown1\n");
	return 0;
}
uint32_t nn::nim::detail::IAsyncValue::Unknown2() {
	ns_print("Stub implementation for nn::nim::detail::IAsyncValue::Unknown2\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown0() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown0\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown1(uint128_t _0) {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown1\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown10() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown10\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown11(uint128_t _0) {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown11\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown12() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown12\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown14() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown14\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown15() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown15\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown16() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown16\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown17() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown17\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown18() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown18\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown19() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown19\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown2(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown2\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown20() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown20\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown21() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown21\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown22(uint128_t& _0) {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown22\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown23() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown23\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown24() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown24\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown25() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown25\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown26() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown26\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown27() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown27\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown28() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown28\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown29() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown29\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown3() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown3\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown30() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown30\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown31() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown31\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown32(uint128_t _0) {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown32\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown33() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown33\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown34() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown34\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown35() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown35\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown36() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown36\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown37(uint128_t _0) {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown37\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown38() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown38\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown39() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown39\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown4() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown4\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown40(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown40\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown41(uint128_t _0) {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown41\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown42() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown42\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown43(uint128_t& _0) {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown43\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown44() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown44\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown45() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown45\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown46() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown46\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown5(uint128_t _0) {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown5\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown6() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown6\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown7(uint128_t _0) {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown7\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown8(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown8\n");
	return 0;
}
uint32_t nn::nim::detail::INetworkInstallManager::Unknown9() {
	ns_print("Stub implementation for nn::nim::detail::INetworkInstallManager::Unknown9\n");
	return 0;
}
uint32_t nn::nim::detail::IShopServiceManager::Unknown0() {
	ns_print("Stub implementation for nn::nim::detail::IShopServiceManager::Unknown0\n");
	return 0;
}
uint32_t nn::nim::detail::IShopServiceManager::Unknown1() {
	ns_print("Stub implementation for nn::nim::detail::IShopServiceManager::Unknown1\n");
	return 0;
}
uint32_t nn::nim::detail::IShopServiceManager::Unknown100() {
	ns_print("Stub implementation for nn::nim::detail::IShopServiceManager::Unknown100\n");
	return 0;
}
uint32_t nn::nim::detail::IShopServiceManager::Unknown101() {
	ns_print("Stub implementation for nn::nim::detail::IShopServiceManager::Unknown101\n");
	return 0;
}
uint32_t nn::nim::detail::IShopServiceManager::Unknown102() {
	ns_print("Stub implementation for nn::nim::detail::IShopServiceManager::Unknown102\n");
	return 0;
}
uint32_t nn::nim::detail::IShopServiceManager::Unknown103(uint8_t *& _0) {
	ns_print("Stub implementation for nn::nim::detail::IShopServiceManager::Unknown103\n");
	return 0;
}
uint32_t nn::nim::detail::IShopServiceManager::Unknown104() {
	ns_print("Stub implementation for nn::nim::detail::IShopServiceManager::Unknown104\n");
	return 0;
}
uint32_t nn::nim::detail::IShopServiceManager::Unknown105() {
	ns_print("Stub implementation for nn::nim::detail::IShopServiceManager::Unknown105\n");
	return 0;
}
uint32_t nn::nim::detail::IShopServiceManager::Unknown106() {
	ns_print("Stub implementation for nn::nim::detail::IShopServiceManager::Unknown106\n");
	return 0;
}
uint32_t nn::nim::detail::IShopServiceManager::Unknown107(uint64_t _0, uint8_t& _1) {
	ns_print("Stub implementation for nn::nim::detail::IShopServiceManager::Unknown107\n");
	return 0;
}
uint32_t nn::nim::detail::IShopServiceManager::Unknown200() {
	ns_print("Stub implementation for nn::nim::detail::IShopServiceManager::Unknown200\n");
	return 0;
}
uint32_t nn::nim::detail::IShopServiceManager::Unknown300() {
	ns_print("Stub implementation for nn::nim::detail::IShopServiceManager::Unknown300\n");
	return 0;
}
uint32_t nn::nim::detail::IShopServiceManager::Unknown301() {
	ns_print("Stub implementation for nn::nim::detail::IShopServiceManager::Unknown301\n");
	return 0;
}
uint32_t nn::nim::detail::IShopServiceManager::Unknown302() {
	ns_print("Stub implementation for nn::nim::detail::IShopServiceManager::Unknown302\n");
	return 0;
}
uint32_t nn::nim::detail::IShopServiceManager::Unknown303() {
	ns_print("Stub implementation for nn::nim::detail::IShopServiceManager::Unknown303\n");
	return 0;
}
uint32_t nn::nim::detail::IShopServiceManager::Unknown400() {
	ns_print("Stub implementation for nn::nim::detail::IShopServiceManager::Unknown400\n");
	return 0;
}
uint32_t nn::nim::detail::IShopServiceManager::Unknown500() {
	ns_print("Stub implementation for nn::nim::detail::IShopServiceManager::Unknown500\n");
	return 0;
}
uint32_t nn::nim::detail::IShopServiceManager::Unknown501() {
	ns_print("Stub implementation for nn::nim::detail::IShopServiceManager::Unknown501\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::npns {
	class INpnsSystem : public IpcService {
	public:
		INpnsSystem() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown2: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown2(req->GetData<uint64_t>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown5\n");
				resp->error_code = Unknown5(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown7\n");
				resp->error_code = Unknown7(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown11\n");
				resp->error_code = Unknown11();
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown12\n");
				resp->error_code = Unknown12();
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown13\n");
				resp->error_code = Unknown13();
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown21\n");
				resp->error_code = Unknown21();
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown22\n");
				resp->error_code = Unknown22();
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown23\n");
				resp->error_code = Unknown23();
				return 0;
			}
			case 24: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown24\n");
				resp->error_code = Unknown24();
				return 0;
			}
			case 25: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown25\n");
				resp->error_code = Unknown25();
				return 0;
			}
			case 31: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown31\n");
				resp->error_code = Unknown31();
				return 0;
			}
			case 32: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown32\n");
				resp->error_code = Unknown32();
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown101\n");
				resp->error_code = Unknown101();
				return 0;
			}
			case 102: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown102\n");
				resp->error_code = Unknown102();
				return 0;
			}
			case 103: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown103\n");
				resp->error_code = Unknown103(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 104: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown104\n");
				resp->error_code = Unknown104(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 105: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown105\n");
				resp->error_code = Unknown105(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 111: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown111\n");
				resp->error_code = Unknown111();
				return 0;
			}
			case 112: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown112\n");
				resp->error_code = Unknown112();
				return 0;
			}
			case 113: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown113\n");
				resp->error_code = Unknown113();
				return 0;
			}
			case 114: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown114\n");
				resp->error_code = Unknown114();
				return 0;
			}
			case 115: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown115\n");
				resp->error_code = Unknown115();
				return 0;
			}
			case 201: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown201\n");
				resp->error_code = Unknown201();
				return 0;
			}
			case 202: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsSystem::Unknown202: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown202(req->GetData<uint32_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::npns::INpnsSystem", req->cmd_id);
			}
		}
		uint32_t Unknown1();
		uint32_t Unknown101();
		uint32_t Unknown102();
		uint32_t Unknown103(uint32_t& _0);
		uint32_t Unknown104(uint8_t *& _0, unsigned int _0_size);
		uint32_t Unknown105(IpcService*& _0);
		uint32_t Unknown11();
		uint32_t Unknown111();
		uint32_t Unknown112();
		uint32_t Unknown113();
		uint32_t Unknown114();
		uint32_t Unknown115();
		uint32_t Unknown12();
		uint32_t Unknown13();
		uint32_t Unknown2(uint64_t _0);
		uint32_t Unknown201();
		uint32_t Unknown202(uint32_t _0);
		uint32_t Unknown21();
		uint32_t Unknown22();
		uint32_t Unknown23();
		uint32_t Unknown24();
		uint32_t Unknown25();
		uint32_t Unknown3();
		uint32_t Unknown31();
		uint32_t Unknown32();
		uint32_t Unknown4();
		uint32_t Unknown5(IpcService*& _0);
		uint32_t Unknown6();
		uint32_t Unknown7(IpcService*& _0);
	};
	class INpnsUser : public IpcService {
	public:
		INpnsUser() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsUser::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsUser::Unknown2: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown2(req->GetData<uint64_t>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsUser::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsUser::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::npns::INpnsUser::Unknown5\n");
				resp->error_code = Unknown5(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::npns::INpnsUser::Unknown7\n");
				resp->error_code = Unknown7(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsUser::Unknown21\n");
				resp->error_code = Unknown21();
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsUser::Unknown23\n");
				resp->error_code = Unknown23();
				return 0;
			}
			case 25: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsUser::Unknown25\n");
				resp->error_code = Unknown25();
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsUser::Unknown101\n");
				resp->error_code = Unknown101();
				return 0;
			}
			case 102: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsUser::Unknown102\n");
				resp->error_code = Unknown102();
				return 0;
			}
			case 103: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::npns::INpnsUser::Unknown103\n");
				resp->error_code = Unknown103(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 104: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::npns::INpnsUser::Unknown104\n");
				resp->error_code = Unknown104(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 111: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::npns::INpnsUser::Unknown111\n");
				resp->error_code = Unknown111();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::npns::INpnsUser", req->cmd_id);
			}
		}
		uint32_t Unknown1();
		uint32_t Unknown101();
		uint32_t Unknown102();
		uint32_t Unknown103(uint32_t& _0);
		uint32_t Unknown104(uint8_t *& _0, unsigned int _0_size);
		uint32_t Unknown111();
		uint32_t Unknown2(uint64_t _0);
		uint32_t Unknown21();
		uint32_t Unknown23();
		uint32_t Unknown25();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5(IpcService*& _0);
		uint32_t Unknown7(IpcService*& _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::npns::INpnsSystem::Unknown1() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown1\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown101() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown101\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown102() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown102\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown103(uint32_t& _0) {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown103\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown104(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown104\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown105(IpcService*& _0) {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown105\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown11() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown11\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown111() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown111\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown112() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown112\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown113() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown113\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown114() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown114\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown115() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown115\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown12() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown12\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown13() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown13\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown2(uint64_t _0) {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown2\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown201() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown201\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown202(uint32_t _0) {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown202\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown21() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown21\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown22() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown22\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown23() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown23\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown24() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown24\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown25() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown25\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown3() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown3\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown31() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown31\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown32() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown32\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown4() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown4\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown5(IpcService*& _0) {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown5\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown6() {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown6\n");
	return 0;
}
uint32_t nn::npns::INpnsSystem::Unknown7(IpcService*& _0) {
	ns_print("Stub implementation for nn::npns::INpnsSystem::Unknown7\n");
	return 0;
}
uint32_t nn::npns::INpnsUser::Unknown1() {
	ns_print("Stub implementation for nn::npns::INpnsUser::Unknown1\n");
	return 0;
}
uint32_t nn::npns::INpnsUser::Unknown101() {
	ns_print("Stub implementation for nn::npns::INpnsUser::Unknown101\n");
	return 0;
}
uint32_t nn::npns::INpnsUser::Unknown102() {
	ns_print("Stub implementation for nn::npns::INpnsUser::Unknown102\n");
	return 0;
}
uint32_t nn::npns::INpnsUser::Unknown103(uint32_t& _0) {
	ns_print("Stub implementation for nn::npns::INpnsUser::Unknown103\n");
	return 0;
}
uint32_t nn::npns::INpnsUser::Unknown104(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::npns::INpnsUser::Unknown104\n");
	return 0;
}
uint32_t nn::npns::INpnsUser::Unknown111() {
	ns_print("Stub implementation for nn::npns::INpnsUser::Unknown111\n");
	return 0;
}
uint32_t nn::npns::INpnsUser::Unknown2(uint64_t _0) {
	ns_print("Stub implementation for nn::npns::INpnsUser::Unknown2\n");
	return 0;
}
uint32_t nn::npns::INpnsUser::Unknown21() {
	ns_print("Stub implementation for nn::npns::INpnsUser::Unknown21\n");
	return 0;
}
uint32_t nn::npns::INpnsUser::Unknown23() {
	ns_print("Stub implementation for nn::npns::INpnsUser::Unknown23\n");
	return 0;
}
uint32_t nn::npns::INpnsUser::Unknown25() {
	ns_print("Stub implementation for nn::npns::INpnsUser::Unknown25\n");
	return 0;
}
uint32_t nn::npns::INpnsUser::Unknown3() {
	ns_print("Stub implementation for nn::npns::INpnsUser::Unknown3\n");
	return 0;
}
uint32_t nn::npns::INpnsUser::Unknown4() {
	ns_print("Stub implementation for nn::npns::INpnsUser::Unknown4\n");
	return 0;
}
uint32_t nn::npns::INpnsUser::Unknown5(IpcService*& _0) {
	ns_print("Stub implementation for nn::npns::INpnsUser::Unknown5\n");
	return 0;
}
uint32_t nn::npns::INpnsUser::Unknown7(IpcService*& _0) {
	ns_print("Stub implementation for nn::npns::INpnsUser::Unknown7\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::ns::detail {
	class IAccountProxyInterface : public IpcService {
	public:
		IAccountProxyInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IAccountProxyInterface::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ns::detail::IAccountProxyInterface", req->cmd_id);
			}
		}
		uint32_t Unknown0();
	};
	class IApplicationManagerInterface : public IpcService {
	public:
		IApplicationManagerInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1\n");
				resp->error_code = Unknown1(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown2\n");
				resp->error_code = Unknown2(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown4: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown4(req->GetData<uint64_t>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown5: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown5(req->GetData<uint64_t>(8));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown6\n");
				resp->error_code = Unknown6(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown9: uint8_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint8_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Unknown9(req->GetData<uint8_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown11\n");
				resp->error_code = Unknown11();
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown16\n");
				resp->error_code = Unknown16();
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown17\n");
				resp->error_code = Unknown17();
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown19: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown19(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown21\n");
				resp->error_code = Unknown21();
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown22: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown22(req->GetData<uint64_t>(8));
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown23: uint8_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint8_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Unknown23(req->GetData<uint8_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 26: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown26\n");
				resp->error_code = Unknown26();
				return 0;
			}
			case 27: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown27: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown27(req->GetData<uint64_t>(8));
				return 0;
			}
			case 30: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown30\n");
				resp->error_code = Unknown30();
				return 0;
			}
			case 31: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown31\n");
				resp->error_code = Unknown31();
				return 0;
			}
			case 32: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown32: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown32(req->GetData<uint64_t>(8));
				return 0;
			}
			case 33: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown33: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown33(req->GetData<uint64_t>(8));
				return 0;
			}
			case 35: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown35: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown35(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 36: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown36: uint32_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Unknown36(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 37: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown37\n");
				resp->error_code = Unknown37(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 38: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown38: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown38(req->GetData<uint64_t>(8));
				return 0;
			}
			case 39: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown39: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown39(req->GetData<uint64_t>(8));
				return 0;
			}
			case 40: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown40\n");
				resp->error_code = Unknown40();
				return 0;
			}
			case 41: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown41\n");
				resp->error_code = Unknown41();
				return 0;
			}
			case 42: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown42\n");
				resp->error_code = Unknown42();
				return 0;
			}
			case 43: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown43\n");
				resp->error_code = Unknown43();
				return 0;
			}
			case 44: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown44\n");
				resp->error_code = Unknown44(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 45: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown45\n");
				resp->error_code = Unknown45(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 46: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown46\n");
				resp->error_code = Unknown46(*resp->GetDataPointer<uint128_t *>(8));
				return 0;
			}
			case 47: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown47\n");
				resp->error_code = Unknown47();
				return 0;
			}
			case 48: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown48\n");
				resp->error_code = Unknown48();
				return 0;
			}
			case 49: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown49\n");
				resp->error_code = Unknown49(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 52: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown52\n");
				resp->error_code = Unknown52(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 53: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown53: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown53(req->GetData<uint64_t>(8));
				return 0;
			}
			case 54: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown54: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown54(req->GetData<uint64_t>(8));
				return 0;
			}
			case 55: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown55: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown55(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 56: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown56: uint32_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Unknown56(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 57: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown57: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown57(req->GetData<uint64_t>(8));
				return 0;
			}
			case 58: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown58\n");
				resp->error_code = Unknown58();
				return 0;
			}
			case 59: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown59\n");
				resp->error_code = Unknown59();
				return 0;
			}
			case 60: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown60\n");
				resp->error_code = Unknown60();
				return 0;
			}
			case 61: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown61\n");
				resp->error_code = Unknown61(*resp->GetDataPointer<uint128_t *>(8));
				return 0;
			}
			case 62: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown62\n");
				resp->error_code = Unknown62(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 63: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown63: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown63(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 64: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown64: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown64(req->GetData<uint64_t>(8));
				return 0;
			}
			case 65: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown65\n");
				resp->error_code = Unknown65(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 66: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown66\n");
				resp->error_code = Unknown66(*resp->GetDataPointer<uint128_t *>(8));
				return 0;
			}
			case 67: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown67: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown67(req->GetData<uint64_t>(8));
				return 0;
			}
			case 68: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown68: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown68(req->GetData<uint64_t>(8));
				return 0;
			}
			case 69: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown69\n");
				resp->error_code = Unknown69();
				return 0;
			}
			case 70: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown70\n");
				resp->error_code = Unknown70();
				return 0;
			}
			case 71: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown71\n");
				resp->error_code = Unknown71();
				return 0;
			}
			case 80: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown80\n");
				resp->error_code = Unknown80();
				return 0;
			}
			case 81: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown81\n");
				resp->error_code = Unknown81();
				return 0;
			}
			case 82: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown82\n");
				resp->error_code = Unknown82();
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown100\n");
				resp->error_code = Unknown100();
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown101\n");
				resp->error_code = Unknown101();
				return 0;
			}
			case 102: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown102\n");
				resp->error_code = Unknown102();
				return 0;
			}
			case 200: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown200\n");
				resp->error_code = Unknown200();
				return 0;
			}
			case 201: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown201\n");
				resp->error_code = Unknown201();
				return 0;
			}
			case 210: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown210\n");
				resp->error_code = Unknown210();
				return 0;
			}
			case 220: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown220\n");
				resp->error_code = Unknown220();
				return 0;
			}
			case 300: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown300\n");
				resp->error_code = Unknown300(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 301: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown301\n");
				resp->error_code = Unknown301(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 302: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown302: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown302(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 303: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown303: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown303(req->GetData<uint64_t>(8));
				return 0;
			}
			case 304: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown304\n");
				resp->error_code = Unknown304(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 305: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown305: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown305(req->GetData<uint64_t>(8));
				return 0;
			}
			case 306: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown306\n");
				resp->error_code = Unknown306(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 307: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown307: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown307(req->GetData<uint64_t>(8));
				return 0;
			}
			case 400: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown400\n");
				resp->error_code = Unknown400();
				return 0;
			}
			case 401: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown401\n");
				resp->error_code = Unknown401();
				return 0;
			}
			case 402: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown402\n");
				resp->error_code = Unknown402();
				return 0;
			}
			case 403: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown403\n");
				resp->error_code = Unknown403(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 404: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown404: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown404(req->GetData<uint64_t>(8));
				return 0;
			}
			case 405: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown405\n");
				resp->error_code = Unknown405(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 502: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown502\n");
				resp->error_code = Unknown502();
				return 0;
			}
			case 503: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown503\n");
				resp->error_code = Unknown503();
				return 0;
			}
			case 504: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown504\n");
				resp->error_code = Unknown504();
				return 0;
			}
			case 505: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown505\n");
				resp->error_code = Unknown505(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 506: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown506\n");
				resp->error_code = Unknown506(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 507: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown507\n");
				resp->error_code = Unknown507();
				return 0;
			}
			case 508: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown508\n");
				resp->error_code = Unknown508();
				return 0;
			}
			case 600: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown600: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown600(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 601: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown601\n");
				resp->error_code = Unknown601();
				return 0;
			}
			case 602: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown602\n");
				resp->error_code = Unknown602();
				return 0;
			}
			case 603: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown603\n");
				resp->error_code = Unknown603();
				return 0;
			}
			case 604: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown604: uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Unknown604(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 605: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown605\n");
				resp->error_code = Unknown605();
				return 0;
			}
			case 606: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown606\n");
				resp->error_code = Unknown606();
				return 0;
			}
			case 700: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown700: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown700(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 701: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown701\n");
				resp->error_code = Unknown701();
				return 0;
			}
			case 702: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown702\n");
				resp->error_code = Unknown702();
				return 0;
			}
			case 703: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown703\n");
				resp->error_code = Unknown703();
				return 0;
			}
			case 704: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown704\n");
				resp->error_code = Unknown704(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 705: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown705\n");
				resp->error_code = Unknown705();
				return 0;
			}
			case 800: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown800\n");
				resp->error_code = Unknown800();
				return 0;
			}
			case 801: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown801\n");
				resp->error_code = Unknown801(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 802: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown802\n");
				resp->error_code = Unknown802();
				return 0;
			}
			case 900: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown900\n");
				resp->error_code = Unknown900();
				return 0;
			}
			case 901: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown901\n");
				resp->error_code = Unknown901();
				return 0;
			}
			case 902: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown902: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown902(req->GetData<uint64_t>(8));
				return 0;
			}
			case 903: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown903: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown903(req->GetData<uint64_t>(8));
				return 0;
			}
			case 904: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown904: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown904(req->GetData<uint64_t>(8));
				return 0;
			}
			case 905: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown905: uint32_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Unknown905(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 906: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown906\n");
				resp->error_code = Unknown906();
				return 0;
			}
			case 907: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown907: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown907(req->GetData<uint64_t>(8));
				return 0;
			}
			case 908: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown908\n");
				resp->error_code = Unknown908();
				return 0;
			}
			case 909: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown909: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown909(req->GetData<uint64_t>(8));
				return 0;
			}
			case 1000: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1000\n");
				resp->error_code = Unknown1000();
				return 0;
			}
			case 1001: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1001\n");
				resp->error_code = Unknown1001();
				return 0;
			}
			case 1002: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1002\n");
				resp->error_code = Unknown1002();
				return 0;
			}
			case 1200: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1200\n");
				resp->error_code = Unknown1200(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 1300: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1300: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown1300(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 1301: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1301\n");
				resp->error_code = Unknown1301();
				return 0;
			}
			case 1302: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1302: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown1302(req->GetData<uint64_t>(8));
				return 0;
			}
			case 1303: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1303: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown1303(req->GetData<uint64_t>(8));
				return 0;
			}
			case 1304: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1304\n");
				resp->error_code = Unknown1304();
				return 0;
			}
			case 1400: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1400\n");
				resp->error_code = Unknown1400();
				return 0;
			}
			case 1500: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1500\n");
				resp->error_code = Unknown1500();
				return 0;
			}
			case 1501: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1501\n");
				resp->error_code = Unknown1501(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 1502: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1502\n");
				resp->error_code = Unknown1502();
				return 0;
			}
			case 1504: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1504\n");
				resp->error_code = Unknown1504();
				return 0;
			}
			case 1505: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1505\n");
				resp->error_code = Unknown1505();
				return 0;
			}
			case 1600: {
				resp->GenBuf(0, 0, 32);
				auto temp1 = resp->GetDataPointer<uint8_t *>(8);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1600\n");
				resp->error_code = Unknown1600(temp1);
				return 0;
			}
			case 1601: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1601\n");
				resp->error_code = Unknown1601();
				return 0;
			}
			case 1700: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1700\n");
				resp->error_code = Unknown1700();
				return 0;
			}
			case 1701: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1701\n");
				resp->error_code = Unknown1701();
				return 0;
			}
			case 1702: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1702: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown1702(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 1800: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1800\n");
				resp->error_code = Unknown1800(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 1801: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1801\n");
				resp->error_code = Unknown1801(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 1802: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1802\n");
				resp->error_code = Unknown1802(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 1803: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1803\n");
				resp->error_code = Unknown1803(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 1900: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::ns::detail::IApplicationManagerInterface::Unknown1900: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown1900(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ns::detail::IApplicationManagerInterface", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1(uint64_t& _0);
		uint32_t Unknown100();
		uint32_t Unknown1000();
		uint32_t Unknown1001();
		uint32_t Unknown1002();
		uint32_t Unknown101();
		uint32_t Unknown102();
		uint32_t Unknown11();
		uint32_t Unknown1200(uint8_t& _0);
		uint32_t Unknown1300(uint64_t _0, uint8_t& _1);
		uint32_t Unknown1301();
		uint32_t Unknown1302(uint64_t _0);
		uint32_t Unknown1303(uint64_t _0);
		uint32_t Unknown1304();
		uint32_t Unknown1400();
		uint32_t Unknown1500();
		uint32_t Unknown1501(uint8_t& _0);
		uint32_t Unknown1502();
		uint32_t Unknown1504();
		uint32_t Unknown1505();
		uint32_t Unknown16();
		uint32_t Unknown1600(uint8_t *& _0);
		uint32_t Unknown1601();
		uint32_t Unknown17();
		uint32_t Unknown1700();
		uint32_t Unknown1701();
		uint32_t Unknown1702(uint64_t _0, uint8_t& _1);
		uint32_t Unknown1800(uint8_t& _0);
		uint32_t Unknown1801(uint64_t& _0);
		uint32_t Unknown1802(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown1803(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown19(uint64_t _0, uint64_t& _1);
		uint32_t Unknown1900(uint32_t _0, uint8_t& _1);
		uint32_t Unknown2(IpcService*& _0);
		uint32_t Unknown200();
		uint32_t Unknown201();
		uint32_t Unknown21();
		uint32_t Unknown210();
		uint32_t Unknown22(uint64_t _0);
		uint32_t Unknown220();
		uint32_t Unknown23(uint8_t _0, uint64_t _1);
		uint32_t Unknown26();
		uint32_t Unknown27(uint64_t _0);
		uint32_t Unknown3();
		uint32_t Unknown30();
		uint32_t Unknown300(IpcService*& _0);
		uint32_t Unknown301(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown302(uint64_t _0, uint64_t& _1);
		uint32_t Unknown303(uint64_t _0);
		uint32_t Unknown304(uint64_t& _0);
		uint32_t Unknown305(uint64_t _0);
		uint32_t Unknown306(uint64_t& _0);
		uint32_t Unknown307(uint64_t _0);
		uint32_t Unknown31();
		uint32_t Unknown32(uint64_t _0);
		uint32_t Unknown33(uint64_t _0);
		uint32_t Unknown35(uint8_t * _0, unsigned int _0_size);
		uint32_t Unknown36(uint32_t _0, uint64_t _1);
		uint32_t Unknown37(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown38(uint64_t _0);
		uint32_t Unknown39(uint64_t _0);
		uint32_t Unknown4(uint64_t _0);
		uint32_t Unknown40();
		uint32_t Unknown400();
		uint32_t Unknown401();
		uint32_t Unknown402();
		uint32_t Unknown403(uint32_t& _0);
		uint32_t Unknown404(uint64_t _0);
		uint32_t Unknown405(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown41();
		uint32_t Unknown42();
		uint32_t Unknown43();
		uint32_t Unknown44(IpcService*& _0);
		uint32_t Unknown45(IpcService*& _0);
		uint32_t Unknown46(uint128_t& _0);
		uint32_t Unknown47();
		uint32_t Unknown48();
		uint32_t Unknown49(IpcService*& _0);
		uint32_t Unknown5(uint64_t _0);
		uint32_t Unknown502();
		uint32_t Unknown503();
		uint32_t Unknown504();
		uint32_t Unknown505(IpcService*& _0);
		uint32_t Unknown506(uint8_t& _0);
		uint32_t Unknown507();
		uint32_t Unknown508();
		uint32_t Unknown52(IpcService*& _0);
		uint32_t Unknown53(uint64_t _0);
		uint32_t Unknown54(uint64_t _0);
		uint32_t Unknown55(uint32_t _0, uint8_t& _1);
		uint32_t Unknown56(uint32_t _0, uint64_t _1);
		uint32_t Unknown57(uint64_t _0);
		uint32_t Unknown58();
		uint32_t Unknown59();
		uint32_t Unknown6(uint8_t& _0);
		uint32_t Unknown60();
		uint32_t Unknown600(uint64_t _0, uint32_t& _1);
		uint32_t Unknown601();
		uint32_t Unknown602();
		uint32_t Unknown603();
		uint32_t Unknown604(uint64_t _0, uint64_t _1);
		uint32_t Unknown605();
		uint32_t Unknown606();
		uint32_t Unknown61(uint128_t& _0);
		uint32_t Unknown62(IUnknown*& _0);
		uint32_t Unknown63(uint64_t _0, uint8_t& _1);
		uint32_t Unknown64(uint64_t _0);
		uint32_t Unknown65(IUnknown*& _0);
		uint32_t Unknown66(uint128_t& _0);
		uint32_t Unknown67(uint64_t _0);
		uint32_t Unknown68(uint64_t _0);
		uint32_t Unknown69();
		uint32_t Unknown7();
		uint32_t Unknown70();
		uint32_t Unknown700(uint8_t * _0, unsigned int _0_size);
		uint32_t Unknown701();
		uint32_t Unknown702();
		uint32_t Unknown703();
		uint32_t Unknown704(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown705();
		uint32_t Unknown71();
		uint32_t Unknown8();
		uint32_t Unknown80();
		uint32_t Unknown800();
		uint32_t Unknown801(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown802();
		uint32_t Unknown81();
		uint32_t Unknown82();
		uint32_t Unknown9(uint8_t _0, uint64_t _1);
		uint32_t Unknown900();
		uint32_t Unknown901();
		uint32_t Unknown902(uint64_t _0);
		uint32_t Unknown903(uint64_t _0);
		uint32_t Unknown904(uint64_t _0);
		uint32_t Unknown905(uint32_t _0, uint64_t _1);
		uint32_t Unknown906();
		uint32_t Unknown907(uint64_t _0);
		uint32_t Unknown908();
		uint32_t Unknown909(uint64_t _0);
	};
	class IAsyncResult : public IpcService {
	public:
		IAsyncResult() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IAsyncResult::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IAsyncResult::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ns::detail::IAsyncResult", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
	};
	class IAsyncValue : public IpcService {
	public:
		IAsyncValue() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::ns::detail::IAsyncValue::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ns::detail::IAsyncValue::Unknown1\n");
				resp->error_code = Unknown1(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IAsyncValue::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ns::detail::IAsyncValue", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t& _0);
		uint32_t Unknown1(uint8_t *& _0, unsigned int _0_size);
		uint32_t Unknown2();
	};
	class IContentManagementInterface : public IpcService {
	public:
		IContentManagementInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IContentManagementInterface::Unknown11\n");
				resp->error_code = Unknown11();
				return 0;
			}
			case 43: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IContentManagementInterface::Unknown43\n");
				resp->error_code = Unknown43();
				return 0;
			}
			case 47: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IContentManagementInterface::Unknown47\n");
				resp->error_code = Unknown47();
				return 0;
			}
			case 48: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IContentManagementInterface::Unknown48\n");
				resp->error_code = Unknown48();
				return 0;
			}
			case 600: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::ns::detail::IContentManagementInterface::Unknown600: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown600(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 601: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IContentManagementInterface::Unknown601\n");
				resp->error_code = Unknown601();
				return 0;
			}
			case 605: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IContentManagementInterface::Unknown605\n");
				resp->error_code = Unknown605();
				return 0;
			}
			case 607: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::ns::detail::IContentManagementInterface::Unknown607\n");
				resp->error_code = Unknown607(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ns::detail::IContentManagementInterface", req->cmd_id);
			}
		}
		uint32_t Unknown11();
		uint32_t Unknown43();
		uint32_t Unknown47();
		uint32_t Unknown48();
		uint32_t Unknown600(uint64_t _0, uint32_t& _1);
		uint32_t Unknown601();
		uint32_t Unknown605();
		uint32_t Unknown607(uint8_t& _0);
	};
	class IDevelopInterface : public IpcService {
	public:
		IDevelopInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IDevelopInterface::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IDevelopInterface::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IDevelopInterface::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IDevelopInterface::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IDevelopInterface::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IDevelopInterface::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IDevelopInterface::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IDevelopInterface::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IDevelopInterface::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ns::detail::IDevelopInterface", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6();
		uint32_t Unknown7();
		uint32_t Unknown8();
		uint32_t Unknown9();
	};
	class IDocumentInterface : public IpcService {
	public:
		IDocumentInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 21: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IDocumentInterface::Unknown21\n");
				resp->error_code = Unknown21();
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IDocumentInterface::Unknown23: uint8_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint8_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Unknown23(req->GetData<uint8_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ns::detail::IDocumentInterface", req->cmd_id);
			}
		}
		uint32_t Unknown21();
		uint32_t Unknown23(uint8_t _0, uint64_t _1);
	};
	class IDownloadTaskInterface : public IpcService {
	public:
		IDownloadTaskInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 701: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IDownloadTaskInterface::Unknown701\n");
				resp->error_code = Unknown701();
				return 0;
			}
			case 702: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IDownloadTaskInterface::Unknown702\n");
				resp->error_code = Unknown702();
				return 0;
			}
			case 703: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IDownloadTaskInterface::Unknown703\n");
				resp->error_code = Unknown703();
				return 0;
			}
			case 704: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ns::detail::IDownloadTaskInterface::Unknown704\n");
				resp->error_code = Unknown704(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 705: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IDownloadTaskInterface::Unknown705\n");
				resp->error_code = Unknown705();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ns::detail::IDownloadTaskInterface", req->cmd_id);
			}
		}
		uint32_t Unknown701();
		uint32_t Unknown702();
		uint32_t Unknown703();
		uint32_t Unknown704(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown705();
	};
	class IFactoryResetInterface : public IpcService {
	public:
		IFactoryResetInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 100: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IFactoryResetInterface::Unknown100\n");
				resp->error_code = Unknown100();
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IFactoryResetInterface::Unknown101\n");
				resp->error_code = Unknown101();
				return 0;
			}
			case 102: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IFactoryResetInterface::Unknown102\n");
				resp->error_code = Unknown102();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ns::detail::IFactoryResetInterface", req->cmd_id);
			}
		}
		uint32_t Unknown100();
		uint32_t Unknown101();
		uint32_t Unknown102();
	};
	class IProgressAsyncResult : public IpcService {
	public:
		IProgressAsyncResult() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IProgressAsyncResult::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IProgressAsyncResult::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ns::detail::IProgressAsyncResult::Unknown2\n");
				resp->error_code = Unknown2(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IProgressAsyncResult::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ns::detail::IProgressAsyncResult", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2(uint8_t *& _0, unsigned int _0_size);
		uint32_t Unknown3();
	};
	class IProgressMonitorForDeleteUserSaveDataAll : public IpcService {
	public:
		IProgressMonitorForDeleteUserSaveDataAll() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::ns::detail::IProgressMonitorForDeleteUserSaveDataAll::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::ns::detail::IProgressMonitorForDeleteUserSaveDataAll::Unknown1\n");
				resp->error_code = Unknown1(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::IProgressMonitorForDeleteUserSaveDataAll::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 40);
				auto temp1 = resp->GetDataPointer<uint8_t *>(8);
				ns_print("IPC message to nn::ns::detail::IProgressMonitorForDeleteUserSaveDataAll::Unknown10\n");
				resp->error_code = Unknown10(temp1);
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ns::detail::IProgressMonitorForDeleteUserSaveDataAll", req->cmd_id);
			}
		}
		uint32_t Unknown0(IpcService*& _0);
		uint32_t Unknown1(uint8_t& _0);
		uint32_t Unknown10(uint8_t *& _0);
		uint32_t Unknown2();
	};
	class IServiceGetterInterface : public IpcService {
	public:
		IServiceGetterInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 7994: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::ns::detail::IServiceGetterInterface::Unknown7994\n");
				resp->error_code = Unknown7994(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 7995: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::ns::detail::IServiceGetterInterface::Unknown7995\n");
				resp->error_code = Unknown7995(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 7996: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::ns::detail::IServiceGetterInterface::Unknown7996\n");
				resp->error_code = Unknown7996(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 7997: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::ns::detail::IServiceGetterInterface::Unknown7997\n");
				resp->error_code = Unknown7997(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 7998: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::ns::detail::IServiceGetterInterface::Unknown7998\n");
				resp->error_code = Unknown7998(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 7999: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::ns::detail::IServiceGetterInterface::Unknown7999\n");
				resp->error_code = Unknown7999(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ns::detail::IServiceGetterInterface", req->cmd_id);
			}
		}
		uint32_t Unknown7994(IUnknown*& _0);
		uint32_t Unknown7995(IUnknown*& _0);
		uint32_t Unknown7996(IUnknown*& _0);
		uint32_t Unknown7997(IUnknown*& _0);
		uint32_t Unknown7998(IUnknown*& _0);
		uint32_t Unknown7999(IUnknown*& _0);
	};
	class ISystemUpdateControl : public IpcService {
	public:
		ISystemUpdateControl() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateControl::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateControl::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateControl::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateControl::Unknown3\n");
				resp->error_code = Unknown3(*resp->GetDataPointer<uint128_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateControl::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateControl::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateControl::Unknown6\n");
				resp->error_code = Unknown6(*resp->GetDataPointer<uint128_t *>(8));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateControl::Unknown7\n");
				resp->error_code = Unknown7(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateControl::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateControl::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateControl::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateControl::Unknown11\n");
				resp->error_code = Unknown11();
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateControl::Unknown12\n");
				resp->error_code = Unknown12();
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateControl::Unknown13\n");
				resp->error_code = Unknown13();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ns::detail::ISystemUpdateControl", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint8_t& _0);
		uint32_t Unknown1();
		uint32_t Unknown10();
		uint32_t Unknown11();
		uint32_t Unknown12();
		uint32_t Unknown13();
		uint32_t Unknown2();
		uint32_t Unknown3(uint128_t& _0);
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6(uint128_t& _0);
		uint32_t Unknown7(uint8_t& _0);
		uint32_t Unknown8();
		uint32_t Unknown9();
	};
	class ISystemUpdateInterface : public IpcService {
	public:
		ISystemUpdateInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateInterface::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::ns::detail::ISystemUpdateInterface::Unknown1\n");
				resp->error_code = Unknown1(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateInterface::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateInterface::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateInterface::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateInterface::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateInterface::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::ns::detail::ISystemUpdateInterface::Unknown9\n");
				resp->error_code = Unknown9(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateInterface::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateInterface::Unknown11\n");
				resp->error_code = Unknown11();
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::ns::detail::ISystemUpdateInterface::Unknown12\n");
				resp->error_code = Unknown12(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateInterface::Unknown13\n");
				resp->error_code = Unknown13();
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::ns::detail::ISystemUpdateInterface::Unknown14\n");
				resp->error_code = Unknown14(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ns::detail::ISystemUpdateInterface::Unknown15\n");
				resp->error_code = Unknown15();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ns::detail::ISystemUpdateInterface", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint8_t& _0);
		uint32_t Unknown1(IUnknown*& _0);
		uint32_t Unknown10();
		uint32_t Unknown11();
		uint32_t Unknown12(IpcService*& _0);
		uint32_t Unknown13();
		uint32_t Unknown14(IpcService*& _0);
		uint32_t Unknown15();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6();
		uint32_t Unknown9(IpcService*& _0);
	};
	class IVulnerabilityManagerInterface : public IpcService {
	public:
		IVulnerabilityManagerInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 1200: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::ns::detail::IVulnerabilityManagerInterface::Unknown1200\n");
				resp->error_code = Unknown1200(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ns::detail::IVulnerabilityManagerInterface", req->cmd_id);
			}
		}
		uint32_t Unknown1200(uint8_t& _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::ns::detail::IAccountProxyInterface::Unknown0() {
	ns_print("Stub implementation for nn::ns::detail::IAccountProxyInterface::Unknown0\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown0() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown0\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1(uint64_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown100() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown100\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1000() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1000\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1001() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1001\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1002() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1002\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown101() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown101\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown102() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown102\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown11() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown11\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1200(uint8_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1200\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1300(uint64_t _0, uint8_t& _1) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1300\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1301() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1301\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1302(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1302\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1303(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1303\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1304() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1304\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1400() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1400\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1500() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1500\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1501(uint8_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1501\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1502() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1502\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1504() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1504\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1505() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1505\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown16() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown16\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1600(uint8_t *& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1600\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1601() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1601\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown17() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown17\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1700() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1700\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1701() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1701\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1702(uint64_t _0, uint8_t& _1) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1702\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1800(uint8_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1800\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1801(uint64_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1801\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1802(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1802\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1803(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1803\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown19(uint64_t _0, uint64_t& _1) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown19\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown1900(uint32_t _0, uint8_t& _1) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown1900\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown2(IpcService*& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown2\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown200() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown200\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown201() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown201\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown21() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown21\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown210() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown210\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown22(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown22\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown220() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown220\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown23(uint8_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown23\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown26() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown26\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown27(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown27\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown3() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown3\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown30() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown30\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown300(IpcService*& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown300\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown301(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown301\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown302(uint64_t _0, uint64_t& _1) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown302\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown303(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown303\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown304(uint64_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown304\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown305(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown305\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown306(uint64_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown306\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown307(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown307\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown31() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown31\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown32(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown32\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown33(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown33\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown35(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown35\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown36(uint32_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown36\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown37(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown37\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown38(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown38\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown39(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown39\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown4(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown4\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown40() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown40\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown400() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown400\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown401() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown401\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown402() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown402\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown403(uint32_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown403\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown404(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown404\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown405(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown405\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown41() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown41\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown42() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown42\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown43() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown43\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown44(IpcService*& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown44\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown45(IpcService*& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown45\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown46(uint128_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown46\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown47() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown47\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown48() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown48\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown49(IpcService*& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown49\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown5(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown5\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown502() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown502\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown503() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown503\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown504() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown504\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown505(IpcService*& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown505\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown506(uint8_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown506\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown507() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown507\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown508() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown508\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown52(IpcService*& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown52\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown53(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown53\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown54(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown54\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown55(uint32_t _0, uint8_t& _1) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown55\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown56(uint32_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown56\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown57(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown57\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown58() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown58\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown59() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown59\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown6(uint8_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown6\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown60() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown60\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown600(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown600\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown601() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown601\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown602() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown602\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown603() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown603\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown604(uint64_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown604\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown605() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown605\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown606() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown606\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown61(uint128_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown61\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown62(IUnknown*& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown62\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown63(uint64_t _0, uint8_t& _1) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown63\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown64(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown64\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown65(IUnknown*& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown65\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown66(uint128_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown66\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown67(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown67\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown68(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown68\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown69() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown69\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown7() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown7\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown70() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown70\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown700(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown700\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown701() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown701\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown702() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown702\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown703() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown703\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown704(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown704\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown705() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown705\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown71() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown71\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown8() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown8\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown80() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown80\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown800() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown800\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown801(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown801\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown802() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown802\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown81() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown81\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown82() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown82\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown9(uint8_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown9\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown900() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown900\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown901() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown901\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown902(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown902\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown903(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown903\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown904(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown904\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown905(uint32_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown905\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown906() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown906\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown907(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown907\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown908() {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown908\n");
	return 0;
}
uint32_t nn::ns::detail::IApplicationManagerInterface::Unknown909(uint64_t _0) {
	ns_print("Stub implementation for nn::ns::detail::IApplicationManagerInterface::Unknown909\n");
	return 0;
}
uint32_t nn::ns::detail::IAsyncResult::Unknown0() {
	ns_print("Stub implementation for nn::ns::detail::IAsyncResult::Unknown0\n");
	return 0;
}
uint32_t nn::ns::detail::IAsyncResult::Unknown1() {
	ns_print("Stub implementation for nn::ns::detail::IAsyncResult::Unknown1\n");
	return 0;
}
uint32_t nn::ns::detail::IAsyncValue::Unknown0(uint64_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::IAsyncValue::Unknown0\n");
	return 0;
}
uint32_t nn::ns::detail::IAsyncValue::Unknown1(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::ns::detail::IAsyncValue::Unknown1\n");
	return 0;
}
uint32_t nn::ns::detail::IAsyncValue::Unknown2() {
	ns_print("Stub implementation for nn::ns::detail::IAsyncValue::Unknown2\n");
	return 0;
}
uint32_t nn::ns::detail::IContentManagementInterface::Unknown11() {
	ns_print("Stub implementation for nn::ns::detail::IContentManagementInterface::Unknown11\n");
	return 0;
}
uint32_t nn::ns::detail::IContentManagementInterface::Unknown43() {
	ns_print("Stub implementation for nn::ns::detail::IContentManagementInterface::Unknown43\n");
	return 0;
}
uint32_t nn::ns::detail::IContentManagementInterface::Unknown47() {
	ns_print("Stub implementation for nn::ns::detail::IContentManagementInterface::Unknown47\n");
	return 0;
}
uint32_t nn::ns::detail::IContentManagementInterface::Unknown48() {
	ns_print("Stub implementation for nn::ns::detail::IContentManagementInterface::Unknown48\n");
	return 0;
}
uint32_t nn::ns::detail::IContentManagementInterface::Unknown600(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::ns::detail::IContentManagementInterface::Unknown600\n");
	return 0;
}
uint32_t nn::ns::detail::IContentManagementInterface::Unknown601() {
	ns_print("Stub implementation for nn::ns::detail::IContentManagementInterface::Unknown601\n");
	return 0;
}
uint32_t nn::ns::detail::IContentManagementInterface::Unknown605() {
	ns_print("Stub implementation for nn::ns::detail::IContentManagementInterface::Unknown605\n");
	return 0;
}
uint32_t nn::ns::detail::IContentManagementInterface::Unknown607(uint8_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::IContentManagementInterface::Unknown607\n");
	return 0;
}
uint32_t nn::ns::detail::IDevelopInterface::Unknown0() {
	ns_print("Stub implementation for nn::ns::detail::IDevelopInterface::Unknown0\n");
	return 0;
}
uint32_t nn::ns::detail::IDevelopInterface::Unknown1() {
	ns_print("Stub implementation for nn::ns::detail::IDevelopInterface::Unknown1\n");
	return 0;
}
uint32_t nn::ns::detail::IDevelopInterface::Unknown2() {
	ns_print("Stub implementation for nn::ns::detail::IDevelopInterface::Unknown2\n");
	return 0;
}
uint32_t nn::ns::detail::IDevelopInterface::Unknown4() {
	ns_print("Stub implementation for nn::ns::detail::IDevelopInterface::Unknown4\n");
	return 0;
}
uint32_t nn::ns::detail::IDevelopInterface::Unknown5() {
	ns_print("Stub implementation for nn::ns::detail::IDevelopInterface::Unknown5\n");
	return 0;
}
uint32_t nn::ns::detail::IDevelopInterface::Unknown6() {
	ns_print("Stub implementation for nn::ns::detail::IDevelopInterface::Unknown6\n");
	return 0;
}
uint32_t nn::ns::detail::IDevelopInterface::Unknown7() {
	ns_print("Stub implementation for nn::ns::detail::IDevelopInterface::Unknown7\n");
	return 0;
}
uint32_t nn::ns::detail::IDevelopInterface::Unknown8() {
	ns_print("Stub implementation for nn::ns::detail::IDevelopInterface::Unknown8\n");
	return 0;
}
uint32_t nn::ns::detail::IDevelopInterface::Unknown9() {
	ns_print("Stub implementation for nn::ns::detail::IDevelopInterface::Unknown9\n");
	return 0;
}
uint32_t nn::ns::detail::IDocumentInterface::Unknown21() {
	ns_print("Stub implementation for nn::ns::detail::IDocumentInterface::Unknown21\n");
	return 0;
}
uint32_t nn::ns::detail::IDocumentInterface::Unknown23(uint8_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::ns::detail::IDocumentInterface::Unknown23\n");
	return 0;
}
uint32_t nn::ns::detail::IDownloadTaskInterface::Unknown701() {
	ns_print("Stub implementation for nn::ns::detail::IDownloadTaskInterface::Unknown701\n");
	return 0;
}
uint32_t nn::ns::detail::IDownloadTaskInterface::Unknown702() {
	ns_print("Stub implementation for nn::ns::detail::IDownloadTaskInterface::Unknown702\n");
	return 0;
}
uint32_t nn::ns::detail::IDownloadTaskInterface::Unknown703() {
	ns_print("Stub implementation for nn::ns::detail::IDownloadTaskInterface::Unknown703\n");
	return 0;
}
uint32_t nn::ns::detail::IDownloadTaskInterface::Unknown704(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::ns::detail::IDownloadTaskInterface::Unknown704\n");
	return 0;
}
uint32_t nn::ns::detail::IDownloadTaskInterface::Unknown705() {
	ns_print("Stub implementation for nn::ns::detail::IDownloadTaskInterface::Unknown705\n");
	return 0;
}
uint32_t nn::ns::detail::IFactoryResetInterface::Unknown100() {
	ns_print("Stub implementation for nn::ns::detail::IFactoryResetInterface::Unknown100\n");
	return 0;
}
uint32_t nn::ns::detail::IFactoryResetInterface::Unknown101() {
	ns_print("Stub implementation for nn::ns::detail::IFactoryResetInterface::Unknown101\n");
	return 0;
}
uint32_t nn::ns::detail::IFactoryResetInterface::Unknown102() {
	ns_print("Stub implementation for nn::ns::detail::IFactoryResetInterface::Unknown102\n");
	return 0;
}
uint32_t nn::ns::detail::IProgressAsyncResult::Unknown0() {
	ns_print("Stub implementation for nn::ns::detail::IProgressAsyncResult::Unknown0\n");
	return 0;
}
uint32_t nn::ns::detail::IProgressAsyncResult::Unknown1() {
	ns_print("Stub implementation for nn::ns::detail::IProgressAsyncResult::Unknown1\n");
	return 0;
}
uint32_t nn::ns::detail::IProgressAsyncResult::Unknown2(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::ns::detail::IProgressAsyncResult::Unknown2\n");
	return 0;
}
uint32_t nn::ns::detail::IProgressAsyncResult::Unknown3() {
	ns_print("Stub implementation for nn::ns::detail::IProgressAsyncResult::Unknown3\n");
	return 0;
}
uint32_t nn::ns::detail::IProgressMonitorForDeleteUserSaveDataAll::Unknown0(IpcService*& _0) {
	ns_print("Stub implementation for nn::ns::detail::IProgressMonitorForDeleteUserSaveDataAll::Unknown0\n");
	return 0;
}
uint32_t nn::ns::detail::IProgressMonitorForDeleteUserSaveDataAll::Unknown1(uint8_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::IProgressMonitorForDeleteUserSaveDataAll::Unknown1\n");
	return 0;
}
uint32_t nn::ns::detail::IProgressMonitorForDeleteUserSaveDataAll::Unknown10(uint8_t *& _0) {
	ns_print("Stub implementation for nn::ns::detail::IProgressMonitorForDeleteUserSaveDataAll::Unknown10\n");
	return 0;
}
uint32_t nn::ns::detail::IProgressMonitorForDeleteUserSaveDataAll::Unknown2() {
	ns_print("Stub implementation for nn::ns::detail::IProgressMonitorForDeleteUserSaveDataAll::Unknown2\n");
	return 0;
}
uint32_t nn::ns::detail::IServiceGetterInterface::Unknown7994(IUnknown*& _0) {
	ns_print("Stub implementation for nn::ns::detail::IServiceGetterInterface::Unknown7994\n");
	return 0;
}
uint32_t nn::ns::detail::IServiceGetterInterface::Unknown7995(IUnknown*& _0) {
	ns_print("Stub implementation for nn::ns::detail::IServiceGetterInterface::Unknown7995\n");
	return 0;
}
uint32_t nn::ns::detail::IServiceGetterInterface::Unknown7996(IUnknown*& _0) {
	ns_print("Stub implementation for nn::ns::detail::IServiceGetterInterface::Unknown7996\n");
	return 0;
}
uint32_t nn::ns::detail::IServiceGetterInterface::Unknown7997(IUnknown*& _0) {
	ns_print("Stub implementation for nn::ns::detail::IServiceGetterInterface::Unknown7997\n");
	return 0;
}
uint32_t nn::ns::detail::IServiceGetterInterface::Unknown7998(IUnknown*& _0) {
	ns_print("Stub implementation for nn::ns::detail::IServiceGetterInterface::Unknown7998\n");
	return 0;
}
uint32_t nn::ns::detail::IServiceGetterInterface::Unknown7999(IUnknown*& _0) {
	ns_print("Stub implementation for nn::ns::detail::IServiceGetterInterface::Unknown7999\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateControl::Unknown0(uint8_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateControl::Unknown0\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateControl::Unknown1() {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateControl::Unknown1\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateControl::Unknown10() {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateControl::Unknown10\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateControl::Unknown11() {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateControl::Unknown11\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateControl::Unknown12() {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateControl::Unknown12\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateControl::Unknown13() {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateControl::Unknown13\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateControl::Unknown2() {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateControl::Unknown2\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateControl::Unknown3(uint128_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateControl::Unknown3\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateControl::Unknown4() {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateControl::Unknown4\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateControl::Unknown5() {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateControl::Unknown5\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateControl::Unknown6(uint128_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateControl::Unknown6\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateControl::Unknown7(uint8_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateControl::Unknown7\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateControl::Unknown8() {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateControl::Unknown8\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateControl::Unknown9() {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateControl::Unknown9\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateInterface::Unknown0(uint8_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateInterface::Unknown0\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateInterface::Unknown1(IUnknown*& _0) {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateInterface::Unknown1\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateInterface::Unknown10() {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateInterface::Unknown10\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateInterface::Unknown11() {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateInterface::Unknown11\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateInterface::Unknown12(IpcService*& _0) {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateInterface::Unknown12\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateInterface::Unknown13() {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateInterface::Unknown13\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateInterface::Unknown14(IpcService*& _0) {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateInterface::Unknown14\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateInterface::Unknown15() {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateInterface::Unknown15\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateInterface::Unknown2() {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateInterface::Unknown2\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateInterface::Unknown3() {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateInterface::Unknown3\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateInterface::Unknown4() {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateInterface::Unknown4\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateInterface::Unknown5() {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateInterface::Unknown5\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateInterface::Unknown6() {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateInterface::Unknown6\n");
	return 0;
}
uint32_t nn::ns::detail::ISystemUpdateInterface::Unknown9(IpcService*& _0) {
	ns_print("Stub implementation for nn::ns::detail::ISystemUpdateInterface::Unknown9\n");
	return 0;
}
uint32_t nn::ns::detail::IVulnerabilityManagerInterface::Unknown1200(uint8_t& _0) {
	ns_print("Stub implementation for nn::ns::detail::IVulnerabilityManagerInterface::Unknown1200\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::nsd::detail {
	class IManager : public IpcService {
	public:
		IManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 10: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x16, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nsd::detail::IManager::Unknown10\n");
				resp->error_code = Unknown10(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x16, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nsd::detail::IManager::Unknown11\n");
				resp->error_code = Unknown11(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::nsd::detail::IManager::Unknown12\n");
				resp->error_code = Unknown12(*resp->GetDataPointer<uint128_t *>(8));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nsd::detail::IManager::Unknown13: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown13(req->GetData<uint32_t>(8));
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::nsd::detail::IManager::Unknown14: uint32_t = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), temp2);
				resp->error_code = Unknown14(req->GetData<uint32_t>(8), temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x15, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x16, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::nsd::detail::IManager::Unknown20: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown20(temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x15, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x16, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::nsd::detail::IManager::Unknown21: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown21(temp3, temp2, *resp->GetDataPointer<uint32_t *>(8), temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 30: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x15, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x16, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::nsd::detail::IManager::Unknown30: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown30(temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 31: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x15, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x16, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::nsd::detail::IManager::Unknown31: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown31(temp3, temp2, *resp->GetDataPointer<uint32_t *>(8), temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 40: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x16, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nsd::detail::IManager::Unknown40\n");
				resp->error_code = Unknown40(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 41: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x16, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nsd::detail::IManager::Unknown41\n");
				resp->error_code = Unknown41(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 42: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x16, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nsd::detail::IManager::Unknown42\n");
				resp->error_code = Unknown42(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 43: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x16, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nsd::detail::IManager::Unknown43\n");
				resp->error_code = Unknown43(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 50: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x16, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nsd::detail::IManager::Unknown50\n");
				resp->error_code = Unknown50(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 60: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x16, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::nsd::detail::IManager::Unknown60\n");
				resp->error_code = Unknown60(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 61: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x15, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::nsd::detail::IManager::Unknown61: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown61(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 62: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::nsd::detail::IManager::Unknown62\n");
				resp->error_code = Unknown62();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::nsd::detail::IManager", req->cmd_id);
			}
		}
		uint32_t Unknown10(uint8_t *& _0, unsigned int _0_size);
		uint32_t Unknown11(uint8_t *& _0, unsigned int _0_size);
		uint32_t Unknown12(uint128_t& _0);
		uint32_t Unknown13(uint32_t _0);
		uint32_t Unknown14(uint32_t _0, uint8_t * _1, unsigned int _1_size, uint8_t *& _2, unsigned int _2_size);
		uint32_t Unknown20(uint8_t * _0, unsigned int _0_size, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown21(uint8_t * _0, unsigned int _0_size, uint32_t& _1, uint8_t *& _2, unsigned int _2_size);
		uint32_t Unknown30(uint8_t * _0, unsigned int _0_size, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown31(uint8_t * _0, unsigned int _0_size, uint32_t& _1, uint8_t *& _2, unsigned int _2_size);
		uint32_t Unknown40(uint8_t *& _0, unsigned int _0_size);
		uint32_t Unknown41(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown42(uint8_t *& _0, unsigned int _0_size);
		uint32_t Unknown43(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown50(uint8_t *& _0, unsigned int _0_size);
		uint32_t Unknown60(uint8_t *& _0, unsigned int _0_size);
		uint32_t Unknown61(uint8_t * _0, unsigned int _0_size);
		uint32_t Unknown62();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::nsd::detail::IManager::Unknown10(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::nsd::detail::IManager::Unknown10\n");
	return 0;
}
uint32_t nn::nsd::detail::IManager::Unknown11(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::nsd::detail::IManager::Unknown11\n");
	return 0;
}
uint32_t nn::nsd::detail::IManager::Unknown12(uint128_t& _0) {
	ns_print("Stub implementation for nn::nsd::detail::IManager::Unknown12\n");
	return 0;
}
uint32_t nn::nsd::detail::IManager::Unknown13(uint32_t _0) {
	ns_print("Stub implementation for nn::nsd::detail::IManager::Unknown13\n");
	return 0;
}
uint32_t nn::nsd::detail::IManager::Unknown14(uint32_t _0, uint8_t * _1, unsigned int _1_size, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::nsd::detail::IManager::Unknown14\n");
	return 0;
}
uint32_t nn::nsd::detail::IManager::Unknown20(uint8_t * _0, unsigned int _0_size, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nsd::detail::IManager::Unknown20\n");
	return 0;
}
uint32_t nn::nsd::detail::IManager::Unknown21(uint8_t * _0, unsigned int _0_size, uint32_t& _1, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::nsd::detail::IManager::Unknown21\n");
	return 0;
}
uint32_t nn::nsd::detail::IManager::Unknown30(uint8_t * _0, unsigned int _0_size, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nsd::detail::IManager::Unknown30\n");
	return 0;
}
uint32_t nn::nsd::detail::IManager::Unknown31(uint8_t * _0, unsigned int _0_size, uint32_t& _1, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::nsd::detail::IManager::Unknown31\n");
	return 0;
}
uint32_t nn::nsd::detail::IManager::Unknown40(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::nsd::detail::IManager::Unknown40\n");
	return 0;
}
uint32_t nn::nsd::detail::IManager::Unknown41(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nsd::detail::IManager::Unknown41\n");
	return 0;
}
uint32_t nn::nsd::detail::IManager::Unknown42(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::nsd::detail::IManager::Unknown42\n");
	return 0;
}
uint32_t nn::nsd::detail::IManager::Unknown43(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::nsd::detail::IManager::Unknown43\n");
	return 0;
}
uint32_t nn::nsd::detail::IManager::Unknown50(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::nsd::detail::IManager::Unknown50\n");
	return 0;
}
uint32_t nn::nsd::detail::IManager::Unknown60(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::nsd::detail::IManager::Unknown60\n");
	return 0;
}
uint32_t nn::nsd::detail::IManager::Unknown61(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::nsd::detail::IManager::Unknown61\n");
	return 0;
}
uint32_t nn::nsd::detail::IManager::Unknown62() {
	ns_print("Stub implementation for nn::nsd::detail::IManager::Unknown62\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::ntc::detail::service {
	class IEnsureNetworkClockAvailabilityService : public IpcService {
	public:
		IEnsureNetworkClockAvailabilityService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService::Unknown1\n");
				resp->error_code = Unknown1(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService::Unknown4\n");
				resp->error_code = Unknown4(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService::Unknown5\n");
				resp->error_code = Unknown5(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1(IpcService*& _0);
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4(uint8_t& _0);
		uint32_t Unknown5(uint64_t& _0);
	};
	class IStaticService : public IpcService {
	public:
		IStaticService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::ntc::detail::service::IStaticService::Unknown0: uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Unknown0(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ntc::detail::service::IStaticService::Unknown100\n");
				resp->error_code = Unknown100();
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ntc::detail::service::IStaticService::Unknown101\n");
				resp->error_code = Unknown101();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ntc::detail::service::IStaticService", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t _0, uint32_t _1, IUnknown*& _2);
		uint32_t Unknown100();
		uint32_t Unknown101();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService::Unknown0() {
	ns_print("Stub implementation for nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService::Unknown0\n");
	return 0;
}
uint32_t nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService::Unknown1(IpcService*& _0) {
	ns_print("Stub implementation for nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService::Unknown1\n");
	return 0;
}
uint32_t nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService::Unknown2() {
	ns_print("Stub implementation for nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService::Unknown2\n");
	return 0;
}
uint32_t nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService::Unknown3() {
	ns_print("Stub implementation for nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService::Unknown3\n");
	return 0;
}
uint32_t nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService::Unknown4(uint8_t& _0) {
	ns_print("Stub implementation for nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService::Unknown4\n");
	return 0;
}
uint32_t nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService::Unknown5(uint64_t& _0) {
	ns_print("Stub implementation for nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService::Unknown5\n");
	return 0;
}
uint32_t nn::ntc::detail::service::IStaticService::Unknown0(uint32_t _0, uint32_t _1, IUnknown*& _2) {
	ns_print("Stub implementation for nn::ntc::detail::service::IStaticService::Unknown0\n");
	return 0;
}
uint32_t nn::ntc::detail::service::IStaticService::Unknown100() {
	ns_print("Stub implementation for nn::ntc::detail::service::IStaticService::Unknown100\n");
	return 0;
}
uint32_t nn::ntc::detail::service::IStaticService::Unknown101() {
	ns_print("Stub implementation for nn::ntc::detail::service::IStaticService::Unknown101\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::omm::detail {
	class IOperationModeManager : public IpcService {
	public:
		IOperationModeManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::omm::detail::IOperationModeManager::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::omm::detail::IOperationModeManager::Unknown1\n");
				resp->error_code = Unknown1(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::omm::detail::IOperationModeManager::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::omm::detail::IOperationModeManager::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::omm::detail::IOperationModeManager::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::omm::detail::IOperationModeManager::Unknown5\n");
				resp->error_code = Unknown5(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::omm::detail::IOperationModeManager::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::omm::detail::IOperationModeManager::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::omm::detail::IOperationModeManager::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::omm::detail::IOperationModeManager::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::omm::detail::IOperationModeManager::Unknown10: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown10(req->GetData<uint8_t>(8));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::omm::detail::IOperationModeManager::Unknown11\n");
				resp->error_code = Unknown11();
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::omm::detail::IOperationModeManager::Unknown12\n");
				resp->error_code = Unknown12(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::omm::detail::IOperationModeManager::Unknown13\n");
				resp->error_code = Unknown13();
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::omm::detail::IOperationModeManager::Unknown14\n");
				resp->error_code = Unknown14(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::omm::detail::IOperationModeManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint8_t& _0);
		uint32_t Unknown1(IpcService*& _0);
		uint32_t Unknown10(uint8_t _0);
		uint32_t Unknown11();
		uint32_t Unknown12(IpcService*& _0);
		uint32_t Unknown13();
		uint32_t Unknown14(uint8_t& _0);
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5(uint8_t& _0);
		uint32_t Unknown6();
		uint32_t Unknown7();
		uint32_t Unknown8();
		uint32_t Unknown9();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::omm::detail::IOperationModeManager::Unknown0(uint8_t& _0) {
	ns_print("Stub implementation for nn::omm::detail::IOperationModeManager::Unknown0\n");
	return 0;
}
uint32_t nn::omm::detail::IOperationModeManager::Unknown1(IpcService*& _0) {
	ns_print("Stub implementation for nn::omm::detail::IOperationModeManager::Unknown1\n");
	return 0;
}
uint32_t nn::omm::detail::IOperationModeManager::Unknown10(uint8_t _0) {
	ns_print("Stub implementation for nn::omm::detail::IOperationModeManager::Unknown10\n");
	return 0;
}
uint32_t nn::omm::detail::IOperationModeManager::Unknown11() {
	ns_print("Stub implementation for nn::omm::detail::IOperationModeManager::Unknown11\n");
	return 0;
}
uint32_t nn::omm::detail::IOperationModeManager::Unknown12(IpcService*& _0) {
	ns_print("Stub implementation for nn::omm::detail::IOperationModeManager::Unknown12\n");
	return 0;
}
uint32_t nn::omm::detail::IOperationModeManager::Unknown13() {
	ns_print("Stub implementation for nn::omm::detail::IOperationModeManager::Unknown13\n");
	return 0;
}
uint32_t nn::omm::detail::IOperationModeManager::Unknown14(uint8_t& _0) {
	ns_print("Stub implementation for nn::omm::detail::IOperationModeManager::Unknown14\n");
	return 0;
}
uint32_t nn::omm::detail::IOperationModeManager::Unknown2() {
	ns_print("Stub implementation for nn::omm::detail::IOperationModeManager::Unknown2\n");
	return 0;
}
uint32_t nn::omm::detail::IOperationModeManager::Unknown3() {
	ns_print("Stub implementation for nn::omm::detail::IOperationModeManager::Unknown3\n");
	return 0;
}
uint32_t nn::omm::detail::IOperationModeManager::Unknown4() {
	ns_print("Stub implementation for nn::omm::detail::IOperationModeManager::Unknown4\n");
	return 0;
}
uint32_t nn::omm::detail::IOperationModeManager::Unknown5(uint8_t& _0) {
	ns_print("Stub implementation for nn::omm::detail::IOperationModeManager::Unknown5\n");
	return 0;
}
uint32_t nn::omm::detail::IOperationModeManager::Unknown6() {
	ns_print("Stub implementation for nn::omm::detail::IOperationModeManager::Unknown6\n");
	return 0;
}
uint32_t nn::omm::detail::IOperationModeManager::Unknown7() {
	ns_print("Stub implementation for nn::omm::detail::IOperationModeManager::Unknown7\n");
	return 0;
}
uint32_t nn::omm::detail::IOperationModeManager::Unknown8() {
	ns_print("Stub implementation for nn::omm::detail::IOperationModeManager::Unknown8\n");
	return 0;
}
uint32_t nn::omm::detail::IOperationModeManager::Unknown9() {
	ns_print("Stub implementation for nn::omm::detail::IOperationModeManager::Unknown9\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::ovln {
	class IReceiver : public IpcService {
	public:
		IReceiver() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ovln::IReceiver::Unknown0: uint128_t = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = Unknown0(req->GetData<uint128_t>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ovln::IReceiver::Unknown1: uint128_t = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = Unknown1(req->GetData<uint128_t>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::ovln::IReceiver::Unknown2\n");
				resp->error_code = Unknown2(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ovln::IReceiver::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ovln::IReceiver::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ovln::IReceiver", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint128_t _0);
		uint32_t Unknown1(uint128_t _0);
		uint32_t Unknown2(IpcService*& _0);
		uint32_t Unknown3();
		uint32_t Unknown4();
	};
	class IReceiverService : public IpcService {
	public:
		IReceiverService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::ovln::IReceiverService::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ovln::IReceiverService", req->cmd_id);
			}
		}
		uint32_t Unknown0(IUnknown*& _0);
	};
	class ISender : public IpcService {
	public:
		ISender() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ovln::ISender::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::ovln::ISender::Unknown1\n");
				resp->error_code = Unknown1(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ovln::ISender", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1(uint32_t& _0);
	};
	class ISenderService : public IpcService {
	public:
		ISenderService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ovln::ISenderService::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ovln::ISenderService", req->cmd_id);
			}
		}
		uint32_t Unknown0();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::ovln::IReceiver::Unknown0(uint128_t _0) {
	ns_print("Stub implementation for nn::ovln::IReceiver::Unknown0\n");
	return 0;
}
uint32_t nn::ovln::IReceiver::Unknown1(uint128_t _0) {
	ns_print("Stub implementation for nn::ovln::IReceiver::Unknown1\n");
	return 0;
}
uint32_t nn::ovln::IReceiver::Unknown2(IpcService*& _0) {
	ns_print("Stub implementation for nn::ovln::IReceiver::Unknown2\n");
	return 0;
}
uint32_t nn::ovln::IReceiver::Unknown3() {
	ns_print("Stub implementation for nn::ovln::IReceiver::Unknown3\n");
	return 0;
}
uint32_t nn::ovln::IReceiver::Unknown4() {
	ns_print("Stub implementation for nn::ovln::IReceiver::Unknown4\n");
	return 0;
}
uint32_t nn::ovln::IReceiverService::Unknown0(IUnknown*& _0) {
	ns_print("Stub implementation for nn::ovln::IReceiverService::Unknown0\n");
	return 0;
}
uint32_t nn::ovln::ISender::Unknown0() {
	ns_print("Stub implementation for nn::ovln::ISender::Unknown0\n");
	return 0;
}
uint32_t nn::ovln::ISender::Unknown1(uint32_t& _0) {
	ns_print("Stub implementation for nn::ovln::ISender::Unknown1\n");
	return 0;
}
uint32_t nn::ovln::ISenderService::Unknown0() {
	ns_print("Stub implementation for nn::ovln::ISenderService::Unknown0\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::pcie::detail {
	class IManager : public IpcService {
	public:
		IManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::IManager::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::IManager::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::pcie::detail::IManager", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
	};
	class ISession : public IpcService {
	public:
		ISession() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown2: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown2(req->GetData<uint32_t>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown11\n");
				resp->error_code = Unknown11();
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown12\n");
				resp->error_code = Unknown12();
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown13\n");
				resp->error_code = Unknown13();
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown14\n");
				resp->error_code = Unknown14();
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown15\n");
				resp->error_code = Unknown15();
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown16: uint8_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint8_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Unknown16(req->GetData<uint8_t>(8), req->GetData<uint32_t>(0xc));
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown17\n");
				resp->error_code = Unknown17();
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown18: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown18(req->GetData<uint32_t>(8));
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown19\n");
				resp->error_code = Unknown19();
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown20: uint8_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint8_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Unknown20(req->GetData<uint8_t>(8), req->GetData<uint32_t>(0xc));
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcie::detail::ISession::Unknown21: uint8_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint8_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Unknown21(req->GetData<uint8_t>(8), req->GetData<uint32_t>(0xc));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::pcie::detail::ISession", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown10();
		uint32_t Unknown11();
		uint32_t Unknown12();
		uint32_t Unknown13();
		uint32_t Unknown14();
		uint32_t Unknown15();
		uint32_t Unknown16(uint8_t _0, uint32_t _1);
		uint32_t Unknown17();
		uint32_t Unknown18(uint32_t _0);
		uint32_t Unknown19();
		uint32_t Unknown2(uint32_t _0);
		uint32_t Unknown20(uint8_t _0, uint32_t _1);
		uint32_t Unknown21(uint8_t _0, uint32_t _1);
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6();
		uint32_t Unknown7();
		uint32_t Unknown8();
		uint32_t Unknown9();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::pcie::detail::IManager::Unknown0() {
	ns_print("Stub implementation for nn::pcie::detail::IManager::Unknown0\n");
	return 0;
}
uint32_t nn::pcie::detail::IManager::Unknown1() {
	ns_print("Stub implementation for nn::pcie::detail::IManager::Unknown1\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown0() {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown0\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown1() {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown1\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown10() {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown10\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown11() {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown11\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown12() {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown12\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown13() {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown13\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown14() {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown14\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown15() {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown15\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown16(uint8_t _0, uint32_t _1) {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown16\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown17() {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown17\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown18(uint32_t _0) {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown18\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown19() {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown19\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown2(uint32_t _0) {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown2\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown20(uint8_t _0, uint32_t _1) {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown20\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown21(uint8_t _0, uint32_t _1) {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown21\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown3() {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown3\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown4() {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown4\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown5() {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown5\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown6() {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown6\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown7() {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown7\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown8() {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown8\n");
	return 0;
}
uint32_t nn::pcie::detail::ISession::Unknown9() {
	ns_print("Stub implementation for nn::pcie::detail::ISession::Unknown9\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::pctl::detail::ipc {
	class IParentalControlService : public IpcService {
	public:
		IParentalControlService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 1001: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::CheckFreeCommunicationPermission\n");
				resp->error_code = CheckFreeCommunicationPermission();
				return 0;
			}
			case 1002: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::ConfirmLaunchApplicationPermission: bool = 0x%x, nn::ncm::ApplicationId = 0x%%lx, int8_t *= buffer<0x%lx>\n", req->GetData<bool>(8), req->GetData<nn::ncm::ApplicationId>(0x10), temp2);
				resp->error_code = ConfirmLaunchApplicationPermission(req->GetData<bool>(8), req->GetData<nn::ncm::ApplicationId>(0x10), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1003: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::ConfirmResumeApplicationPermission: bool = 0x%x, nn::ncm::ApplicationId = 0x%%lx, int8_t *= buffer<0x%lx>\n", req->GetData<bool>(8), req->GetData<nn::ncm::ApplicationId>(0x10), temp2);
				resp->error_code = ConfirmResumeApplicationPermission(req->GetData<bool>(8), req->GetData<nn::ncm::ApplicationId>(0x10), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1004: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::ConfirmSnsPostPermission\n");
				resp->error_code = ConfirmSnsPostPermission();
				return 0;
			}
			case 1005: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::ConfirmSystemSettingsPermission\n");
				resp->error_code = ConfirmSystemSettingsPermission();
				return 0;
			}
			case 1006: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::IsRestrictionTemporaryUnlocked\n");
				resp->error_code = IsRestrictionTemporaryUnlocked(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 1007: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::RevertRestrictionTemporaryUnlocked\n");
				resp->error_code = RevertRestrictionTemporaryUnlocked();
				return 0;
			}
			case 1008: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::EnterRestrictedSystemSettings\n");
				resp->error_code = EnterRestrictedSystemSettings();
				return 0;
			}
			case 1009: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::LeaveRestrictedSystemSettings\n");
				resp->error_code = LeaveRestrictedSystemSettings();
				return 0;
			}
			case 1010: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::IsRestrictedSystemSettingsEntered\n");
				resp->error_code = IsRestrictedSystemSettingsEntered(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 1011: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::RevertRestrictedSystemSettingsEntered\n");
				resp->error_code = RevertRestrictedSystemSettingsEntered();
				return 0;
			}
			case 1012: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GetRestrictedFeatures\n");
				resp->error_code = GetRestrictedFeatures(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 1031: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::IsRestrictionEnabled\n");
				resp->error_code = IsRestrictionEnabled(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 1032: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GetSafetyLevel\n");
				resp->error_code = GetSafetyLevel(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 1033: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::SetSafetyLevel: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = SetSafetyLevel(req->GetData<int32_t>(8));
				return 0;
			}
			case 1034: {
				resp->GenBuf(0, 0, 4);
				auto temp1 = resp->GetDataPointer<nn::pctl::SafetyLevelSettings>(9);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GetSafetyLevelSettings: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = GetSafetyLevelSettings(req->GetData<int32_t>(8), temp1);
				return 0;
			}
			case 1035: {
				resp->GenBuf(0, 0, 4);
				auto temp1 = resp->GetDataPointer<nn::pctl::SafetyLevelSettings>(9);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GetCurrentSettings\n");
				resp->error_code = GetCurrentSettings(temp1);
				return 0;
			}
			case 1036: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::SetCustomSafetyLevelSettings: nn::pctl::SafetyLevelSettings = %s\n", read_string(req->GetDataPointer<uint8_t *>(9), 3).c_str());
				resp->error_code = SetCustomSafetyLevelSettings(req->GetDataPointer<nn::pctl::SafetyLevelSettings>(9));
				return 0;
			}
			case 1037: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GetDefaultRatingOrganization\n");
				resp->error_code = GetDefaultRatingOrganization(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 1038: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::SetDefaultRatingOrganization: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = SetDefaultRatingOrganization(req->GetData<int32_t>(8));
				return 0;
			}
			case 1039: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GetFreeCommunicationApplicationListCount\n");
				resp->error_code = GetFreeCommunicationApplicationListCount(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 1042: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::AddToFreeCommunicationApplicationList: nn::ncm::ApplicationId = 0x%%lx\n", req->GetData<nn::ncm::ApplicationId>(8));
				resp->error_code = AddToFreeCommunicationApplicationList(req->GetData<nn::ncm::ApplicationId>(8));
				return 0;
			}
			case 1043: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::DeleteSettings\n");
				resp->error_code = DeleteSettings();
				return 0;
			}
			case 1044: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::pctl::FreeCommunicationApplicationInfo* temp3 = (nn::pctl::FreeCommunicationApplicationInfo *) new uint8_t[temp2];
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GetFreeCommunicationApplicationList: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = GetFreeCommunicationApplicationList(req->GetData<int32_t>(8), *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 1045: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				nn::pctl::FreeCommunicationApplicationInfo* temp3 = (nn::pctl::FreeCommunicationApplicationInfo *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::UpdateFreeCommunicationApplicationList: nn::pctl::FreeCommunicationApplicationInfo *= buffer<0x%lx>\n", temp2);
				resp->error_code = UpdateFreeCommunicationApplicationList(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1046: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::DisableFeaturesForReset\n");
				resp->error_code = DisableFeaturesForReset();
				return 0;
			}
			case 1047: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::NotifyApplicationDownloadStarted: nn::ncm::ApplicationId = 0x%%lx\n", req->GetData<nn::ncm::ApplicationId>(8));
				resp->error_code = NotifyApplicationDownloadStarted(req->GetData<nn::ncm::ApplicationId>(8));
				return 0;
			}
			case 1201: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::UnlockRestrictionTemporarily: int8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = UnlockRestrictionTemporarily(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1202: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::UnlockSystemSettingsRestriction: int8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = UnlockSystemSettingsRestriction(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1203: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::SetPinCode: int8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = SetPinCode(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1204: {
				resp->GenBuf(0, 0, 32);
				auto temp1 = resp->GetDataPointer<nn::pctl::InquiryCode>(8);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GenerateInquiryCode\n");
				resp->error_code = GenerateInquiryCode(temp1);
				return 0;
			}
			case 1205: {
				resp->GenBuf(0, 0, 1);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::CheckMasterKey: nn::pctl::InquiryCode = %s, int8_t *= buffer<0x%lx>\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x20).c_str(), temp2);
				resp->error_code = CheckMasterKey(req->GetDataPointer<nn::pctl::InquiryCode>(8), temp3, temp2, *resp->GetDataPointer<bool *>(8));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1206: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GetPinCodeLength\n");
				resp->error_code = GetPinCodeLength(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 1207: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GetPinCodeChangedEvent\n");
				resp->error_code = GetPinCodeChangedEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1403: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::IsPairingActive\n");
				resp->error_code = IsPairingActive(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 1406: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GetSettingsLastUpdated\n");
				resp->error_code = GetSettingsLastUpdated(*resp->GetDataPointer<nn::time::PosixTime *>(8));
				return 0;
			}
			case 1411: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GetPairingAccountInfo: nn::pctl::detail::PairingInfoBase = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetPairingAccountInfo(req->GetData<nn::pctl::detail::PairingInfoBase>(8), *resp->GetDataPointer<nn::pctl::detail::PairingAccountInfoBase *>(8));
				return 0;
			}
			case 1421: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GetAccountNickname: nn::pctl::detail::PairingAccountInfoBase = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetAccountNickname(req->GetData<nn::pctl::detail::PairingAccountInfoBase>(8), *resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 1424: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GetAccountState: nn::pctl::detail::PairingAccountInfoBase = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetAccountState(req->GetData<nn::pctl::detail::PairingAccountInfoBase>(8), *resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 1432: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GetSynchronizationEvent\n");
				resp->error_code = GetSynchronizationEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1451: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::StartPlayTimer\n");
				resp->error_code = StartPlayTimer();
				return 0;
			}
			case 1452: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::StopPlayTimer\n");
				resp->error_code = StopPlayTimer();
				return 0;
			}
			case 1453: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::IsPlayTimerEnabled\n");
				resp->error_code = IsPlayTimerEnabled(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 1454: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GetPlayTimerRemainingTime\n");
				resp->error_code = GetPlayTimerRemainingTime(*resp->GetDataPointer<nn::TimeSpanType *>(8));
				return 0;
			}
			case 1455: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::IsRestrictedByPlayTimer\n");
				resp->error_code = IsRestrictedByPlayTimer(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 1456: {
				resp->GenBuf(0, 0, 52);
				auto temp1 = resp->GetDataPointer<nn::pctl::PlayTimerSettings>(8);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GetPlayTimerSettings\n");
				resp->error_code = GetPlayTimerSettings(temp1);
				return 0;
			}
			case 1457: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GetPlayTimerEventToRequestSuspension\n");
				resp->error_code = GetPlayTimerEventToRequestSuspension(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1471: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::NotifyWrongPinCodeInputManyTimes\n");
				resp->error_code = NotifyWrongPinCodeInputManyTimes();
				return 0;
			}
			case 1472: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::CancelNetworkRequest\n");
				resp->error_code = CancelNetworkRequest();
				return 0;
			}
			case 1473: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GetUnlinkedEvent\n");
				resp->error_code = GetUnlinkedEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1474: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::ClearUnlinkedEvent\n");
				resp->error_code = ClearUnlinkedEvent();
				return 0;
			}
			case 1601: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::DisableAllFeatures\n");
				resp->error_code = DisableAllFeatures(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 1602: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::PostEnableAllFeatures\n");
				resp->error_code = PostEnableAllFeatures(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 1603: {
				resp->GenBuf(0, 0, 2);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::IsAllFeaturesDisabled\n");
				resp->error_code = IsAllFeaturesDisabled(*resp->GetDataPointer<bool *>(8), *resp->GetDataPointer<bool *>(9));
				return 0;
			}
			case 1901: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::DeleteFromFreeCommunicationApplicationListForDebug: nn::ncm::ApplicationId = 0x%%lx\n", req->GetData<nn::ncm::ApplicationId>(8));
				resp->error_code = DeleteFromFreeCommunicationApplicationListForDebug(req->GetData<nn::ncm::ApplicationId>(8));
				return 0;
			}
			case 1902: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::ClearFreeCommunicationApplicationListForDebug\n");
				resp->error_code = ClearFreeCommunicationApplicationListForDebug();
				return 0;
			}
			case 1941: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::DeletePairing\n");
				resp->error_code = DeletePairing();
				return 0;
			}
			case 1951: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::SetPlayTimerSettingsForDebug: nn::pctl::PlayTimerSettings = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x34).c_str());
				resp->error_code = SetPlayTimerSettingsForDebug(req->GetDataPointer<nn::pctl::PlayTimerSettings>(8));
				return 0;
			}
			case 1952: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GetPlayTimerSpentTimeForTest\n");
				resp->error_code = GetPlayTimerSpentTimeForTest(*resp->GetDataPointer<nn::TimeSpanType *>(8));
				return 0;
			}
			case 2001: {
				resp->GenBuf(0, 1, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				IpcService *temp4;
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::RequestPairingAsync: int8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = RequestPairingAsync(temp3, temp2, *resp->GetDataPointer<nn::pctl::detail::AsyncData *>(8), temp4);
				delete[] (uint8_t *) temp3;
				if(temp4 != nullptr)
					resp->SetCopy(0, NewHandle(temp4));
				return 0;
			}
			case 2002: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::FinishRequestPairing: nn::pctl::detail::AsyncData = 0x%%lx\n", req->GetData<nn::pctl::detail::AsyncData>(8));
				resp->error_code = FinishRequestPairing(req->GetData<nn::pctl::detail::AsyncData>(8), *resp->GetDataPointer<nn::pctl::detail::PairingInfoBase *>(8));
				return 0;
			}
			case 2003: {
				resp->GenBuf(0, 1, 8);
				IpcService *temp1;
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::AuthorizePairingAsync: nn::pctl::detail::PairingInfoBase = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = AuthorizePairingAsync(req->GetData<nn::pctl::detail::PairingInfoBase>(8), *resp->GetDataPointer<nn::pctl::detail::AsyncData *>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 2004: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::FinishAuthorizePairing: nn::pctl::detail::AsyncData = 0x%%lx\n", req->GetData<nn::pctl::detail::AsyncData>(8));
				resp->error_code = FinishAuthorizePairing(req->GetData<nn::pctl::detail::AsyncData>(8), *resp->GetDataPointer<nn::pctl::detail::PairingInfoBase *>(8));
				return 0;
			}
			case 2005: {
				resp->GenBuf(0, 1, 8);
				IpcService *temp1;
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::RetrievePairingInfoAsync\n");
				resp->error_code = RetrievePairingInfoAsync(*resp->GetDataPointer<nn::pctl::detail::AsyncData *>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 2006: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::FinishRetrievePairingInfo: nn::pctl::detail::AsyncData = 0x%%lx\n", req->GetData<nn::pctl::detail::AsyncData>(8));
				resp->error_code = FinishRetrievePairingInfo(req->GetData<nn::pctl::detail::AsyncData>(8), *resp->GetDataPointer<nn::pctl::detail::PairingInfoBase *>(8));
				return 0;
			}
			case 2007: {
				resp->GenBuf(0, 1, 8);
				IpcService *temp1;
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::UnlinkPairingAsync: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = UnlinkPairingAsync(req->GetData<bool>(8), *resp->GetDataPointer<nn::pctl::detail::AsyncData *>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 2008: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::FinishUnlinkPairing: bool = 0x%x, nn::pctl::detail::AsyncData = 0x%%lx\n", req->GetData<bool>(8), req->GetData<nn::pctl::detail::AsyncData>(0xc));
				resp->error_code = FinishUnlinkPairing(req->GetData<bool>(8), req->GetData<nn::pctl::detail::AsyncData>(0xc));
				return 0;
			}
			case 2009: {
				resp->GenBuf(0, 1, 12);
				IpcService *temp1;
				unsigned int temp3;
				auto temp2 = req->GetBuffer(6, 0, temp3);
				uint8_t* temp4 = (uint8_t *) new uint8_t[temp3];
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GetAccountMiiImageAsync: nn::pctl::detail::PairingAccountInfoBase = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetAccountMiiImageAsync(req->GetData<nn::pctl::detail::PairingAccountInfoBase>(8), *resp->GetDataPointer<nn::pctl::detail::AsyncData *>(8), *resp->GetDataPointer<uint32_t *>(0x10), temp1, temp4, temp3);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				ARMv8::WriteBytes(temp2, (uint8_t *) temp4, temp3);
				delete[] (uint8_t *)temp4;
				return 0;
			}
			case 2010: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::FinishGetAccountMiiImage: nn::pctl::detail::AsyncData = 0x%%lx\n", req->GetData<nn::pctl::detail::AsyncData>(8));
				resp->error_code = FinishGetAccountMiiImage(req->GetData<nn::pctl::detail::AsyncData>(8), *resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2011: {
				resp->GenBuf(0, 1, 12);
				IpcService *temp1;
				unsigned int temp3;
				auto temp2 = req->GetBuffer(0xa, 0, temp3);
				int8_t* temp4 = (int8_t *) new uint8_t[temp3];
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::GetAccountMiiImageContentTypeAsync: nn::pctl::detail::PairingAccountInfoBase = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = GetAccountMiiImageContentTypeAsync(req->GetData<nn::pctl::detail::PairingAccountInfoBase>(8), *resp->GetDataPointer<nn::pctl::detail::AsyncData *>(8), *resp->GetDataPointer<uint32_t *>(0x10), temp1, temp4, temp3);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				ARMv8::WriteBytes(temp2, (uint8_t *) temp4, temp3);
				delete[] (uint8_t *)temp4;
				return 0;
			}
			case 2012: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::FinishGetAccountMiiImageContentType: nn::pctl::detail::AsyncData = 0x%%lx\n", req->GetData<nn::pctl::detail::AsyncData>(8));
				resp->error_code = FinishGetAccountMiiImageContentType(req->GetData<nn::pctl::detail::AsyncData>(8), *resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2013: {
				resp->GenBuf(0, 1, 8);
				IpcService *temp1;
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::SynchronizeParentalControlSettingsAsync\n");
				resp->error_code = SynchronizeParentalControlSettingsAsync(*resp->GetDataPointer<nn::pctl::detail::AsyncData *>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 2014: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::FinishSynchronizeParentalControlSettings: nn::pctl::detail::AsyncData = 0x%%lx\n", req->GetData<nn::pctl::detail::AsyncData>(8));
				resp->error_code = FinishSynchronizeParentalControlSettings(req->GetData<nn::pctl::detail::AsyncData>(8));
				return 0;
			}
			case 2015: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlService::FinishSynchronizeParentalControlSettingsWithLastUpdated: nn::pctl::detail::AsyncData = 0x%%lx\n", req->GetData<nn::pctl::detail::AsyncData>(8));
				resp->error_code = FinishSynchronizeParentalControlSettingsWithLastUpdated(req->GetData<nn::pctl::detail::AsyncData>(8), *resp->GetDataPointer<nn::time::PosixTime *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::pctl::detail::ipc::IParentalControlService", req->cmd_id);
			}
		}
		uint32_t AddToFreeCommunicationApplicationList(nn::ncm::ApplicationId _0);
		uint32_t AuthorizePairingAsync(nn::pctl::detail::PairingInfoBase _0, nn::pctl::detail::AsyncData& _1, IpcService*& _2);
		uint32_t CancelNetworkRequest();
		uint32_t CheckFreeCommunicationPermission();
		uint32_t CheckMasterKey(nn::pctl::InquiryCode _0, int8_t * _1, unsigned int _1_size, bool& _2);
		uint32_t ClearFreeCommunicationApplicationListForDebug();
		uint32_t ClearUnlinkedEvent();
		uint32_t ConfirmLaunchApplicationPermission(bool _0, nn::ncm::ApplicationId _1, int8_t * _2, unsigned int _2_size);
		uint32_t ConfirmResumeApplicationPermission(bool _0, nn::ncm::ApplicationId _1, int8_t * _2, unsigned int _2_size);
		uint32_t ConfirmSnsPostPermission();
		uint32_t ConfirmSystemSettingsPermission();
		uint32_t DeleteFromFreeCommunicationApplicationListForDebug(nn::ncm::ApplicationId _0);
		uint32_t DeletePairing();
		uint32_t DeleteSettings();
		uint32_t DisableAllFeatures(bool& _0);
		uint32_t DisableFeaturesForReset();
		uint32_t EnterRestrictedSystemSettings();
		uint32_t FinishAuthorizePairing(nn::pctl::detail::AsyncData _0, nn::pctl::detail::PairingInfoBase& _1);
		uint32_t FinishGetAccountMiiImage(nn::pctl::detail::AsyncData _0, uint32_t& _1, uint8_t *& _2, unsigned int _2_size);
		uint32_t FinishGetAccountMiiImageContentType(nn::pctl::detail::AsyncData _0, uint32_t& _1, int8_t *& _2, unsigned int _2_size);
		uint32_t FinishRequestPairing(nn::pctl::detail::AsyncData _0, nn::pctl::detail::PairingInfoBase& _1);
		uint32_t FinishRetrievePairingInfo(nn::pctl::detail::AsyncData _0, nn::pctl::detail::PairingInfoBase& _1);
		uint32_t FinishSynchronizeParentalControlSettings(nn::pctl::detail::AsyncData _0);
		uint32_t FinishSynchronizeParentalControlSettingsWithLastUpdated(nn::pctl::detail::AsyncData _0, nn::time::PosixTime& _1);
		uint32_t FinishUnlinkPairing(bool _0, nn::pctl::detail::AsyncData _1);
		uint32_t GenerateInquiryCode(nn::pctl::InquiryCode& _0);
		uint32_t GetAccountMiiImageAsync(nn::pctl::detail::PairingAccountInfoBase _0, nn::pctl::detail::AsyncData& _1, uint32_t& _2, IpcService*& _3, uint8_t *& _4, unsigned int _4_size);
		uint32_t GetAccountMiiImageContentTypeAsync(nn::pctl::detail::PairingAccountInfoBase _0, nn::pctl::detail::AsyncData& _1, uint32_t& _2, IpcService*& _3, int8_t *& _4, unsigned int _4_size);
		uint32_t GetAccountNickname(nn::pctl::detail::PairingAccountInfoBase _0, uint32_t& _1, int8_t *& _2, unsigned int _2_size);
		uint32_t GetAccountState(nn::pctl::detail::PairingAccountInfoBase _0, int32_t& _1);
		uint32_t GetCurrentSettings(nn::pctl::SafetyLevelSettings& _0);
		uint32_t GetDefaultRatingOrganization(int32_t& _0);
		uint32_t GetFreeCommunicationApplicationList(int32_t _0, int32_t& _1, nn::pctl::FreeCommunicationApplicationInfo *& _2, unsigned int _2_size);
		uint32_t GetFreeCommunicationApplicationListCount(int32_t& _0);
		uint32_t GetPairingAccountInfo(nn::pctl::detail::PairingInfoBase _0, nn::pctl::detail::PairingAccountInfoBase& _1);
		uint32_t GetPinCodeChangedEvent(IpcService*& _0);
		uint32_t GetPinCodeLength(int32_t& _0);
		uint32_t GetPlayTimerEventToRequestSuspension(IpcService*& _0);
		uint32_t GetPlayTimerRemainingTime(nn::TimeSpanType& _0);
		uint32_t GetPlayTimerSettings(nn::pctl::PlayTimerSettings& _0);
		uint32_t GetPlayTimerSpentTimeForTest(nn::TimeSpanType& _0);
		uint32_t GetRestrictedFeatures(int32_t& _0);
		uint32_t GetSafetyLevel(int32_t& _0);
		uint32_t GetSafetyLevelSettings(int32_t _0, nn::pctl::SafetyLevelSettings& _1);
		uint32_t GetSettingsLastUpdated(nn::time::PosixTime& _0);
		uint32_t GetSynchronizationEvent(IpcService*& _0);
		uint32_t GetUnlinkedEvent(IpcService*& _0);
		uint32_t IsAllFeaturesDisabled(bool& _0, bool& _1);
		uint32_t IsPairingActive(bool& _0);
		uint32_t IsPlayTimerEnabled(bool& _0);
		uint32_t IsRestrictedByPlayTimer(bool& _0);
		uint32_t IsRestrictedSystemSettingsEntered(bool& _0);
		uint32_t IsRestrictionEnabled(bool& _0);
		uint32_t IsRestrictionTemporaryUnlocked(bool& _0);
		uint32_t LeaveRestrictedSystemSettings();
		uint32_t NotifyApplicationDownloadStarted(nn::ncm::ApplicationId _0);
		uint32_t NotifyWrongPinCodeInputManyTimes();
		uint32_t PostEnableAllFeatures(bool& _0);
		uint32_t RequestPairingAsync(int8_t * _0, unsigned int _0_size, nn::pctl::detail::AsyncData& _1, IpcService*& _2);
		uint32_t RetrievePairingInfoAsync(nn::pctl::detail::AsyncData& _0, IpcService*& _1);
		uint32_t RevertRestrictedSystemSettingsEntered();
		uint32_t RevertRestrictionTemporaryUnlocked();
		uint32_t SetCustomSafetyLevelSettings(nn::pctl::SafetyLevelSettings _0);
		uint32_t SetDefaultRatingOrganization(int32_t _0);
		uint32_t SetPinCode(int8_t * _0, unsigned int _0_size);
		uint32_t SetPlayTimerSettingsForDebug(nn::pctl::PlayTimerSettings _0);
		uint32_t SetSafetyLevel(int32_t _0);
		uint32_t StartPlayTimer();
		uint32_t StopPlayTimer();
		uint32_t SynchronizeParentalControlSettingsAsync(nn::pctl::detail::AsyncData& _0, IpcService*& _1);
		uint32_t UnlinkPairingAsync(bool _0, nn::pctl::detail::AsyncData& _1, IpcService*& _2);
		uint32_t UnlockRestrictionTemporarily(int8_t * _0, unsigned int _0_size);
		uint32_t UnlockSystemSettingsRestriction(int8_t * _0, unsigned int _0_size);
		uint32_t UpdateFreeCommunicationApplicationList(nn::pctl::FreeCommunicationApplicationInfo * _0, unsigned int _0_size);
	};
	class IParentalControlServiceFactory : public IpcService {
	public:
		IParentalControlServiceFactory() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::pctl::detail::ipc::IParentalControlService* temp1;
				ns_print("IPC message to nn::pctl::detail::ipc::IParentalControlServiceFactory::CreateService: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = CreateService(req->GetData<uint64_t>(8), req->pid, temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::pctl::detail::ipc::IParentalControlServiceFactory", req->cmd_id);
			}
		}
		uint32_t CreateService(uint64_t _0, uint64_t _1, nn::pctl::detail::ipc::IParentalControlService*& _2);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::pctl::detail::ipc::IParentalControlService::AddToFreeCommunicationApplicationList(nn::ncm::ApplicationId _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::AddToFreeCommunicationApplicationList\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::AuthorizePairingAsync(nn::pctl::detail::PairingInfoBase _0, nn::pctl::detail::AsyncData& _1, IpcService*& _2) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::AuthorizePairingAsync\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::CancelNetworkRequest() {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::CancelNetworkRequest\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::CheckFreeCommunicationPermission() {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::CheckFreeCommunicationPermission\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::CheckMasterKey(nn::pctl::InquiryCode _0, int8_t * _1, unsigned int _1_size, bool& _2) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::CheckMasterKey\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::ClearFreeCommunicationApplicationListForDebug() {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::ClearFreeCommunicationApplicationListForDebug\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::ClearUnlinkedEvent() {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::ClearUnlinkedEvent\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::ConfirmLaunchApplicationPermission(bool _0, nn::ncm::ApplicationId _1, int8_t * _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::ConfirmLaunchApplicationPermission\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::ConfirmResumeApplicationPermission(bool _0, nn::ncm::ApplicationId _1, int8_t * _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::ConfirmResumeApplicationPermission\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::ConfirmSnsPostPermission() {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::ConfirmSnsPostPermission\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::ConfirmSystemSettingsPermission() {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::ConfirmSystemSettingsPermission\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::DeleteFromFreeCommunicationApplicationListForDebug(nn::ncm::ApplicationId _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::DeleteFromFreeCommunicationApplicationListForDebug\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::DeletePairing() {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::DeletePairing\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::DeleteSettings() {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::DeleteSettings\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::DisableAllFeatures(bool& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::DisableAllFeatures\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::DisableFeaturesForReset() {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::DisableFeaturesForReset\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::EnterRestrictedSystemSettings() {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::EnterRestrictedSystemSettings\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::FinishAuthorizePairing(nn::pctl::detail::AsyncData _0, nn::pctl::detail::PairingInfoBase& _1) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::FinishAuthorizePairing\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::FinishGetAccountMiiImage(nn::pctl::detail::AsyncData _0, uint32_t& _1, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::FinishGetAccountMiiImage\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::FinishGetAccountMiiImageContentType(nn::pctl::detail::AsyncData _0, uint32_t& _1, int8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::FinishGetAccountMiiImageContentType\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::FinishRequestPairing(nn::pctl::detail::AsyncData _0, nn::pctl::detail::PairingInfoBase& _1) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::FinishRequestPairing\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::FinishRetrievePairingInfo(nn::pctl::detail::AsyncData _0, nn::pctl::detail::PairingInfoBase& _1) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::FinishRetrievePairingInfo\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::FinishSynchronizeParentalControlSettings(nn::pctl::detail::AsyncData _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::FinishSynchronizeParentalControlSettings\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::FinishSynchronizeParentalControlSettingsWithLastUpdated(nn::pctl::detail::AsyncData _0, nn::time::PosixTime& _1) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::FinishSynchronizeParentalControlSettingsWithLastUpdated\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::FinishUnlinkPairing(bool _0, nn::pctl::detail::AsyncData _1) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::FinishUnlinkPairing\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GenerateInquiryCode(nn::pctl::InquiryCode& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GenerateInquiryCode\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GetAccountMiiImageAsync(nn::pctl::detail::PairingAccountInfoBase _0, nn::pctl::detail::AsyncData& _1, uint32_t& _2, IpcService*& _3, uint8_t *& _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GetAccountMiiImageAsync\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GetAccountMiiImageContentTypeAsync(nn::pctl::detail::PairingAccountInfoBase _0, nn::pctl::detail::AsyncData& _1, uint32_t& _2, IpcService*& _3, int8_t *& _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GetAccountMiiImageContentTypeAsync\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GetAccountNickname(nn::pctl::detail::PairingAccountInfoBase _0, uint32_t& _1, int8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GetAccountNickname\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GetAccountState(nn::pctl::detail::PairingAccountInfoBase _0, int32_t& _1) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GetAccountState\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GetCurrentSettings(nn::pctl::SafetyLevelSettings& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GetCurrentSettings\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GetDefaultRatingOrganization(int32_t& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GetDefaultRatingOrganization\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GetFreeCommunicationApplicationList(int32_t _0, int32_t& _1, nn::pctl::FreeCommunicationApplicationInfo *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GetFreeCommunicationApplicationList\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GetFreeCommunicationApplicationListCount(int32_t& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GetFreeCommunicationApplicationListCount\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GetPairingAccountInfo(nn::pctl::detail::PairingInfoBase _0, nn::pctl::detail::PairingAccountInfoBase& _1) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GetPairingAccountInfo\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GetPinCodeChangedEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GetPinCodeChangedEvent\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GetPinCodeLength(int32_t& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GetPinCodeLength\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GetPlayTimerEventToRequestSuspension(IpcService*& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GetPlayTimerEventToRequestSuspension\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GetPlayTimerRemainingTime(nn::TimeSpanType& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GetPlayTimerRemainingTime\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GetPlayTimerSettings(nn::pctl::PlayTimerSettings& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GetPlayTimerSettings\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GetPlayTimerSpentTimeForTest(nn::TimeSpanType& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GetPlayTimerSpentTimeForTest\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GetRestrictedFeatures(int32_t& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GetRestrictedFeatures\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GetSafetyLevel(int32_t& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GetSafetyLevel\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GetSafetyLevelSettings(int32_t _0, nn::pctl::SafetyLevelSettings& _1) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GetSafetyLevelSettings\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GetSettingsLastUpdated(nn::time::PosixTime& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GetSettingsLastUpdated\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GetSynchronizationEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GetSynchronizationEvent\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::GetUnlinkedEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::GetUnlinkedEvent\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::IsAllFeaturesDisabled(bool& _0, bool& _1) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::IsAllFeaturesDisabled\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::IsPairingActive(bool& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::IsPairingActive\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::IsPlayTimerEnabled(bool& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::IsPlayTimerEnabled\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::IsRestrictedByPlayTimer(bool& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::IsRestrictedByPlayTimer\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::IsRestrictedSystemSettingsEntered(bool& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::IsRestrictedSystemSettingsEntered\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::IsRestrictionEnabled(bool& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::IsRestrictionEnabled\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::IsRestrictionTemporaryUnlocked(bool& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::IsRestrictionTemporaryUnlocked\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::LeaveRestrictedSystemSettings() {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::LeaveRestrictedSystemSettings\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::NotifyApplicationDownloadStarted(nn::ncm::ApplicationId _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::NotifyApplicationDownloadStarted\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::NotifyWrongPinCodeInputManyTimes() {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::NotifyWrongPinCodeInputManyTimes\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::PostEnableAllFeatures(bool& _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::PostEnableAllFeatures\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::RequestPairingAsync(int8_t * _0, unsigned int _0_size, nn::pctl::detail::AsyncData& _1, IpcService*& _2) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::RequestPairingAsync\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::RetrievePairingInfoAsync(nn::pctl::detail::AsyncData& _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::RetrievePairingInfoAsync\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::RevertRestrictedSystemSettingsEntered() {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::RevertRestrictedSystemSettingsEntered\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::RevertRestrictionTemporaryUnlocked() {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::RevertRestrictionTemporaryUnlocked\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::SetCustomSafetyLevelSettings(nn::pctl::SafetyLevelSettings _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::SetCustomSafetyLevelSettings\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::SetDefaultRatingOrganization(int32_t _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::SetDefaultRatingOrganization\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::SetPinCode(int8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::SetPinCode\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::SetPlayTimerSettingsForDebug(nn::pctl::PlayTimerSettings _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::SetPlayTimerSettingsForDebug\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::SetSafetyLevel(int32_t _0) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::SetSafetyLevel\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::StartPlayTimer() {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::StartPlayTimer\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::StopPlayTimer() {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::StopPlayTimer\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::SynchronizeParentalControlSettingsAsync(nn::pctl::detail::AsyncData& _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::SynchronizeParentalControlSettingsAsync\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::UnlinkPairingAsync(bool _0, nn::pctl::detail::AsyncData& _1, IpcService*& _2) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::UnlinkPairingAsync\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::UnlockRestrictionTemporarily(int8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::UnlockRestrictionTemporarily\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::UnlockSystemSettingsRestriction(int8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::UnlockSystemSettingsRestriction\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlService::UpdateFreeCommunicationApplicationList(nn::pctl::FreeCommunicationApplicationInfo * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlService::UpdateFreeCommunicationApplicationList\n");
	return 0;
}
uint32_t nn::pctl::detail::ipc::IParentalControlServiceFactory::CreateService(uint64_t _0, uint64_t _1, nn::pctl::detail::ipc::IParentalControlService*& _2) {
	ns_print("Stub implementation for nn::pctl::detail::ipc::IParentalControlServiceFactory::CreateService\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::pcv {
	class IArbitrationManager : public IpcService {
	public:
		IArbitrationManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcv::IArbitrationManager::ReleaseControl: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = ReleaseControl(req->GetData<int32_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::pcv::IArbitrationManager", req->cmd_id);
			}
		}
		uint32_t ReleaseControl(int32_t _0);
	};
	class IImmediateManager : public IpcService {
	public:
		IImmediateManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcv::IImmediateManager::SetClockRate: int32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<int32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = SetClockRate(req->GetData<int32_t>(8), req->GetData<uint32_t>(0xc));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::pcv::IImmediateManager", req->cmd_id);
			}
		}
		uint32_t SetClockRate(int32_t _0, uint32_t _1);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::pcv::IArbitrationManager::ReleaseControl(int32_t _0) {
	ns_print("Stub implementation for nn::pcv::IArbitrationManager::ReleaseControl\n");
	return 0;
}
uint32_t nn::pcv::IImmediateManager::SetClockRate(int32_t _0, uint32_t _1) {
	ns_print("Stub implementation for nn::pcv::IImmediateManager::SetClockRate\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::pcv::detail {
	class IPcvService : public IpcService {
	public:
		IPcvService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcv::detail::IPcvService::SetPowerEnabled: bool = 0x%x, int32_t = 0x%x\n", req->GetData<bool>(8), req->GetData<int32_t>(0xc));
				resp->error_code = SetPowerEnabled(req->GetData<bool>(8), req->GetData<int32_t>(0xc));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcv::detail::IPcvService::SetClockEnabled: bool = 0x%x, int32_t = 0x%x\n", req->GetData<bool>(8), req->GetData<int32_t>(0xc));
				resp->error_code = SetClockEnabled(req->GetData<bool>(8), req->GetData<int32_t>(0xc));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcv::detail::IPcvService::SetClockRate: int32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<int32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = SetClockRate(req->GetData<int32_t>(8), req->GetData<uint32_t>(0xc));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::pcv::detail::IPcvService::GetClockRate: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = GetClockRate(req->GetData<int32_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 12);
				auto temp1 = resp->GetDataPointer<nn::pcv::ModuleState>(8);
				ns_print("IPC message to nn::pcv::detail::IPcvService::GetState: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = GetState(req->GetData<int32_t>(8), temp1);
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				uint32_t* temp3 = (uint32_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::pcv::detail::IPcvService::GetPossibleClockRates: int32_t = 0x%x, int32_t = 0x%x\n", req->GetData<int32_t>(8), req->GetData<int32_t>(0xc));
				resp->error_code = GetPossibleClockRates(req->GetData<int32_t>(8), req->GetData<int32_t>(0xc), *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<int32_t *>(0xc), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcv::detail::IPcvService::SetMinVClockRate: int32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<int32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = SetMinVClockRate(req->GetData<int32_t>(8), req->GetData<uint32_t>(0xc));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcv::detail::IPcvService::SetReset: bool = 0x%x, int32_t = 0x%x\n", req->GetData<bool>(8), req->GetData<int32_t>(0xc));
				resp->error_code = SetReset(req->GetData<bool>(8), req->GetData<int32_t>(0xc));
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcv::detail::IPcvService::SetVoltageEnabled: bool = 0x%x, int32_t = 0x%x\n", req->GetData<bool>(8), req->GetData<int32_t>(0xc));
				resp->error_code = SetVoltageEnabled(req->GetData<bool>(8), req->GetData<int32_t>(0xc));
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::pcv::detail::IPcvService::GetVoltageEnabled: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = GetVoltageEnabled(req->GetData<int32_t>(8), *resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 12);
				ns_print("IPC message to nn::pcv::detail::IPcvService::GetVoltageRange: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = GetVoltageRange(req->GetData<int32_t>(8), *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<int32_t *>(0xc), *resp->GetDataPointer<int32_t *>(0x10));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcv::detail::IPcvService::SetVoltageValue: int32_t = 0x%x, int32_t = 0x%x\n", req->GetData<int32_t>(8), req->GetData<int32_t>(0xc));
				resp->error_code = SetVoltageValue(req->GetData<int32_t>(8), req->GetData<int32_t>(0xc));
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::pcv::detail::IPcvService::GetVoltageValue: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = GetVoltageValue(req->GetData<int32_t>(8), *resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::pcv::TemperatureThreshold* temp3 = (nn::pcv::TemperatureThreshold *) new uint8_t[temp2];
				ns_print("IPC message to nn::pcv::detail::IPcvService::GetTemperatureThresholds: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = GetTemperatureThresholds(req->GetData<int32_t>(8), *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcv::detail::IPcvService::SetTemperature: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = SetTemperature(req->GetData<int32_t>(8));
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcv::detail::IPcvService::Initialize\n");
				resp->error_code = Initialize();
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::pcv::detail::IPcvService::IsInitialized\n");
				resp->error_code = IsInitialized(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcv::detail::IPcvService::Finalize\n");
				resp->error_code = Finalize();
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcv::detail::IPcvService::PowerOn: nn::pcv::PowerControlTarget = 0x%x, int32_t = 0x%x\n", req->GetData<nn::pcv::PowerControlTarget>(8), req->GetData<int32_t>(0xc));
				resp->error_code = PowerOn(req->GetData<nn::pcv::PowerControlTarget>(8), req->GetData<int32_t>(0xc));
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcv::detail::IPcvService::PowerOff: nn::pcv::PowerControlTarget = 0x%x\n", req->GetData<nn::pcv::PowerControlTarget>(8));
				resp->error_code = PowerOff(req->GetData<nn::pcv::PowerControlTarget>(8));
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pcv::detail::IPcvService::ChangeVoltage: nn::pcv::PowerControlTarget = 0x%x, int32_t = 0x%x\n", req->GetData<nn::pcv::PowerControlTarget>(8), req->GetData<int32_t>(0xc));
				resp->error_code = ChangeVoltage(req->GetData<nn::pcv::PowerControlTarget>(8), req->GetData<int32_t>(0xc));
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::pcv::detail::IPcvService::GetPowerClockInfoEvent\n");
				resp->error_code = GetPowerClockInfoEvent(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::pcv::detail::IPcvService::GetOscillatorClock\n");
				resp->error_code = GetOscillatorClock(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				uint32_t* temp3 = (uint32_t *) new uint8_t[temp2];
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0xa, 1, temp5);
				int32_t* temp6 = (int32_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::pcv::detail::IPcvService::GetDvfsTable: int32_t = 0x%x, int32_t = 0x%x\n", req->GetData<int32_t>(8), req->GetData<int32_t>(0xc));
				resp->error_code = GetDvfsTable(req->GetData<int32_t>(8), req->GetData<int32_t>(0xc), *resp->GetDataPointer<int32_t *>(8), temp3, temp2, temp6, temp5);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 24: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::pcv::ModuleState* temp3 = (nn::pcv::ModuleState *) new uint8_t[temp2];
				ns_print("IPC message to nn::pcv::detail::IPcvService::GetModuleStateTable: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = GetModuleStateTable(req->GetData<int32_t>(8), *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 25: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::pcv::PowerDomainState* temp3 = (nn::pcv::PowerDomainState *) new uint8_t[temp2];
				ns_print("IPC message to nn::pcv::detail::IPcvService::GetPowerDomainStateTable: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = GetPowerDomainStateTable(req->GetData<int32_t>(8), *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 26: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				uint32_t* temp3 = (uint32_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::pcv::detail::IPcvService::GetFuseInfo: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = GetFuseInfo(req->GetData<int32_t>(8), *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::pcv::detail::IPcvService", req->cmd_id);
			}
		}
		uint32_t ChangeVoltage(nn::pcv::PowerControlTarget _0, int32_t _1);
		uint32_t Finalize();
		uint32_t GetClockRate(int32_t _0, uint32_t& _1);
		uint32_t GetDvfsTable(int32_t _0, int32_t _1, int32_t& _2, uint32_t *& _3, unsigned int _3_size, int32_t *& _4, unsigned int _4_size);
		uint32_t GetFuseInfo(int32_t _0, int32_t& _1, uint32_t *& _2, unsigned int _2_size);
		uint32_t GetModuleStateTable(int32_t _0, int32_t& _1, nn::pcv::ModuleState *& _2, unsigned int _2_size);
		uint32_t GetOscillatorClock(uint32_t& _0);
		uint32_t GetPossibleClockRates(int32_t _0, int32_t _1, int32_t& _2, int32_t& _3, uint32_t *& _4, unsigned int _4_size);
		uint32_t GetPowerClockInfoEvent(IpcService*& _0);
		uint32_t GetPowerDomainStateTable(int32_t _0, int32_t& _1, nn::pcv::PowerDomainState *& _2, unsigned int _2_size);
		uint32_t GetState(int32_t _0, nn::pcv::ModuleState& _1);
		uint32_t GetTemperatureThresholds(int32_t _0, int32_t& _1, nn::pcv::TemperatureThreshold *& _2, unsigned int _2_size);
		uint32_t GetVoltageEnabled(int32_t _0, bool& _1);
		uint32_t GetVoltageRange(int32_t _0, int32_t& _1, int32_t& _2, int32_t& _3);
		uint32_t GetVoltageValue(int32_t _0, int32_t& _1);
		uint32_t Initialize();
		uint32_t IsInitialized(bool& _0);
		uint32_t PowerOff(nn::pcv::PowerControlTarget _0);
		uint32_t PowerOn(nn::pcv::PowerControlTarget _0, int32_t _1);
		uint32_t SetClockEnabled(bool _0, int32_t _1);
		uint32_t SetClockRate(int32_t _0, uint32_t _1);
		uint32_t SetMinVClockRate(int32_t _0, uint32_t _1);
		uint32_t SetPowerEnabled(bool _0, int32_t _1);
		uint32_t SetReset(bool _0, int32_t _1);
		uint32_t SetTemperature(int32_t _0);
		uint32_t SetVoltageEnabled(bool _0, int32_t _1);
		uint32_t SetVoltageValue(int32_t _0, int32_t _1);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::pcv::detail::IPcvService::ChangeVoltage(nn::pcv::PowerControlTarget _0, int32_t _1) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::ChangeVoltage\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::Finalize() {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::Finalize\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::GetClockRate(int32_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::GetClockRate\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::GetDvfsTable(int32_t _0, int32_t _1, int32_t& _2, uint32_t *& _3, unsigned int _3_size, int32_t *& _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::GetDvfsTable\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::GetFuseInfo(int32_t _0, int32_t& _1, uint32_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::GetFuseInfo\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::GetModuleStateTable(int32_t _0, int32_t& _1, nn::pcv::ModuleState *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::GetModuleStateTable\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::GetOscillatorClock(uint32_t& _0) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::GetOscillatorClock\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::GetPossibleClockRates(int32_t _0, int32_t _1, int32_t& _2, int32_t& _3, uint32_t *& _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::GetPossibleClockRates\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::GetPowerClockInfoEvent(IpcService*& _0) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::GetPowerClockInfoEvent\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::GetPowerDomainStateTable(int32_t _0, int32_t& _1, nn::pcv::PowerDomainState *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::GetPowerDomainStateTable\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::GetState(int32_t _0, nn::pcv::ModuleState& _1) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::GetState\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::GetTemperatureThresholds(int32_t _0, int32_t& _1, nn::pcv::TemperatureThreshold *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::GetTemperatureThresholds\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::GetVoltageEnabled(int32_t _0, bool& _1) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::GetVoltageEnabled\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::GetVoltageRange(int32_t _0, int32_t& _1, int32_t& _2, int32_t& _3) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::GetVoltageRange\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::GetVoltageValue(int32_t _0, int32_t& _1) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::GetVoltageValue\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::Initialize() {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::Initialize\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::IsInitialized(bool& _0) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::IsInitialized\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::PowerOff(nn::pcv::PowerControlTarget _0) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::PowerOff\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::PowerOn(nn::pcv::PowerControlTarget _0, int32_t _1) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::PowerOn\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::SetClockEnabled(bool _0, int32_t _1) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::SetClockEnabled\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::SetClockRate(int32_t _0, uint32_t _1) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::SetClockRate\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::SetMinVClockRate(int32_t _0, uint32_t _1) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::SetMinVClockRate\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::SetPowerEnabled(bool _0, int32_t _1) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::SetPowerEnabled\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::SetReset(bool _0, int32_t _1) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::SetReset\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::SetTemperature(int32_t _0) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::SetTemperature\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::SetVoltageEnabled(bool _0, int32_t _1) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::SetVoltageEnabled\n");
	return 0;
}
uint32_t nn::pcv::detail::IPcvService::SetVoltageValue(int32_t _0, int32_t _1) {
	ns_print("Stub implementation for nn::pcv::detail::IPcvService::SetVoltageValue\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::pdm::detail {
	class INotifyService : public IpcService {
	public:
		INotifyService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pdm::detail::INotifyService::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pdm::detail::INotifyService::Unknown2: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown2(req->GetData<uint8_t>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pdm::detail::INotifyService::Unknown3: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown3(req->GetData<uint8_t>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pdm::detail::INotifyService::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::pdm::detail::INotifyService::Unknown5: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown5(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::pdm::detail::INotifyService", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown2(uint8_t _0);
		uint32_t Unknown3(uint8_t _0);
		uint32_t Unknown4();
		uint32_t Unknown5(uint8_t * _0, unsigned int _0_size);
	};
	class IQueryService : public IpcService {
	public:
		IQueryService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pdm::detail::IQueryService::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::pdm::detail::IQueryService::Unknown1\n");
				resp->error_code = Unknown1(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pdm::detail::IQueryService::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pdm::detail::IQueryService::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pdm::detail::IQueryService::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pdm::detail::IQueryService::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pdm::detail::IQueryService::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pdm::detail::IQueryService::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pdm::detail::IQueryService::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pdm::detail::IQueryService::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pdm::detail::IQueryService::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::pdm::detail::IQueryService", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Unknown10();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6();
		uint32_t Unknown7();
		uint32_t Unknown8();
		uint32_t Unknown9();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::pdm::detail::INotifyService::Unknown0() {
	ns_print("Stub implementation for nn::pdm::detail::INotifyService::Unknown0\n");
	return 0;
}
uint32_t nn::pdm::detail::INotifyService::Unknown2(uint8_t _0) {
	ns_print("Stub implementation for nn::pdm::detail::INotifyService::Unknown2\n");
	return 0;
}
uint32_t nn::pdm::detail::INotifyService::Unknown3(uint8_t _0) {
	ns_print("Stub implementation for nn::pdm::detail::INotifyService::Unknown3\n");
	return 0;
}
uint32_t nn::pdm::detail::INotifyService::Unknown4() {
	ns_print("Stub implementation for nn::pdm::detail::INotifyService::Unknown4\n");
	return 0;
}
uint32_t nn::pdm::detail::INotifyService::Unknown5(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::pdm::detail::INotifyService::Unknown5\n");
	return 0;
}
uint32_t nn::pdm::detail::IQueryService::Unknown0() {
	ns_print("Stub implementation for nn::pdm::detail::IQueryService::Unknown0\n");
	return 0;
}
uint32_t nn::pdm::detail::IQueryService::Unknown1(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::pdm::detail::IQueryService::Unknown1\n");
	return 0;
}
uint32_t nn::pdm::detail::IQueryService::Unknown10() {
	ns_print("Stub implementation for nn::pdm::detail::IQueryService::Unknown10\n");
	return 0;
}
uint32_t nn::pdm::detail::IQueryService::Unknown2() {
	ns_print("Stub implementation for nn::pdm::detail::IQueryService::Unknown2\n");
	return 0;
}
uint32_t nn::pdm::detail::IQueryService::Unknown3() {
	ns_print("Stub implementation for nn::pdm::detail::IQueryService::Unknown3\n");
	return 0;
}
uint32_t nn::pdm::detail::IQueryService::Unknown4() {
	ns_print("Stub implementation for nn::pdm::detail::IQueryService::Unknown4\n");
	return 0;
}
uint32_t nn::pdm::detail::IQueryService::Unknown5() {
	ns_print("Stub implementation for nn::pdm::detail::IQueryService::Unknown5\n");
	return 0;
}
uint32_t nn::pdm::detail::IQueryService::Unknown6() {
	ns_print("Stub implementation for nn::pdm::detail::IQueryService::Unknown6\n");
	return 0;
}
uint32_t nn::pdm::detail::IQueryService::Unknown7() {
	ns_print("Stub implementation for nn::pdm::detail::IQueryService::Unknown7\n");
	return 0;
}
uint32_t nn::pdm::detail::IQueryService::Unknown8() {
	ns_print("Stub implementation for nn::pdm::detail::IQueryService::Unknown8\n");
	return 0;
}
uint32_t nn::pdm::detail::IQueryService::Unknown9() {
	ns_print("Stub implementation for nn::pdm::detail::IQueryService::Unknown9\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::pinmux {
	class IManager : public IpcService {
	public:
		IManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::pinmux::IManager::Unknown0: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown0(req->GetData<uint32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::pinmux::IManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t _0, IUnknown*& _1);
	};
	class ISession : public IpcService {
	public:
		ISession() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pinmux::ISession::Unknown0: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown0(req->GetData<uint32_t>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::pinmux::ISession::Unknown1\n");
				resp->error_code = Unknown1(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pinmux::ISession::Unknown2: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown2(req->GetData<uint32_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::pinmux::ISession", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t _0);
		uint32_t Unknown1(uint32_t& _0);
		uint32_t Unknown2(uint32_t _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::pinmux::IManager::Unknown0(uint32_t _0, IUnknown*& _1) {
	ns_print("Stub implementation for nn::pinmux::IManager::Unknown0\n");
	return 0;
}
uint32_t nn::pinmux::ISession::Unknown0(uint32_t _0) {
	ns_print("Stub implementation for nn::pinmux::ISession::Unknown0\n");
	return 0;
}
uint32_t nn::pinmux::ISession::Unknown1(uint32_t& _0) {
	ns_print("Stub implementation for nn::pinmux::ISession::Unknown1\n");
	return 0;
}
uint32_t nn::pinmux::ISession::Unknown2(uint32_t _0) {
	ns_print("Stub implementation for nn::pinmux::ISession::Unknown2\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::pl::detail {
	class ISharedFontManager : public IpcService {
	public:
		ISharedFontManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pl::detail::ISharedFontManager::Unknown0: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown0(req->GetData<uint32_t>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::pl::detail::ISharedFontManager::Unknown1: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown1(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::pl::detail::ISharedFontManager::Unknown2: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown2(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::pl::detail::ISharedFontManager::Unknown3: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown3(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::pl::detail::ISharedFontManager::Unknown4\n");
				resp->error_code = Unknown4(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 1, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				unsigned int temp8;
				auto temp7 = req->GetBuffer(6, 2, temp8);
				uint8_t* temp9 = (uint8_t *) new uint8_t[temp8];
				ns_print("IPC message to nn::pl::detail::ISharedFontManager::Unknown5: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown5(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint8_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), temp3, temp2, temp6, temp5, temp9, temp8);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				ARMv8::WriteBytes(temp7, (uint8_t *) temp9, temp8);
				delete[] (uint8_t *)temp9;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::pl::detail::ISharedFontManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t _0);
		uint32_t Unknown1(uint32_t _0, uint32_t& _1);
		uint32_t Unknown2(uint32_t _0, uint32_t& _1);
		uint32_t Unknown3(uint32_t _0, uint32_t& _1);
		uint32_t Unknown4(IpcService*& _0);
		uint32_t Unknown5(uint64_t _0, uint8_t& _1, uint32_t& _2, uint8_t *& _3, unsigned int _3_size, uint8_t *& _4, unsigned int _4_size, uint8_t *& _5, unsigned int _5_size);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::pl::detail::ISharedFontManager::Unknown0(uint32_t _0) {
	ns_print("Stub implementation for nn::pl::detail::ISharedFontManager::Unknown0\n");
	return 0;
}
uint32_t nn::pl::detail::ISharedFontManager::Unknown1(uint32_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::pl::detail::ISharedFontManager::Unknown1\n");
	return 0;
}
uint32_t nn::pl::detail::ISharedFontManager::Unknown2(uint32_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::pl::detail::ISharedFontManager::Unknown2\n");
	return 0;
}
uint32_t nn::pl::detail::ISharedFontManager::Unknown3(uint32_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::pl::detail::ISharedFontManager::Unknown3\n");
	return 0;
}
uint32_t nn::pl::detail::ISharedFontManager::Unknown4(IpcService*& _0) {
	ns_print("Stub implementation for nn::pl::detail::ISharedFontManager::Unknown4\n");
	return 0;
}
uint32_t nn::pl::detail::ISharedFontManager::Unknown5(uint64_t _0, uint8_t& _1, uint32_t& _2, uint8_t *& _3, unsigned int _3_size, uint8_t *& _4, unsigned int _4_size, uint8_t *& _5, unsigned int _5_size) {
	ns_print("Stub implementation for nn::pl::detail::ISharedFontManager::Unknown5\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::pm::detail {
	class IBootModeInterface : public IpcService {
	public:
		IBootModeInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::pm::detail::IBootModeInterface::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pm::detail::IBootModeInterface::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::pm::detail::IBootModeInterface", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t& _0);
		uint32_t Unknown1();
	};
	class IInformationInterface : public IpcService {
	public:
		IInformationInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::pm::detail::IInformationInterface::Unknown0: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown0(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::pm::detail::IInformationInterface", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0, uint64_t& _1);
	};
	class IShellInterface : public IpcService {
	public:
		IShellInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pm::detail::IShellInterface::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pm::detail::IShellInterface::Unknown1: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown1(req->GetData<uint64_t>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pm::detail::IShellInterface::Unknown2: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown2(req->GetData<uint64_t>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::pm::detail::IShellInterface::Unknown3\n");
				resp->error_code = Unknown3(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::pm::detail::IShellInterface::Unknown4\n");
				resp->error_code = Unknown4(*resp->GetDataPointer<uint128_t *>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pm::detail::IShellInterface::Unknown5: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown5(req->GetData<uint64_t>(8));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pm::detail::IShellInterface::Unknown6: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown6(req->GetData<uint64_t>(8));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pm::detail::IShellInterface::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::pm::detail::IShellInterface::Unknown8\n");
				resp->error_code = Unknown8(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::pm::detail::IShellInterface", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1(uint64_t _0);
		uint32_t Unknown2(uint64_t _0);
		uint32_t Unknown3(IpcService*& _0);
		uint32_t Unknown4(uint128_t& _0);
		uint32_t Unknown5(uint64_t _0);
		uint32_t Unknown6(uint64_t _0);
		uint32_t Unknown7();
		uint32_t Unknown8(uint64_t& _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::pm::detail::IBootModeInterface::Unknown0(uint32_t& _0) {
	ns_print("Stub implementation for nn::pm::detail::IBootModeInterface::Unknown0\n");
	return 0;
}
uint32_t nn::pm::detail::IBootModeInterface::Unknown1() {
	ns_print("Stub implementation for nn::pm::detail::IBootModeInterface::Unknown1\n");
	return 0;
}
uint32_t nn::pm::detail::IInformationInterface::Unknown0(uint64_t _0, uint64_t& _1) {
	ns_print("Stub implementation for nn::pm::detail::IInformationInterface::Unknown0\n");
	return 0;
}
uint32_t nn::pm::detail::IShellInterface::Unknown0() {
	ns_print("Stub implementation for nn::pm::detail::IShellInterface::Unknown0\n");
	return 0;
}
uint32_t nn::pm::detail::IShellInterface::Unknown1(uint64_t _0) {
	ns_print("Stub implementation for nn::pm::detail::IShellInterface::Unknown1\n");
	return 0;
}
uint32_t nn::pm::detail::IShellInterface::Unknown2(uint64_t _0) {
	ns_print("Stub implementation for nn::pm::detail::IShellInterface::Unknown2\n");
	return 0;
}
uint32_t nn::pm::detail::IShellInterface::Unknown3(IpcService*& _0) {
	ns_print("Stub implementation for nn::pm::detail::IShellInterface::Unknown3\n");
	return 0;
}
uint32_t nn::pm::detail::IShellInterface::Unknown4(uint128_t& _0) {
	ns_print("Stub implementation for nn::pm::detail::IShellInterface::Unknown4\n");
	return 0;
}
uint32_t nn::pm::detail::IShellInterface::Unknown5(uint64_t _0) {
	ns_print("Stub implementation for nn::pm::detail::IShellInterface::Unknown5\n");
	return 0;
}
uint32_t nn::pm::detail::IShellInterface::Unknown6(uint64_t _0) {
	ns_print("Stub implementation for nn::pm::detail::IShellInterface::Unknown6\n");
	return 0;
}
uint32_t nn::pm::detail::IShellInterface::Unknown7() {
	ns_print("Stub implementation for nn::pm::detail::IShellInterface::Unknown7\n");
	return 0;
}
uint32_t nn::pm::detail::IShellInterface::Unknown8(uint64_t& _0) {
	ns_print("Stub implementation for nn::pm::detail::IShellInterface::Unknown8\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::prepo::detail::ipc {
	class IPrepoService : public IpcService {
	public:
		IPrepoService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 10100: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(5, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				ns_print("IPC message to nn::prepo::detail::ipc::IPrepoService::SaveReport: uint64_t = 0x%%lx, int8_t *= buffer<0x%lx>, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), temp2, temp5);
				resp->error_code = SaveReport(req->GetData<uint64_t>(8), req->pid, temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				return 0;
			}
			case 10101: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(5, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				ns_print("IPC message to nn::prepo::detail::ipc::IPrepoService::SaveReportWithUser: nn::account::Uid = %s, uint64_t = 0x%%lx, int8_t *= buffer<0x%lx>, uint8_t *= buffer<0x%lx>\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<uint64_t>(0x18), temp2, temp5);
				resp->error_code = SaveReportWithUser(req->GetData<nn::account::Uid>(8), req->GetData<uint64_t>(0x18), req->pid, temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				return 0;
			}
			case 10200: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::prepo::detail::ipc::IPrepoService::RequestImmediateTransmission\n");
				resp->error_code = RequestImmediateTransmission();
				return 0;
			}
			case 10300: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::prepo::detail::ipc::IPrepoService::GetTransmissionStatus\n");
				resp->error_code = GetTransmissionStatus(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 20100: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(5, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				ns_print("IPC message to nn::prepo::detail::ipc::IPrepoService::SaveSystemReport: nn::ApplicationId = 0x%%lx, int8_t *= buffer<0x%lx>, uint8_t *= buffer<0x%lx>\n", req->GetData<nn::ApplicationId>(8), temp2, temp5);
				resp->error_code = SaveSystemReport(req->GetData<nn::ApplicationId>(8), temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				return 0;
			}
			case 20101: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(9, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(5, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				ns_print("IPC message to nn::prepo::detail::ipc::IPrepoService::SaveSystemReportWithUser: nn::account::Uid = %s, nn::ApplicationId = 0x%%lx, int8_t *= buffer<0x%lx>, uint8_t *= buffer<0x%lx>\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str(), req->GetData<nn::ApplicationId>(0x18), temp2, temp5);
				resp->error_code = SaveSystemReportWithUser(req->GetData<nn::account::Uid>(8), req->GetData<nn::ApplicationId>(0x18), temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				return 0;
			}
			case 30100: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::prepo::detail::ipc::IPrepoService::ClearStorage\n");
				resp->error_code = ClearStorage();
				return 0;
			}
			case 40100: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::prepo::detail::ipc::IPrepoService::IsUserAgreementCheckEnabled\n");
				resp->error_code = IsUserAgreementCheckEnabled(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 40101: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::prepo::detail::ipc::IPrepoService::SetUserAgreementCheckEnabled: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetUserAgreementCheckEnabled(req->GetData<bool>(8));
				return 0;
			}
			case 90100: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::prepo::detail::ipc::IPrepoService::GetStorageUsage\n");
				resp->error_code = GetStorageUsage(*resp->GetDataPointer<int64_t *>(8), *resp->GetDataPointer<int64_t *>(0x10));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::prepo::detail::ipc::IPrepoService", req->cmd_id);
			}
		}
		uint32_t ClearStorage();
		uint32_t GetStorageUsage(int64_t& _0, int64_t& _1);
		uint32_t GetTransmissionStatus(int32_t& _0);
		uint32_t IsUserAgreementCheckEnabled(bool& _0);
		uint32_t RequestImmediateTransmission();
		uint32_t SaveReport(uint64_t _0, uint64_t _1, int8_t * _2, unsigned int _2_size, uint8_t * _3, unsigned int _3_size);
		uint32_t SaveReportWithUser(nn::account::Uid _0, uint64_t _1, uint64_t _2, int8_t * _3, unsigned int _3_size, uint8_t * _4, unsigned int _4_size);
		uint32_t SaveSystemReport(nn::ApplicationId _0, int8_t * _1, unsigned int _1_size, uint8_t * _2, unsigned int _2_size);
		uint32_t SaveSystemReportWithUser(nn::account::Uid _0, nn::ApplicationId _1, int8_t * _2, unsigned int _2_size, uint8_t * _3, unsigned int _3_size);
		uint32_t SetUserAgreementCheckEnabled(bool _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::prepo::detail::ipc::IPrepoService::ClearStorage() {
	ns_print("Stub implementation for nn::prepo::detail::ipc::IPrepoService::ClearStorage\n");
	return 0;
}
uint32_t nn::prepo::detail::ipc::IPrepoService::GetStorageUsage(int64_t& _0, int64_t& _1) {
	ns_print("Stub implementation for nn::prepo::detail::ipc::IPrepoService::GetStorageUsage\n");
	return 0;
}
uint32_t nn::prepo::detail::ipc::IPrepoService::GetTransmissionStatus(int32_t& _0) {
	ns_print("Stub implementation for nn::prepo::detail::ipc::IPrepoService::GetTransmissionStatus\n");
	return 0;
}
uint32_t nn::prepo::detail::ipc::IPrepoService::IsUserAgreementCheckEnabled(bool& _0) {
	ns_print("Stub implementation for nn::prepo::detail::ipc::IPrepoService::IsUserAgreementCheckEnabled\n");
	return 0;
}
uint32_t nn::prepo::detail::ipc::IPrepoService::RequestImmediateTransmission() {
	ns_print("Stub implementation for nn::prepo::detail::ipc::IPrepoService::RequestImmediateTransmission\n");
	return 0;
}
uint32_t nn::prepo::detail::ipc::IPrepoService::SaveReport(uint64_t _0, uint64_t _1, int8_t * _2, unsigned int _2_size, uint8_t * _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::prepo::detail::ipc::IPrepoService::SaveReport\n");
	return 0;
}
uint32_t nn::prepo::detail::ipc::IPrepoService::SaveReportWithUser(nn::account::Uid _0, uint64_t _1, uint64_t _2, int8_t * _3, unsigned int _3_size, uint8_t * _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::prepo::detail::ipc::IPrepoService::SaveReportWithUser\n");
	return 0;
}
uint32_t nn::prepo::detail::ipc::IPrepoService::SaveSystemReport(nn::ApplicationId _0, int8_t * _1, unsigned int _1_size, uint8_t * _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::prepo::detail::ipc::IPrepoService::SaveSystemReport\n");
	return 0;
}
uint32_t nn::prepo::detail::ipc::IPrepoService::SaveSystemReportWithUser(nn::account::Uid _0, nn::ApplicationId _1, int8_t * _2, unsigned int _2_size, uint8_t * _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::prepo::detail::ipc::IPrepoService::SaveSystemReportWithUser\n");
	return 0;
}
uint32_t nn::prepo::detail::ipc::IPrepoService::SetUserAgreementCheckEnabled(bool _0) {
	ns_print("Stub implementation for nn::prepo::detail::ipc::IPrepoService::SetUserAgreementCheckEnabled\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::psc::sf {
	class IPmControl : public IpcService {
	public:
		IPmControl() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::psc::sf::IPmControl::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psc::sf::IPmControl::Unknown1: uint32_t = 0x%x, uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10));
				resp->error_code = Unknown1(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psc::sf::IPmControl::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::psc::sf::IPmControl::Unknown3\n");
				resp->error_code = Unknown3(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psc::sf::IPmControl::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psc::sf::IPmControl::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psc::sf::IPmControl::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::psc::sf::IPmControl", req->cmd_id);
			}
		}
		uint32_t Unknown0(IpcService*& _0);
		uint32_t Unknown1(uint32_t _0, uint32_t _1, uint32_t _2);
		uint32_t Unknown2();
		uint32_t Unknown3(uint32_t& _0);
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6();
	};
	class IPmModule : public IpcService {
	public:
		IPmModule() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psc::sf::IPmModule::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psc::sf::IPmModule::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psc::sf::IPmModule::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psc::sf::IPmModule::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::psc::sf::IPmModule", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3();
	};
	class IPmService : public IpcService {
	public:
		IPmService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::psc::sf::IPmService::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::psc::sf::IPmService", req->cmd_id);
			}
		}
		uint32_t Unknown0(IUnknown*& _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::psc::sf::IPmControl::Unknown0(IpcService*& _0) {
	ns_print("Stub implementation for nn::psc::sf::IPmControl::Unknown0\n");
	return 0;
}
uint32_t nn::psc::sf::IPmControl::Unknown1(uint32_t _0, uint32_t _1, uint32_t _2) {
	ns_print("Stub implementation for nn::psc::sf::IPmControl::Unknown1\n");
	return 0;
}
uint32_t nn::psc::sf::IPmControl::Unknown2() {
	ns_print("Stub implementation for nn::psc::sf::IPmControl::Unknown2\n");
	return 0;
}
uint32_t nn::psc::sf::IPmControl::Unknown3(uint32_t& _0) {
	ns_print("Stub implementation for nn::psc::sf::IPmControl::Unknown3\n");
	return 0;
}
uint32_t nn::psc::sf::IPmControl::Unknown4() {
	ns_print("Stub implementation for nn::psc::sf::IPmControl::Unknown4\n");
	return 0;
}
uint32_t nn::psc::sf::IPmControl::Unknown5() {
	ns_print("Stub implementation for nn::psc::sf::IPmControl::Unknown5\n");
	return 0;
}
uint32_t nn::psc::sf::IPmControl::Unknown6() {
	ns_print("Stub implementation for nn::psc::sf::IPmControl::Unknown6\n");
	return 0;
}
uint32_t nn::psc::sf::IPmModule::Unknown0() {
	ns_print("Stub implementation for nn::psc::sf::IPmModule::Unknown0\n");
	return 0;
}
uint32_t nn::psc::sf::IPmModule::Unknown1() {
	ns_print("Stub implementation for nn::psc::sf::IPmModule::Unknown1\n");
	return 0;
}
uint32_t nn::psc::sf::IPmModule::Unknown2() {
	ns_print("Stub implementation for nn::psc::sf::IPmModule::Unknown2\n");
	return 0;
}
uint32_t nn::psc::sf::IPmModule::Unknown3() {
	ns_print("Stub implementation for nn::psc::sf::IPmModule::Unknown3\n");
	return 0;
}
uint32_t nn::psc::sf::IPmService::Unknown0(IUnknown*& _0) {
	ns_print("Stub implementation for nn::psc::sf::IPmService::Unknown0\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::psm {
	class IPsmServer : public IpcService {
	public:
		IPsmServer() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::psm::IPsmServer::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::psm::IPsmServer::Unknown1\n");
				resp->error_code = Unknown1(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psm::IPsmServer::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psm::IPsmServer::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::psm::IPsmServer::Unknown4\n");
				resp->error_code = Unknown4(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psm::IPsmServer::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psm::IPsmServer::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::psm::IPsmServer::Unknown7\n");
				resp->error_code = Unknown7(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psm::IPsmServer::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psm::IPsmServer::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psm::IPsmServer::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psm::IPsmServer::Unknown11\n");
				resp->error_code = Unknown11();
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::psm::IPsmServer::Unknown12\n");
				resp->error_code = Unknown12(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::psm::IPsmServer::Unknown13\n");
				resp->error_code = Unknown13(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::psm::IPsmServer::Unknown14\n");
				resp->error_code = Unknown14(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::psm::IPsmServer::Unknown15\n");
				resp->error_code = Unknown15(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::psm::IPsmServer::Unknown16\n");
				resp->error_code = Unknown16(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psm::IPsmServer::Unknown17\n");
				resp->error_code = Unknown17();
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::psm::IPsmServer::Unknown18\n");
				resp->error_code = Unknown18(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::psm::IPsmServer", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t& _0);
		uint32_t Unknown1(uint32_t& _0);
		uint32_t Unknown10();
		uint32_t Unknown11();
		uint32_t Unknown12(uint32_t& _0);
		uint32_t Unknown13(uint64_t& _0);
		uint32_t Unknown14(uint8_t& _0);
		uint32_t Unknown15(uint64_t& _0);
		uint32_t Unknown16(IpcService*& _0);
		uint32_t Unknown17();
		uint32_t Unknown18(IpcService*& _0);
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4(uint8_t& _0);
		uint32_t Unknown5();
		uint32_t Unknown6();
		uint32_t Unknown7(IUnknown*& _0);
		uint32_t Unknown8();
		uint32_t Unknown9();
	};
	class IPsmSession : public IpcService {
	public:
		IPsmSession() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::psm::IPsmSession::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psm::IPsmSession::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psm::IPsmSession::Unknown2: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown2(req->GetData<uint8_t>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psm::IPsmSession::Unknown3: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown3(req->GetData<uint8_t>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::psm::IPsmSession::Unknown4: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown4(req->GetData<uint8_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::psm::IPsmSession", req->cmd_id);
			}
		}
		uint32_t Unknown0(IpcService*& _0);
		uint32_t Unknown1();
		uint32_t Unknown2(uint8_t _0);
		uint32_t Unknown3(uint8_t _0);
		uint32_t Unknown4(uint8_t _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::psm::IPsmServer::Unknown0(uint32_t& _0) {
	ns_print("Stub implementation for nn::psm::IPsmServer::Unknown0\n");
	return 0;
}
uint32_t nn::psm::IPsmServer::Unknown1(uint32_t& _0) {
	ns_print("Stub implementation for nn::psm::IPsmServer::Unknown1\n");
	return 0;
}
uint32_t nn::psm::IPsmServer::Unknown10() {
	ns_print("Stub implementation for nn::psm::IPsmServer::Unknown10\n");
	return 0;
}
uint32_t nn::psm::IPsmServer::Unknown11() {
	ns_print("Stub implementation for nn::psm::IPsmServer::Unknown11\n");
	return 0;
}
uint32_t nn::psm::IPsmServer::Unknown12(uint32_t& _0) {
	ns_print("Stub implementation for nn::psm::IPsmServer::Unknown12\n");
	return 0;
}
uint32_t nn::psm::IPsmServer::Unknown13(uint64_t& _0) {
	ns_print("Stub implementation for nn::psm::IPsmServer::Unknown13\n");
	return 0;
}
uint32_t nn::psm::IPsmServer::Unknown14(uint8_t& _0) {
	ns_print("Stub implementation for nn::psm::IPsmServer::Unknown14\n");
	return 0;
}
uint32_t nn::psm::IPsmServer::Unknown15(uint64_t& _0) {
	ns_print("Stub implementation for nn::psm::IPsmServer::Unknown15\n");
	return 0;
}
uint32_t nn::psm::IPsmServer::Unknown16(IpcService*& _0) {
	ns_print("Stub implementation for nn::psm::IPsmServer::Unknown16\n");
	return 0;
}
uint32_t nn::psm::IPsmServer::Unknown17() {
	ns_print("Stub implementation for nn::psm::IPsmServer::Unknown17\n");
	return 0;
}
uint32_t nn::psm::IPsmServer::Unknown18(IpcService*& _0) {
	ns_print("Stub implementation for nn::psm::IPsmServer::Unknown18\n");
	return 0;
}
uint32_t nn::psm::IPsmServer::Unknown2() {
	ns_print("Stub implementation for nn::psm::IPsmServer::Unknown2\n");
	return 0;
}
uint32_t nn::psm::IPsmServer::Unknown3() {
	ns_print("Stub implementation for nn::psm::IPsmServer::Unknown3\n");
	return 0;
}
uint32_t nn::psm::IPsmServer::Unknown4(uint8_t& _0) {
	ns_print("Stub implementation for nn::psm::IPsmServer::Unknown4\n");
	return 0;
}
uint32_t nn::psm::IPsmServer::Unknown5() {
	ns_print("Stub implementation for nn::psm::IPsmServer::Unknown5\n");
	return 0;
}
uint32_t nn::psm::IPsmServer::Unknown6() {
	ns_print("Stub implementation for nn::psm::IPsmServer::Unknown6\n");
	return 0;
}
uint32_t nn::psm::IPsmServer::Unknown7(IUnknown*& _0) {
	ns_print("Stub implementation for nn::psm::IPsmServer::Unknown7\n");
	return 0;
}
uint32_t nn::psm::IPsmServer::Unknown8() {
	ns_print("Stub implementation for nn::psm::IPsmServer::Unknown8\n");
	return 0;
}
uint32_t nn::psm::IPsmServer::Unknown9() {
	ns_print("Stub implementation for nn::psm::IPsmServer::Unknown9\n");
	return 0;
}
uint32_t nn::psm::IPsmSession::Unknown0(IpcService*& _0) {
	ns_print("Stub implementation for nn::psm::IPsmSession::Unknown0\n");
	return 0;
}
uint32_t nn::psm::IPsmSession::Unknown1() {
	ns_print("Stub implementation for nn::psm::IPsmSession::Unknown1\n");
	return 0;
}
uint32_t nn::psm::IPsmSession::Unknown2(uint8_t _0) {
	ns_print("Stub implementation for nn::psm::IPsmSession::Unknown2\n");
	return 0;
}
uint32_t nn::psm::IPsmSession::Unknown3(uint8_t _0) {
	ns_print("Stub implementation for nn::psm::IPsmSession::Unknown3\n");
	return 0;
}
uint32_t nn::psm::IPsmSession::Unknown4(uint8_t _0) {
	ns_print("Stub implementation for nn::psm::IPsmSession::Unknown4\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::pwm {
	class IChannelSession : public IpcService {
	public:
		IChannelSession() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pwm::IChannelSession::Unknown0: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown0(req->GetData<uint64_t>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::pwm::IChannelSession::Unknown1\n");
				resp->error_code = Unknown1(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pwm::IChannelSession::Unknown2: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown2(req->GetData<uint32_t>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::pwm::IChannelSession::Unknown3\n");
				resp->error_code = Unknown3(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::pwm::IChannelSession::Unknown4: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown4(req->GetData<uint8_t>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::pwm::IChannelSession::Unknown5\n");
				resp->error_code = Unknown5(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::pwm::IChannelSession", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0);
		uint32_t Unknown1(uint64_t& _0);
		uint32_t Unknown2(uint32_t _0);
		uint32_t Unknown3(uint32_t& _0);
		uint32_t Unknown4(uint8_t _0);
		uint32_t Unknown5(uint8_t& _0);
	};
	class IManager : public IpcService {
	public:
		IManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::pwm::IManager::Unknown0: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown0(req->GetData<uint32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::pwm::IManager::Unknown1: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown1(req->GetData<uint32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::pwm::IManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t _0, IUnknown*& _1);
		uint32_t Unknown1(uint32_t _0, IUnknown*& _1);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::pwm::IChannelSession::Unknown0(uint64_t _0) {
	ns_print("Stub implementation for nn::pwm::IChannelSession::Unknown0\n");
	return 0;
}
uint32_t nn::pwm::IChannelSession::Unknown1(uint64_t& _0) {
	ns_print("Stub implementation for nn::pwm::IChannelSession::Unknown1\n");
	return 0;
}
uint32_t nn::pwm::IChannelSession::Unknown2(uint32_t _0) {
	ns_print("Stub implementation for nn::pwm::IChannelSession::Unknown2\n");
	return 0;
}
uint32_t nn::pwm::IChannelSession::Unknown3(uint32_t& _0) {
	ns_print("Stub implementation for nn::pwm::IChannelSession::Unknown3\n");
	return 0;
}
uint32_t nn::pwm::IChannelSession::Unknown4(uint8_t _0) {
	ns_print("Stub implementation for nn::pwm::IChannelSession::Unknown4\n");
	return 0;
}
uint32_t nn::pwm::IChannelSession::Unknown5(uint8_t& _0) {
	ns_print("Stub implementation for nn::pwm::IChannelSession::Unknown5\n");
	return 0;
}
uint32_t nn::pwm::IManager::Unknown0(uint32_t _0, IUnknown*& _1) {
	ns_print("Stub implementation for nn::pwm::IManager::Unknown0\n");
	return 0;
}
uint32_t nn::pwm::IManager::Unknown1(uint32_t _0, IUnknown*& _1) {
	ns_print("Stub implementation for nn::pwm::IManager::Unknown1\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::ro::detail {
	class IDebugMonitorInterface : public IpcService {
	public:
		IDebugMonitorInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ro::detail::IDebugMonitorInterface::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ro::detail::IDebugMonitorInterface", req->cmd_id);
			}
		}
		uint32_t Unknown0();
	};
	class IRoInterface : public IpcService {
	public:
		IRoInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::ro::detail::IRoInterface::Unknown0: uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint64_t>(0x18), req->GetData<uint64_t>(0x20), req->GetData<uint64_t>(0x28));
				resp->error_code = Unknown0(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint64_t>(0x18), req->GetData<uint64_t>(0x20), req->GetData<uint64_t>(0x28), req->pid, *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ro::detail::IRoInterface::Unknown1: uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Unknown1(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->pid);
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ro::detail::IRoInterface::Unknown2: uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint64_t>(0x18));
				resp->error_code = Unknown2(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint64_t>(0x18), req->pid);
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ro::detail::IRoInterface::Unknown3: uint64_t = 0x%%lx, uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = Unknown3(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->pid);
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ro::detail::IRoInterface::Unknown4: uint64_t = 0x%%lx, KObject = 0x%x\n", req->GetData<uint64_t>(8), req->GetCopied(0));
				resp->error_code = Unknown4(req->GetData<uint64_t>(8), req->pid, IPC::GetHandle<IpcService*>(req->GetCopied(0)));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ro::detail::IRoInterface", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0, uint64_t _1, uint64_t _2, uint64_t _3, uint64_t _4, uint64_t _5, uint64_t& _6);
		uint32_t Unknown1(uint64_t _0, uint64_t _1, uint64_t _2);
		uint32_t Unknown2(uint64_t _0, uint64_t _1, uint64_t _2, uint64_t _3);
		uint32_t Unknown3(uint64_t _0, uint64_t _1, uint64_t _2);
		uint32_t Unknown4(uint64_t _0, uint64_t _1, IpcService* _2);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::ro::detail::IDebugMonitorInterface::Unknown0() {
	ns_print("Stub implementation for nn::ro::detail::IDebugMonitorInterface::Unknown0\n");
	return 0;
}
uint32_t nn::ro::detail::IRoInterface::Unknown0(uint64_t _0, uint64_t _1, uint64_t _2, uint64_t _3, uint64_t _4, uint64_t _5, uint64_t& _6) {
	ns_print("Stub implementation for nn::ro::detail::IRoInterface::Unknown0\n");
	return 0;
}
uint32_t nn::ro::detail::IRoInterface::Unknown1(uint64_t _0, uint64_t _1, uint64_t _2) {
	ns_print("Stub implementation for nn::ro::detail::IRoInterface::Unknown1\n");
	return 0;
}
uint32_t nn::ro::detail::IRoInterface::Unknown2(uint64_t _0, uint64_t _1, uint64_t _2, uint64_t _3) {
	ns_print("Stub implementation for nn::ro::detail::IRoInterface::Unknown2\n");
	return 0;
}
uint32_t nn::ro::detail::IRoInterface::Unknown3(uint64_t _0, uint64_t _1, uint64_t _2) {
	ns_print("Stub implementation for nn::ro::detail::IRoInterface::Unknown3\n");
	return 0;
}
uint32_t nn::ro::detail::IRoInterface::Unknown4(uint64_t _0, uint64_t _1, IpcService* _2) {
	ns_print("Stub implementation for nn::ro::detail::IRoInterface::Unknown4\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::sasbus {
	class IManager : public IpcService {
	public:
		IManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::sasbus::IManager::Unknown0: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown0(req->GetData<uint32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::sasbus::IManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t _0, IUnknown*& _1);
	};
	class ISession : public IpcService {
	public:
		ISession() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::sasbus::ISession::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::sasbus::ISession::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::sasbus::ISession::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::sasbus::ISession::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::sasbus::ISession", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::sasbus::IManager::Unknown0(uint32_t _0, IUnknown*& _1) {
	ns_print("Stub implementation for nn::sasbus::IManager::Unknown0\n");
	return 0;
}
uint32_t nn::sasbus::ISession::Unknown0() {
	ns_print("Stub implementation for nn::sasbus::ISession::Unknown0\n");
	return 0;
}
uint32_t nn::sasbus::ISession::Unknown1() {
	ns_print("Stub implementation for nn::sasbus::ISession::Unknown1\n");
	return 0;
}
uint32_t nn::sasbus::ISession::Unknown2() {
	ns_print("Stub implementation for nn::sasbus::ISession::Unknown2\n");
	return 0;
}
uint32_t nn::sasbus::ISession::Unknown3() {
	ns_print("Stub implementation for nn::sasbus::ISession::Unknown3\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::settings {
	class IFactorySettingsServer : public IpcService {
	public:
		IFactorySettingsServer() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 10);
				auto temp1 = resp->GetDataPointer<nn::settings::factory::BdAddress>(0xc);
				ns_print("IPC message to nn::settings::IFactorySettingsServer::GetBluetoothBdAddress\n");
				resp->error_code = GetBluetoothBdAddress(temp1);
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 30);
				auto temp1 = resp->GetDataPointer<nn::settings::factory::ConfigurationId1>(8);
				ns_print("IPC message to nn::settings::IFactorySettingsServer::GetConfigurationId1\n");
				resp->error_code = GetConfigurationId1(temp1);
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 10);
				auto temp1 = resp->GetDataPointer<nn::settings::factory::AccelerometerOffset>(0xc);
				ns_print("IPC message to nn::settings::IFactorySettingsServer::GetAccelerometerOffset\n");
				resp->error_code = GetAccelerometerOffset(temp1);
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 10);
				auto temp1 = resp->GetDataPointer<nn::settings::factory::AccelerometerScale>(0xc);
				ns_print("IPC message to nn::settings::IFactorySettingsServer::GetAccelerometerScale\n");
				resp->error_code = GetAccelerometerScale(temp1);
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 10);
				auto temp1 = resp->GetDataPointer<nn::settings::factory::GyroscopeOffset>(0xc);
				ns_print("IPC message to nn::settings::IFactorySettingsServer::GetGyroscopeOffset\n");
				resp->error_code = GetGyroscopeOffset(temp1);
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 10);
				auto temp1 = resp->GetDataPointer<nn::settings::factory::GyroscopeScale>(0xc);
				ns_print("IPC message to nn::settings::IFactorySettingsServer::GetGyroscopeScale\n");
				resp->error_code = GetGyroscopeScale(temp1);
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 10);
				auto temp1 = resp->GetDataPointer<nn::settings::factory::MacAddress>(0xc);
				ns_print("IPC message to nn::settings::IFactorySettingsServer::GetWirelessLanMacAddress\n");
				resp->error_code = GetWirelessLanMacAddress(temp1);
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::settings::IFactorySettingsServer::GetWirelessLanCountryCodeCount\n");
				resp->error_code = GetWirelessLanCountryCodeCount(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::settings::factory::CountryCode* temp3 = (nn::settings::factory::CountryCode *) new uint8_t[temp2];
				ns_print("IPC message to nn::settings::IFactorySettingsServer::GetWirelessLanCountryCodes\n");
				resp->error_code = GetWirelessLanCountryCodes(*resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 24);
				auto temp1 = resp->GetDataPointer<nn::settings::factory::SerialNumber>(8);
				ns_print("IPC message to nn::settings::IFactorySettingsServer::GetSerialNumber\n");
				resp->error_code = GetSerialNumber(temp1);
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::IFactorySettingsServer::SetInitialSystemAppletProgramId: nn::ncm::ProgramId = 0x%%lx\n", req->GetData<nn::ncm::ProgramId>(8));
				resp->error_code = SetInitialSystemAppletProgramId(req->GetData<nn::ncm::ProgramId>(8));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::IFactorySettingsServer::SetOverlayDispProgramId: nn::ncm::ProgramId = 0x%%lx\n", req->GetData<nn::ncm::ProgramId>(8));
				resp->error_code = SetOverlayDispProgramId(req->GetData<nn::ncm::ProgramId>(8));
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 24);
				auto temp1 = resp->GetDataPointer<nn::settings::factory::BatteryLot>(8);
				ns_print("IPC message to nn::settings::IFactorySettingsServer::GetBatteryLot\n");
				resp->error_code = GetBatteryLot(temp1);
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x16, 0, temp2);
				nn::settings::factory::EccB233DeviceCertificate* temp3 = (nn::settings::factory::EccB233DeviceCertificate *) new uint8_t[temp2];
				ns_print("IPC message to nn::settings::IFactorySettingsServer::GetEciDeviceCertificate\n");
				resp->error_code = GetEciDeviceCertificate(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x16, 0, temp2);
				nn::settings::factory::Rsa2048DeviceCertificate* temp3 = (nn::settings::factory::Rsa2048DeviceCertificate *) new uint8_t[temp2];
				ns_print("IPC message to nn::settings::IFactorySettingsServer::GetEticketDeviceCertificate\n");
				resp->error_code = GetEticketDeviceCertificate(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x16, 0, temp2);
				nn::settings::factory::SslKey* temp3 = (nn::settings::factory::SslKey *) new uint8_t[temp2];
				ns_print("IPC message to nn::settings::IFactorySettingsServer::GetSslKey\n");
				resp->error_code = GetSslKey(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x16, 0, temp2);
				nn::settings::factory::SslCertificate* temp3 = (nn::settings::factory::SslCertificate *) new uint8_t[temp2];
				ns_print("IPC message to nn::settings::IFactorySettingsServer::GetSslCertificate\n");
				resp->error_code = GetSslCertificate(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x16, 0, temp2);
				nn::settings::factory::GameCardKey* temp3 = (nn::settings::factory::GameCardKey *) new uint8_t[temp2];
				ns_print("IPC message to nn::settings::IFactorySettingsServer::GetGameCardKey\n");
				resp->error_code = GetGameCardKey(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x16, 0, temp2);
				nn::settings::factory::GameCardCertificate* temp3 = (nn::settings::factory::GameCardCertificate *) new uint8_t[temp2];
				ns_print("IPC message to nn::settings::IFactorySettingsServer::GetGameCardCertificate\n");
				resp->error_code = GetGameCardCertificate(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 84);
				auto temp1 = resp->GetDataPointer<nn::settings::factory::EccB233DeviceKey>(8);
				ns_print("IPC message to nn::settings::IFactorySettingsServer::GetEciDeviceKey\n");
				resp->error_code = GetEciDeviceKey(temp1);
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x16, 0, temp2);
				nn::settings::factory::Rsa2048DeviceKey* temp3 = (nn::settings::factory::Rsa2048DeviceKey *) new uint8_t[temp2];
				ns_print("IPC message to nn::settings::IFactorySettingsServer::GetEticketDeviceKey\n");
				resp->error_code = GetEticketDeviceKey(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 90);
				auto temp1 = resp->GetDataPointer<nn::settings::factory::SpeakerParameter>(8);
				ns_print("IPC message to nn::settings::IFactorySettingsServer::GetSpeakerParameter\n");
				resp->error_code = GetSpeakerParameter(temp1);
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::settings::IFactorySettingsServer", req->cmd_id);
			}
		}
		uint32_t GetAccelerometerOffset(nn::settings::factory::AccelerometerOffset& _0);
		uint32_t GetAccelerometerScale(nn::settings::factory::AccelerometerScale& _0);
		uint32_t GetBatteryLot(nn::settings::factory::BatteryLot& _0);
		uint32_t GetBluetoothBdAddress(nn::settings::factory::BdAddress& _0);
		uint32_t GetConfigurationId1(nn::settings::factory::ConfigurationId1& _0);
		uint32_t GetEciDeviceCertificate(nn::settings::factory::EccB233DeviceCertificate *& _0, unsigned int _0_size);
		uint32_t GetEciDeviceKey(nn::settings::factory::EccB233DeviceKey& _0);
		uint32_t GetEticketDeviceCertificate(nn::settings::factory::Rsa2048DeviceCertificate *& _0, unsigned int _0_size);
		uint32_t GetEticketDeviceKey(nn::settings::factory::Rsa2048DeviceKey *& _0, unsigned int _0_size);
		uint32_t GetGameCardCertificate(nn::settings::factory::GameCardCertificate *& _0, unsigned int _0_size);
		uint32_t GetGameCardKey(nn::settings::factory::GameCardKey *& _0, unsigned int _0_size);
		uint32_t GetGyroscopeOffset(nn::settings::factory::GyroscopeOffset& _0);
		uint32_t GetGyroscopeScale(nn::settings::factory::GyroscopeScale& _0);
		uint32_t GetSerialNumber(nn::settings::factory::SerialNumber& _0);
		uint32_t GetSpeakerParameter(nn::settings::factory::SpeakerParameter& _0);
		uint32_t GetSslCertificate(nn::settings::factory::SslCertificate *& _0, unsigned int _0_size);
		uint32_t GetSslKey(nn::settings::factory::SslKey *& _0, unsigned int _0_size);
		uint32_t GetWirelessLanCountryCodeCount(int32_t& _0);
		uint32_t GetWirelessLanCountryCodes(int32_t& _0, nn::settings::factory::CountryCode *& _1, unsigned int _1_size);
		uint32_t GetWirelessLanMacAddress(nn::settings::factory::MacAddress& _0);
		uint32_t SetInitialSystemAppletProgramId(nn::ncm::ProgramId _0);
		uint32_t SetOverlayDispProgramId(nn::ncm::ProgramId _0);
	};
	class IFirmwareDebugSettingsServer : public IpcService {
	public:
		IFirmwareDebugSettingsServer() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 2: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::settings::SettingsName* temp3 = (nn::settings::SettingsName *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x19, 1, temp5);
				nn::settings::SettingsItemKey* temp6 = (nn::settings::SettingsItemKey *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				unsigned int temp8;
				auto temp7 = req->GetBuffer(5, 0, temp8);
				uint8_t* temp9 = (uint8_t *) new uint8_t[temp8];
				ARMv8::ReadBytes(temp7, (uint8_t *)temp9, temp8);
				ns_print("IPC message to nn::settings::IFirmwareDebugSettingsServer::SetSettingsItemValue: nn::settings::SettingsName *= buffer<0x%lx>, nn::settings::SettingsItemKey *= buffer<0x%lx>, uint8_t *= buffer<0x%lx>\n", temp2, temp5, temp8);
				resp->error_code = SetSettingsItemValue(temp3, temp2, temp6, temp5, temp9, temp8);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				delete[] (uint8_t *) temp9;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::settings::SettingsName* temp3 = (nn::settings::SettingsName *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x19, 1, temp5);
				nn::settings::SettingsItemKey* temp6 = (nn::settings::SettingsItemKey *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				ns_print("IPC message to nn::settings::IFirmwareDebugSettingsServer::ResetSettingsItemValue: nn::settings::SettingsName *= buffer<0x%lx>, nn::settings::SettingsItemKey *= buffer<0x%lx>\n", temp2, temp5);
				resp->error_code = ResetSettingsItemValue(temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				return 0;
			}
			case 4: {
				resp->GenBuf(1, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::settings::SettingsName* temp3 = (nn::settings::SettingsName *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				nn::settings::ISettingsItemKeyIterator* temp4;
				ns_print("IPC message to nn::settings::IFirmwareDebugSettingsServer::CreateSettingsItemKeyIterator: nn::settings::SettingsName *= buffer<0x%lx>\n", temp2);
				resp->error_code = CreateSettingsItemKeyIterator(temp3, temp2, temp4);
				delete[] (uint8_t *) temp3;
				if(temp4 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp4));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::settings::IFirmwareDebugSettingsServer", req->cmd_id);
			}
		}
		uint32_t CreateSettingsItemKeyIterator(nn::settings::SettingsName * _0, unsigned int _0_size, nn::settings::ISettingsItemKeyIterator*& _1);
		uint32_t ResetSettingsItemValue(nn::settings::SettingsName * _0, unsigned int _0_size, nn::settings::SettingsItemKey * _1, unsigned int _1_size);
		uint32_t SetSettingsItemValue(nn::settings::SettingsName * _0, unsigned int _0_size, nn::settings::SettingsItemKey * _1, unsigned int _1_size, uint8_t * _2, unsigned int _2_size);
	};
	class ISettingsItemKeyIterator : public IpcService {
	public:
		ISettingsItemKeyIterator() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISettingsItemKeyIterator::GoNext\n");
				resp->error_code = GoNext();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::settings::ISettingsItemKeyIterator::GetKeySize\n");
				resp->error_code = GetKeySize(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::settings::ISettingsItemKeyIterator::GetKey\n");
				resp->error_code = GetKey(*resp->GetDataPointer<uint64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::settings::ISettingsItemKeyIterator", req->cmd_id);
			}
		}
		uint32_t GetKey(uint64_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t GetKeySize(uint64_t& _0);
		uint32_t GoNext();
	};
	class ISettingsServer : public IpcService {
	public:
		ISettingsServer() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::settings::ISettingsServer::GetLanguageCode\n");
				resp->error_code = GetLanguageCode(*resp->GetDataPointer<nn::settings::LanguageCode *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::settings::LanguageCode* temp3 = (nn::settings::LanguageCode *) new uint8_t[temp2];
				ns_print("IPC message to nn::settings::ISettingsServer::GetAvailableLanguageCodes\n");
				resp->error_code = GetAvailableLanguageCodes(*resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::settings::ISettingsServer::GetAvailableLanguageCodeCount\n");
				resp->error_code = GetAvailableLanguageCodeCount(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::settings::ISettingsServer::GetRegionCode\n");
				resp->error_code = GetRegionCode(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::settings::ISettingsServer", req->cmd_id);
			}
		}
		uint32_t GetAvailableLanguageCodeCount(int32_t& _0);
		uint32_t GetAvailableLanguageCodes(int32_t& _0, nn::settings::LanguageCode *& _1, unsigned int _1_size);
		uint32_t GetLanguageCode(nn::settings::LanguageCode& _0);
		uint32_t GetRegionCode(int32_t& _0);
	};
	class ISystemSettingsServer : public IpcService {
	public:
		ISystemSettingsServer() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetLanguageCode: nn::settings::LanguageCode = 0x%%lx\n", req->GetData<nn::settings::LanguageCode>(8));
				resp->error_code = SetLanguageCode(req->GetData<nn::settings::LanguageCode>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				nn::settings::system::NetworkSettings* temp3 = (nn::settings::system::NetworkSettings *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetNetworkSettings: nn::settings::system::NetworkSettings *= buffer<0x%lx>\n", temp2);
				resp->error_code = SetNetworkSettings(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::settings::system::NetworkSettings* temp3 = (nn::settings::system::NetworkSettings *) new uint8_t[temp2];
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetNetworkSettings\n");
				resp->error_code = GetNetworkSettings(*resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::settings::system::FirmwareVersion* temp3 = (nn::settings::system::FirmwareVersion *) new uint8_t[temp2];
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetFirmwareVersion\n");
				resp->error_code = GetFirmwareVersion(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::settings::system::FirmwareVersion* temp3 = (nn::settings::system::FirmwareVersion *) new uint8_t[temp2];
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetFirmwareVersion2\n");
				resp->error_code = GetFirmwareVersion2(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetLockScreenFlag\n");
				resp->error_code = GetLockScreenFlag(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetLockScreenFlag: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetLockScreenFlag(req->GetData<bool>(8));
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 40);
				auto temp1 = resp->GetDataPointer<nn::settings::system::BacklightSettings>(8);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetBacklightSettings\n");
				resp->error_code = GetBacklightSettings(temp1);
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetBacklightSettings: nn::settings::system::BacklightSettings = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x28).c_str());
				resp->error_code = SetBacklightSettings(req->GetDataPointer<nn::settings::system::BacklightSettings>(8));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				nn::settings::system::BluetoothDevicesSettings* temp3 = (nn::settings::system::BluetoothDevicesSettings *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetBluetoothDevicesSettings: nn::settings::system::BluetoothDevicesSettings *= buffer<0x%lx>\n", temp2);
				resp->error_code = SetBluetoothDevicesSettings(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::settings::system::BluetoothDevicesSettings* temp3 = (nn::settings::system::BluetoothDevicesSettings *) new uint8_t[temp2];
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetBluetoothDevicesSettings\n");
				resp->error_code = GetBluetoothDevicesSettings(*resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetExternalSteadyClockSourceId\n");
				resp->error_code = GetExternalSteadyClockSourceId(*resp->GetDataPointer<nn::util::Uuid *>(8));
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetExternalSteadyClockSourceId: nn::util::Uuid = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x10).c_str());
				resp->error_code = SetExternalSteadyClockSourceId(req->GetData<nn::util::Uuid>(8));
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 32);
				auto temp1 = resp->GetDataPointer<nn::time::SystemClockContext>(8);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetUserSystemClockContext\n");
				resp->error_code = GetUserSystemClockContext(temp1);
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetUserSystemClockContext: nn::time::SystemClockContext = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x20).c_str());
				resp->error_code = SetUserSystemClockContext(req->GetDataPointer<nn::time::SystemClockContext>(8));
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetAccountSettings\n");
				resp->error_code = GetAccountSettings(*resp->GetDataPointer<nn::settings::system::AccountSettings *>(8));
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetAccountSettings: nn::settings::system::AccountSettings = 0x%x\n", req->GetData<nn::settings::system::AccountSettings>(8));
				resp->error_code = SetAccountSettings(req->GetData<nn::settings::system::AccountSettings>(8));
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetAudioVolume: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = GetAudioVolume(req->GetData<int32_t>(8), *resp->GetDataPointer<nn::settings::system::AudioVolume *>(8));
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetAudioVolume: nn::settings::system::AudioVolume = 0x%%lx, int32_t = 0x%x\n", req->GetData<nn::settings::system::AudioVolume>(8), req->GetData<int32_t>(0x10));
				resp->error_code = SetAudioVolume(req->GetData<nn::settings::system::AudioVolume>(8), req->GetData<int32_t>(0x10));
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::settings::system::EulaVersion* temp3 = (nn::settings::system::EulaVersion *) new uint8_t[temp2];
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetEulaVersions\n");
				resp->error_code = GetEulaVersions(*resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				nn::settings::system::EulaVersion* temp3 = (nn::settings::system::EulaVersion *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetEulaVersions: nn::settings::system::EulaVersion *= buffer<0x%lx>\n", temp2);
				resp->error_code = SetEulaVersions(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetColorSetId\n");
				resp->error_code = GetColorSetId(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 24: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetColorSetId: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = SetColorSetId(req->GetData<int32_t>(8));
				return 0;
			}
			case 25: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetConsoleInformationUploadFlag\n");
				resp->error_code = GetConsoleInformationUploadFlag(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 26: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetConsoleInformationUploadFlag: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetConsoleInformationUploadFlag(req->GetData<bool>(8));
				return 0;
			}
			case 27: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetAutomaticApplicationDownloadFlag\n");
				resp->error_code = GetAutomaticApplicationDownloadFlag(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 28: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetAutomaticApplicationDownloadFlag: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetAutomaticApplicationDownloadFlag(req->GetData<bool>(8));
				return 0;
			}
			case 29: {
				resp->GenBuf(0, 0, 24);
				auto temp1 = resp->GetDataPointer<nn::settings::system::NotificationSettings>(8);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetNotificationSettings\n");
				resp->error_code = GetNotificationSettings(temp1);
				return 0;
			}
			case 30: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetNotificationSettings: nn::settings::system::NotificationSettings = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x18).c_str());
				resp->error_code = SetNotificationSettings(req->GetDataPointer<nn::settings::system::NotificationSettings>(8));
				return 0;
			}
			case 31: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::settings::system::AccountNotificationSettings* temp3 = (nn::settings::system::AccountNotificationSettings *) new uint8_t[temp2];
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetAccountNotificationSettings\n");
				resp->error_code = GetAccountNotificationSettings(*resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 32: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				nn::settings::system::AccountNotificationSettings* temp3 = (nn::settings::system::AccountNotificationSettings *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetAccountNotificationSettings: nn::settings::system::AccountNotificationSettings *= buffer<0x%lx>\n", temp2);
				resp->error_code = SetAccountNotificationSettings(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 35: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetVibrationMasterVolume\n");
				resp->error_code = GetVibrationMasterVolume(*resp->GetDataPointer<float *>(8));
				return 0;
			}
			case 36: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetVibrationMasterVolume: float = %f\n", (double) req->GetData<float>(8));
				resp->error_code = SetVibrationMasterVolume(req->GetData<float>(8));
				return 0;
			}
			case 37: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::settings::SettingsName* temp3 = (nn::settings::SettingsName *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x19, 1, temp5);
				nn::settings::SettingsItemKey* temp6 = (nn::settings::SettingsItemKey *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetSettingsItemValueSize: nn::settings::SettingsName *= buffer<0x%lx>, nn::settings::SettingsItemKey *= buffer<0x%lx>\n", temp2, temp5);
				resp->error_code = GetSettingsItemValueSize(temp3, temp2, temp6, temp5, *resp->GetDataPointer<uint64_t *>(8));
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				return 0;
			}
			case 38: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::settings::SettingsName* temp3 = (nn::settings::SettingsName *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x19, 1, temp5);
				nn::settings::SettingsItemKey* temp6 = (nn::settings::SettingsItemKey *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				unsigned int temp8;
				auto temp7 = req->GetBuffer(6, 0, temp8);
				uint8_t* temp9 = (uint8_t *) new uint8_t[temp8];
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetSettingsItemValue: nn::settings::SettingsName *= buffer<0x%lx>, nn::settings::SettingsItemKey *= buffer<0x%lx>\n", temp2, temp5);
				resp->error_code = GetSettingsItemValue(temp3, temp2, temp6, temp5, *resp->GetDataPointer<uint64_t *>(8), temp9, temp8);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				ARMv8::WriteBytes(temp7, (uint8_t *) temp9, temp8);
				delete[] (uint8_t *)temp9;
				return 0;
			}
			case 39: {
				resp->GenBuf(0, 0, 32);
				auto temp1 = resp->GetDataPointer<nn::settings::system::TvSettings>(8);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetTvSettings\n");
				resp->error_code = GetTvSettings(temp1);
				return 0;
			}
			case 40: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetTvSettings: nn::settings::system::TvSettings = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x20).c_str());
				resp->error_code = SetTvSettings(req->GetDataPointer<nn::settings::system::TvSettings>(8));
				return 0;
			}
			case 41: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x1a, 0, temp2);
				nn::settings::system::Edid* temp3 = (nn::settings::system::Edid *) new uint8_t[temp2];
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetEdid\n");
				resp->error_code = GetEdid(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 42: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x19, 0, temp2);
				nn::settings::system::Edid* temp3 = (nn::settings::system::Edid *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetEdid: nn::settings::system::Edid *= buffer<0x%lx>\n", temp2);
				resp->error_code = SetEdid(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 43: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetAudioOutputMode: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = GetAudioOutputMode(req->GetData<int32_t>(8), *resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 44: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetAudioOutputMode: int32_t = 0x%x, int32_t = 0x%x\n", req->GetData<int32_t>(8), req->GetData<int32_t>(0xc));
				resp->error_code = SetAudioOutputMode(req->GetData<int32_t>(8), req->GetData<int32_t>(0xc));
				return 0;
			}
			case 45: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::IsForceMuteOnHeadphoneRemoved\n");
				resp->error_code = IsForceMuteOnHeadphoneRemoved(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 46: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetForceMuteOnHeadphoneRemoved: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetForceMuteOnHeadphoneRemoved(req->GetData<bool>(8));
				return 0;
			}
			case 47: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetQuestFlag\n");
				resp->error_code = GetQuestFlag(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 48: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetQuestFlag: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetQuestFlag(req->GetData<bool>(8));
				return 0;
			}
			case 49: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetDataDeletionSettings\n");
				resp->error_code = GetDataDeletionSettings(*resp->GetDataPointer<nn::settings::system::DataDeletionSettings *>(8));
				return 0;
			}
			case 50: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetDataDeletionSettings: nn::settings::system::DataDeletionSettings = 0x%%lx\n", req->GetData<nn::settings::system::DataDeletionSettings>(8));
				resp->error_code = SetDataDeletionSettings(req->GetData<nn::settings::system::DataDeletionSettings>(8));
				return 0;
			}
			case 51: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetInitialSystemAppletProgramId\n");
				resp->error_code = GetInitialSystemAppletProgramId(*resp->GetDataPointer<nn::ncm::ProgramId *>(8));
				return 0;
			}
			case 52: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetOverlayDispProgramId\n");
				resp->error_code = GetOverlayDispProgramId(*resp->GetDataPointer<nn::ncm::ProgramId *>(8));
				return 0;
			}
			case 53: {
				resp->GenBuf(0, 0, 36);
				auto temp1 = resp->GetDataPointer<nn::time::LocationName>(8);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetDeviceTimeZoneLocationName\n");
				resp->error_code = GetDeviceTimeZoneLocationName(temp1);
				return 0;
			}
			case 54: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetDeviceTimeZoneLocationName: nn::time::LocationName = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x24).c_str());
				resp->error_code = SetDeviceTimeZoneLocationName(req->GetDataPointer<nn::time::LocationName>(8));
				return 0;
			}
			case 55: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetWirelessCertificationFileSize\n");
				resp->error_code = GetWirelessCertificationFileSize(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 56: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetWirelessCertificationFile\n");
				resp->error_code = GetWirelessCertificationFile(*resp->GetDataPointer<uint64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 57: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetRegionCode: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = SetRegionCode(req->GetData<int32_t>(8));
				return 0;
			}
			case 58: {
				resp->GenBuf(0, 0, 32);
				auto temp1 = resp->GetDataPointer<nn::time::SystemClockContext>(8);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetNetworkSystemClockContext\n");
				resp->error_code = GetNetworkSystemClockContext(temp1);
				return 0;
			}
			case 59: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetNetworkSystemClockContext: nn::time::SystemClockContext = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x20).c_str());
				resp->error_code = SetNetworkSystemClockContext(req->GetDataPointer<nn::time::SystemClockContext>(8));
				return 0;
			}
			case 60: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::IsUserSystemClockAutomaticCorrectionEnabled\n");
				resp->error_code = IsUserSystemClockAutomaticCorrectionEnabled(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 61: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetUserSystemClockAutomaticCorrectionEnabled: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetUserSystemClockAutomaticCorrectionEnabled(req->GetData<bool>(8));
				return 0;
			}
			case 62: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetDebugModeFlag\n");
				resp->error_code = GetDebugModeFlag(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 63: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetPrimaryAlbumStorage\n");
				resp->error_code = GetPrimaryAlbumStorage(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 64: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetPrimaryAlbumStorage: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = SetPrimaryAlbumStorage(req->GetData<int32_t>(8));
				return 0;
			}
			case 65: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetUsb30EnableFlag\n");
				resp->error_code = GetUsb30EnableFlag(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 66: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetUsb30EnableFlag: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetUsb30EnableFlag(req->GetData<bool>(8));
				return 0;
			}
			case 67: {
				resp->GenBuf(0, 0, 24);
				auto temp1 = resp->GetDataPointer<nn::settings::system::BatteryLot>(8);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetBatteryLot\n");
				resp->error_code = GetBatteryLot(temp1);
				return 0;
			}
			case 68: {
				resp->GenBuf(0, 0, 24);
				auto temp1 = resp->GetDataPointer<nn::settings::system::SerialNumber>(8);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetSerialNumber\n");
				resp->error_code = GetSerialNumber(temp1);
				return 0;
			}
			case 69: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetNfcEnableFlag\n");
				resp->error_code = GetNfcEnableFlag(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 70: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetNfcEnableFlag: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetNfcEnableFlag(req->GetData<bool>(8));
				return 0;
			}
			case 71: {
				resp->GenBuf(0, 0, 12);
				auto temp1 = resp->GetDataPointer<nn::settings::system::SleepSettings>(8);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetSleepSettings\n");
				resp->error_code = GetSleepSettings(temp1);
				return 0;
			}
			case 72: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetSleepSettings: nn::settings::system::SleepSettings = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0xc).c_str());
				resp->error_code = SetSleepSettings(req->GetDataPointer<nn::settings::system::SleepSettings>(8));
				return 0;
			}
			case 73: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetWirelessLanEnableFlag\n");
				resp->error_code = GetWirelessLanEnableFlag(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 74: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetWirelessLanEnableFlag: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetWirelessLanEnableFlag(req->GetData<bool>(8));
				return 0;
			}
			case 75: {
				resp->GenBuf(0, 0, 32);
				auto temp1 = resp->GetDataPointer<nn::settings::system::InitialLaunchSettings>(8);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetInitialLaunchSettings\n");
				resp->error_code = GetInitialLaunchSettings(temp1);
				return 0;
			}
			case 76: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetInitialLaunchSettings: nn::settings::system::InitialLaunchSettings = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x20).c_str());
				resp->error_code = SetInitialLaunchSettings(req->GetDataPointer<nn::settings::system::InitialLaunchSettings>(8));
				return 0;
			}
			case 77: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x16, 0, temp2);
				nn::settings::system::DeviceNickName* temp3 = (nn::settings::system::DeviceNickName *) new uint8_t[temp2];
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetDeviceNickName\n");
				resp->error_code = GetDeviceNickName(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 78: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x15, 0, temp2);
				nn::settings::system::DeviceNickName* temp3 = (nn::settings::system::DeviceNickName *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetDeviceNickName: nn::settings::system::DeviceNickName *= buffer<0x%lx>\n", temp2);
				resp->error_code = SetDeviceNickName(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 79: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetProductModel\n");
				resp->error_code = GetProductModel(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 80: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetLdnChannel\n");
				resp->error_code = GetLdnChannel(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 81: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetLdnChannel: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = SetLdnChannel(req->GetData<int32_t>(8));
				return 0;
			}
			case 82: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::settings::ISystemSettingsServer::AcquireTelemetryDirtyFlagEventHandle\n");
				resp->error_code = AcquireTelemetryDirtyFlagEventHandle(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 83: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetTelemetryDirtyFlags\n");
				resp->error_code = GetTelemetryDirtyFlags(*resp->GetDataPointer<nn::settings::system::TelemetryDirtyFlag *>(8));
				return 0;
			}
			case 84: {
				resp->GenBuf(0, 0, 24);
				auto temp1 = resp->GetDataPointer<nn::settings::factory::BatteryLot>(8);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetPtmBatteryLot\n");
				resp->error_code = GetPtmBatteryLot(temp1);
				return 0;
			}
			case 85: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetPtmBatteryLot: nn::settings::factory::BatteryLot = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x18).c_str());
				resp->error_code = SetPtmBatteryLot(req->GetDataPointer<nn::settings::factory::BatteryLot>(8));
				return 0;
			}
			case 86: {
				resp->GenBuf(0, 0, 24);
				auto temp1 = resp->GetDataPointer<nn::settings::system::PtmFuelGaugeParameter>(8);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetPtmFuelGaugeParameter\n");
				resp->error_code = GetPtmFuelGaugeParameter(temp1);
				return 0;
			}
			case 87: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetPtmFuelGaugeParameter: nn::settings::system::PtmFuelGaugeParameter = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x18).c_str());
				resp->error_code = SetPtmFuelGaugeParameter(req->GetDataPointer<nn::settings::system::PtmFuelGaugeParameter>(8));
				return 0;
			}
			case 88: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetBluetoothEnableFlag\n");
				resp->error_code = GetBluetoothEnableFlag(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 89: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetBluetoothEnableFlag: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetBluetoothEnableFlag(req->GetData<bool>(8));
				return 0;
			}
			case 90: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetMiiAuthorId\n");
				resp->error_code = GetMiiAuthorId(*resp->GetDataPointer<nn::util::Uuid *>(8));
				return 0;
			}
			case 91: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetShutdownRtcValue: int64_t = 0x%%lx\n", req->GetData<int64_t>(8));
				resp->error_code = SetShutdownRtcValue(req->GetData<int64_t>(8));
				return 0;
			}
			case 92: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetShutdownRtcValue\n");
				resp->error_code = GetShutdownRtcValue(*resp->GetDataPointer<int64_t *>(8));
				return 0;
			}
			case 93: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::settings::ISystemSettingsServer::AcquireFatalDirtyFlagEventHandle\n");
				resp->error_code = AcquireFatalDirtyFlagEventHandle(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 94: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetFatalDirtyFlags\n");
				resp->error_code = GetFatalDirtyFlags(*resp->GetDataPointer<nn::settings::system::FatalDirtyFlag *>(8));
				return 0;
			}
			case 95: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetAutoUpdateEnableFlag\n");
				resp->error_code = GetAutoUpdateEnableFlag(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 96: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetAutoUpdateEnableFlag: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetAutoUpdateEnableFlag(req->GetData<bool>(8));
				return 0;
			}
			case 97: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::settings::system::NxControllerSettings* temp3 = (nn::settings::system::NxControllerSettings *) new uint8_t[temp2];
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetNxControllerSettings\n");
				resp->error_code = GetNxControllerSettings(*resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 98: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				nn::settings::system::NxControllerSettings* temp3 = (nn::settings::system::NxControllerSettings *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetNxControllerSettings: nn::settings::system::NxControllerSettings *= buffer<0x%lx>\n", temp2);
				resp->error_code = SetNxControllerSettings(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 99: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetBatteryPercentageFlag\n");
				resp->error_code = GetBatteryPercentageFlag(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetBatteryPercentageFlag: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetBatteryPercentageFlag(req->GetData<bool>(8));
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetExternalRtcResetFlag\n");
				resp->error_code = GetExternalRtcResetFlag(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 102: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetExternalRtcResetFlag: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetExternalRtcResetFlag(req->GetData<bool>(8));
				return 0;
			}
			case 103: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetUsbFullKeyEnableFlag\n");
				resp->error_code = GetUsbFullKeyEnableFlag(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 104: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetUsbFullKeyEnableFlag: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetUsbFullKeyEnableFlag(req->GetData<bool>(8));
				return 0;
			}
			case 105: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetExternalSteadyClockInternalOffset: int64_t = 0x%%lx\n", req->GetData<int64_t>(8));
				resp->error_code = SetExternalSteadyClockInternalOffset(req->GetData<int64_t>(8));
				return 0;
			}
			case 106: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetExternalSteadyClockInternalOffset\n");
				resp->error_code = GetExternalSteadyClockInternalOffset(*resp->GetDataPointer<int64_t *>(8));
				return 0;
			}
			case 107: {
				resp->GenBuf(0, 0, 44);
				auto temp1 = resp->GetDataPointer<nn::settings::system::BacklightSettingsEx>(8);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetBacklightSettingsEx\n");
				resp->error_code = GetBacklightSettingsEx(temp1);
				return 0;
			}
			case 108: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetBacklightSettingsEx: nn::settings::system::BacklightSettingsEx = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x2c).c_str());
				resp->error_code = SetBacklightSettingsEx(req->GetDataPointer<nn::settings::system::BacklightSettingsEx>(8));
				return 0;
			}
			case 109: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetHeadphoneVolumeWarningCount\n");
				resp->error_code = GetHeadphoneVolumeWarningCount(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 110: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetHeadphoneVolumeWarningCount: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = SetHeadphoneVolumeWarningCount(req->GetData<int32_t>(8));
				return 0;
			}
			case 111: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetBluetoothAfhEnableFlag\n");
				resp->error_code = GetBluetoothAfhEnableFlag(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 112: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetBluetoothAfhEnableFlag: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetBluetoothAfhEnableFlag(req->GetData<bool>(8));
				return 0;
			}
			case 113: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetBluetoothBoostEnableFlag\n");
				resp->error_code = GetBluetoothBoostEnableFlag(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 114: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetBluetoothBoostEnableFlag: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetBluetoothBoostEnableFlag(req->GetData<bool>(8));
				return 0;
			}
			case 115: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetInRepairProcessEnableFlag\n");
				resp->error_code = GetInRepairProcessEnableFlag(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 116: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetInRepairProcessEnableFlag: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetInRepairProcessEnableFlag(req->GetData<bool>(8));
				return 0;
			}
			case 117: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetHeadphoneVolumeUpdateFlag\n");
				resp->error_code = GetHeadphoneVolumeUpdateFlag(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 118: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetHeadphoneVolumeUpdateFlag: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetHeadphoneVolumeUpdateFlag(req->GetData<bool>(8));
				return 0;
			}
			case 119: {
				resp->GenBuf(0, 0, 3);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::NeedsToUpdateHeadphoneVolume: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = NeedsToUpdateHeadphoneVolume(req->GetData<bool>(8), *resp->GetDataPointer<bool *>(8), *resp->GetDataPointer<bool *>(9), *resp->GetDataPointer<int8_t *>(0xa));
				return 0;
			}
			case 120: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::GetPushNotificationActivityModeOnSleep\n");
				resp->error_code = GetPushNotificationActivityModeOnSleep(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 121: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::settings::ISystemSettingsServer::SetPushNotificationActivityModeOnSleep: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = SetPushNotificationActivityModeOnSleep(req->GetData<int32_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::settings::ISystemSettingsServer", req->cmd_id);
			}
		}
		uint32_t AcquireFatalDirtyFlagEventHandle(IpcService*& _0);
		uint32_t AcquireTelemetryDirtyFlagEventHandle(IpcService*& _0);
		uint32_t GetAccountNotificationSettings(int32_t& _0, nn::settings::system::AccountNotificationSettings *& _1, unsigned int _1_size);
		uint32_t GetAccountSettings(nn::settings::system::AccountSettings& _0);
		uint32_t GetAudioOutputMode(int32_t _0, int32_t& _1);
		uint32_t GetAudioVolume(int32_t _0, nn::settings::system::AudioVolume& _1);
		uint32_t GetAutoUpdateEnableFlag(bool& _0);
		uint32_t GetAutomaticApplicationDownloadFlag(bool& _0);
		uint32_t GetBacklightSettings(nn::settings::system::BacklightSettings& _0);
		uint32_t GetBacklightSettingsEx(nn::settings::system::BacklightSettingsEx& _0);
		uint32_t GetBatteryLot(nn::settings::system::BatteryLot& _0);
		uint32_t GetBatteryPercentageFlag(bool& _0);
		uint32_t GetBluetoothAfhEnableFlag(bool& _0);
		uint32_t GetBluetoothBoostEnableFlag(bool& _0);
		uint32_t GetBluetoothDevicesSettings(int32_t& _0, nn::settings::system::BluetoothDevicesSettings *& _1, unsigned int _1_size);
		uint32_t GetBluetoothEnableFlag(bool& _0);
		uint32_t GetColorSetId(int32_t& _0);
		uint32_t GetConsoleInformationUploadFlag(bool& _0);
		uint32_t GetDataDeletionSettings(nn::settings::system::DataDeletionSettings& _0);
		uint32_t GetDebugModeFlag(bool& _0);
		uint32_t GetDeviceNickName(nn::settings::system::DeviceNickName *& _0, unsigned int _0_size);
		uint32_t GetDeviceTimeZoneLocationName(nn::time::LocationName& _0);
		uint32_t GetEdid(nn::settings::system::Edid *& _0, unsigned int _0_size);
		uint32_t GetEulaVersions(int32_t& _0, nn::settings::system::EulaVersion *& _1, unsigned int _1_size);
		uint32_t GetExternalRtcResetFlag(bool& _0);
		uint32_t GetExternalSteadyClockInternalOffset(int64_t& _0);
		uint32_t GetExternalSteadyClockSourceId(nn::util::Uuid& _0);
		uint32_t GetFatalDirtyFlags(nn::settings::system::FatalDirtyFlag& _0);
		uint32_t GetFirmwareVersion(nn::settings::system::FirmwareVersion *& _0, unsigned int _0_size);
		uint32_t GetFirmwareVersion2(nn::settings::system::FirmwareVersion *& _0, unsigned int _0_size);
		uint32_t GetHeadphoneVolumeUpdateFlag(bool& _0);
		uint32_t GetHeadphoneVolumeWarningCount(int32_t& _0);
		uint32_t GetInRepairProcessEnableFlag(bool& _0);
		uint32_t GetInitialLaunchSettings(nn::settings::system::InitialLaunchSettings& _0);
		uint32_t GetInitialSystemAppletProgramId(nn::ncm::ProgramId& _0);
		uint32_t GetLdnChannel(int32_t& _0);
		uint32_t GetLockScreenFlag(bool& _0);
		uint32_t GetMiiAuthorId(nn::util::Uuid& _0);
		uint32_t GetNetworkSettings(int32_t& _0, nn::settings::system::NetworkSettings *& _1, unsigned int _1_size);
		uint32_t GetNetworkSystemClockContext(nn::time::SystemClockContext& _0);
		uint32_t GetNfcEnableFlag(bool& _0);
		uint32_t GetNotificationSettings(nn::settings::system::NotificationSettings& _0);
		uint32_t GetNxControllerSettings(int32_t& _0, nn::settings::system::NxControllerSettings *& _1, unsigned int _1_size);
		uint32_t GetOverlayDispProgramId(nn::ncm::ProgramId& _0);
		uint32_t GetPrimaryAlbumStorage(int32_t& _0);
		uint32_t GetProductModel(int32_t& _0);
		uint32_t GetPtmBatteryLot(nn::settings::factory::BatteryLot& _0);
		uint32_t GetPtmFuelGaugeParameter(nn::settings::system::PtmFuelGaugeParameter& _0);
		uint32_t GetPushNotificationActivityModeOnSleep(int32_t& _0);
		uint32_t GetQuestFlag(bool& _0);
		uint32_t GetSerialNumber(nn::settings::system::SerialNumber& _0);
		uint32_t GetSettingsItemValue(nn::settings::SettingsName * _0, unsigned int _0_size, nn::settings::SettingsItemKey * _1, unsigned int _1_size, uint64_t& _2, uint8_t *& _3, unsigned int _3_size);
		uint32_t GetSettingsItemValueSize(nn::settings::SettingsName * _0, unsigned int _0_size, nn::settings::SettingsItemKey * _1, unsigned int _1_size, uint64_t& _2);
		uint32_t GetShutdownRtcValue(int64_t& _0);
		uint32_t GetSleepSettings(nn::settings::system::SleepSettings& _0);
		uint32_t GetTelemetryDirtyFlags(nn::settings::system::TelemetryDirtyFlag& _0);
		uint32_t GetTvSettings(nn::settings::system::TvSettings& _0);
		uint32_t GetUsb30EnableFlag(bool& _0);
		uint32_t GetUsbFullKeyEnableFlag(bool& _0);
		uint32_t GetUserSystemClockContext(nn::time::SystemClockContext& _0);
		uint32_t GetVibrationMasterVolume(float& _0);
		uint32_t GetWirelessCertificationFile(uint64_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t GetWirelessCertificationFileSize(uint64_t& _0);
		uint32_t GetWirelessLanEnableFlag(bool& _0);
		uint32_t IsForceMuteOnHeadphoneRemoved(bool& _0);
		uint32_t IsUserSystemClockAutomaticCorrectionEnabled(bool& _0);
		uint32_t NeedsToUpdateHeadphoneVolume(bool _0, bool& _1, bool& _2, int8_t& _3);
		uint32_t SetAccountNotificationSettings(nn::settings::system::AccountNotificationSettings * _0, unsigned int _0_size);
		uint32_t SetAccountSettings(nn::settings::system::AccountSettings _0);
		uint32_t SetAudioOutputMode(int32_t _0, int32_t _1);
		uint32_t SetAudioVolume(nn::settings::system::AudioVolume _0, int32_t _1);
		uint32_t SetAutoUpdateEnableFlag(bool _0);
		uint32_t SetAutomaticApplicationDownloadFlag(bool _0);
		uint32_t SetBacklightSettings(nn::settings::system::BacklightSettings _0);
		uint32_t SetBacklightSettingsEx(nn::settings::system::BacklightSettingsEx _0);
		uint32_t SetBatteryPercentageFlag(bool _0);
		uint32_t SetBluetoothAfhEnableFlag(bool _0);
		uint32_t SetBluetoothBoostEnableFlag(bool _0);
		uint32_t SetBluetoothDevicesSettings(nn::settings::system::BluetoothDevicesSettings * _0, unsigned int _0_size);
		uint32_t SetBluetoothEnableFlag(bool _0);
		uint32_t SetColorSetId(int32_t _0);
		uint32_t SetConsoleInformationUploadFlag(bool _0);
		uint32_t SetDataDeletionSettings(nn::settings::system::DataDeletionSettings _0);
		uint32_t SetDeviceNickName(nn::settings::system::DeviceNickName * _0, unsigned int _0_size);
		uint32_t SetDeviceTimeZoneLocationName(nn::time::LocationName _0);
		uint32_t SetEdid(nn::settings::system::Edid * _0, unsigned int _0_size);
		uint32_t SetEulaVersions(nn::settings::system::EulaVersion * _0, unsigned int _0_size);
		uint32_t SetExternalRtcResetFlag(bool _0);
		uint32_t SetExternalSteadyClockInternalOffset(int64_t _0);
		uint32_t SetExternalSteadyClockSourceId(nn::util::Uuid _0);
		uint32_t SetForceMuteOnHeadphoneRemoved(bool _0);
		uint32_t SetHeadphoneVolumeUpdateFlag(bool _0);
		uint32_t SetHeadphoneVolumeWarningCount(int32_t _0);
		uint32_t SetInRepairProcessEnableFlag(bool _0);
		uint32_t SetInitialLaunchSettings(nn::settings::system::InitialLaunchSettings _0);
		uint32_t SetLanguageCode(nn::settings::LanguageCode _0);
		uint32_t SetLdnChannel(int32_t _0);
		uint32_t SetLockScreenFlag(bool _0);
		uint32_t SetNetworkSettings(nn::settings::system::NetworkSettings * _0, unsigned int _0_size);
		uint32_t SetNetworkSystemClockContext(nn::time::SystemClockContext _0);
		uint32_t SetNfcEnableFlag(bool _0);
		uint32_t SetNotificationSettings(nn::settings::system::NotificationSettings _0);
		uint32_t SetNxControllerSettings(nn::settings::system::NxControllerSettings * _0, unsigned int _0_size);
		uint32_t SetPrimaryAlbumStorage(int32_t _0);
		uint32_t SetPtmBatteryLot(nn::settings::factory::BatteryLot _0);
		uint32_t SetPtmFuelGaugeParameter(nn::settings::system::PtmFuelGaugeParameter _0);
		uint32_t SetPushNotificationActivityModeOnSleep(int32_t _0);
		uint32_t SetQuestFlag(bool _0);
		uint32_t SetRegionCode(int32_t _0);
		uint32_t SetShutdownRtcValue(int64_t _0);
		uint32_t SetSleepSettings(nn::settings::system::SleepSettings _0);
		uint32_t SetTvSettings(nn::settings::system::TvSettings _0);
		uint32_t SetUsb30EnableFlag(bool _0);
		uint32_t SetUsbFullKeyEnableFlag(bool _0);
		uint32_t SetUserSystemClockAutomaticCorrectionEnabled(bool _0);
		uint32_t SetUserSystemClockContext(nn::time::SystemClockContext _0);
		uint32_t SetVibrationMasterVolume(float _0);
		uint32_t SetWirelessLanEnableFlag(bool _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::settings::IFactorySettingsServer::GetAccelerometerOffset(nn::settings::factory::AccelerometerOffset& _0) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::GetAccelerometerOffset\n");
	return 0;
}
uint32_t nn::settings::IFactorySettingsServer::GetAccelerometerScale(nn::settings::factory::AccelerometerScale& _0) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::GetAccelerometerScale\n");
	return 0;
}
uint32_t nn::settings::IFactorySettingsServer::GetBatteryLot(nn::settings::factory::BatteryLot& _0) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::GetBatteryLot\n");
	return 0;
}
uint32_t nn::settings::IFactorySettingsServer::GetBluetoothBdAddress(nn::settings::factory::BdAddress& _0) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::GetBluetoothBdAddress\n");
	return 0;
}
uint32_t nn::settings::IFactorySettingsServer::GetConfigurationId1(nn::settings::factory::ConfigurationId1& _0) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::GetConfigurationId1\n");
	return 0;
}
uint32_t nn::settings::IFactorySettingsServer::GetEciDeviceCertificate(nn::settings::factory::EccB233DeviceCertificate *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::GetEciDeviceCertificate\n");
	return 0;
}
uint32_t nn::settings::IFactorySettingsServer::GetEciDeviceKey(nn::settings::factory::EccB233DeviceKey& _0) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::GetEciDeviceKey\n");
	return 0;
}
uint32_t nn::settings::IFactorySettingsServer::GetEticketDeviceCertificate(nn::settings::factory::Rsa2048DeviceCertificate *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::GetEticketDeviceCertificate\n");
	return 0;
}
uint32_t nn::settings::IFactorySettingsServer::GetEticketDeviceKey(nn::settings::factory::Rsa2048DeviceKey *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::GetEticketDeviceKey\n");
	return 0;
}
uint32_t nn::settings::IFactorySettingsServer::GetGameCardCertificate(nn::settings::factory::GameCardCertificate *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::GetGameCardCertificate\n");
	return 0;
}
uint32_t nn::settings::IFactorySettingsServer::GetGameCardKey(nn::settings::factory::GameCardKey *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::GetGameCardKey\n");
	return 0;
}
uint32_t nn::settings::IFactorySettingsServer::GetGyroscopeOffset(nn::settings::factory::GyroscopeOffset& _0) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::GetGyroscopeOffset\n");
	return 0;
}
uint32_t nn::settings::IFactorySettingsServer::GetGyroscopeScale(nn::settings::factory::GyroscopeScale& _0) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::GetGyroscopeScale\n");
	return 0;
}
uint32_t nn::settings::IFactorySettingsServer::GetSerialNumber(nn::settings::factory::SerialNumber& _0) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::GetSerialNumber\n");
	return 0;
}
uint32_t nn::settings::IFactorySettingsServer::GetSpeakerParameter(nn::settings::factory::SpeakerParameter& _0) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::GetSpeakerParameter\n");
	return 0;
}
uint32_t nn::settings::IFactorySettingsServer::GetSslCertificate(nn::settings::factory::SslCertificate *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::GetSslCertificate\n");
	return 0;
}
uint32_t nn::settings::IFactorySettingsServer::GetSslKey(nn::settings::factory::SslKey *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::GetSslKey\n");
	return 0;
}
uint32_t nn::settings::IFactorySettingsServer::GetWirelessLanCountryCodeCount(int32_t& _0) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::GetWirelessLanCountryCodeCount\n");
	return 0;
}
uint32_t nn::settings::IFactorySettingsServer::GetWirelessLanCountryCodes(int32_t& _0, nn::settings::factory::CountryCode *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::GetWirelessLanCountryCodes\n");
	return 0;
}
uint32_t nn::settings::IFactorySettingsServer::GetWirelessLanMacAddress(nn::settings::factory::MacAddress& _0) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::GetWirelessLanMacAddress\n");
	return 0;
}
uint32_t nn::settings::IFactorySettingsServer::SetInitialSystemAppletProgramId(nn::ncm::ProgramId _0) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::SetInitialSystemAppletProgramId\n");
	return 0;
}
uint32_t nn::settings::IFactorySettingsServer::SetOverlayDispProgramId(nn::ncm::ProgramId _0) {
	ns_print("Stub implementation for nn::settings::IFactorySettingsServer::SetOverlayDispProgramId\n");
	return 0;
}
uint32_t nn::settings::IFirmwareDebugSettingsServer::CreateSettingsItemKeyIterator(nn::settings::SettingsName * _0, unsigned int _0_size, nn::settings::ISettingsItemKeyIterator*& _1) {
	ns_print("Stub implementation for nn::settings::IFirmwareDebugSettingsServer::CreateSettingsItemKeyIterator\n");
	return 0;
}
uint32_t nn::settings::IFirmwareDebugSettingsServer::ResetSettingsItemValue(nn::settings::SettingsName * _0, unsigned int _0_size, nn::settings::SettingsItemKey * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::settings::IFirmwareDebugSettingsServer::ResetSettingsItemValue\n");
	return 0;
}
uint32_t nn::settings::IFirmwareDebugSettingsServer::SetSettingsItemValue(nn::settings::SettingsName * _0, unsigned int _0_size, nn::settings::SettingsItemKey * _1, unsigned int _1_size, uint8_t * _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::settings::IFirmwareDebugSettingsServer::SetSettingsItemValue\n");
	return 0;
}
uint32_t nn::settings::ISettingsItemKeyIterator::GetKey(uint64_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::settings::ISettingsItemKeyIterator::GetKey\n");
	return 0;
}
uint32_t nn::settings::ISettingsItemKeyIterator::GetKeySize(uint64_t& _0) {
	ns_print("Stub implementation for nn::settings::ISettingsItemKeyIterator::GetKeySize\n");
	return 0;
}
uint32_t nn::settings::ISettingsItemKeyIterator::GoNext() {
	ns_print("Stub implementation for nn::settings::ISettingsItemKeyIterator::GoNext\n");
	return 0;
}
uint32_t nn::settings::ISettingsServer::GetAvailableLanguageCodeCount(int32_t& _0) {
	ns_print("Stub implementation for nn::settings::ISettingsServer::GetAvailableLanguageCodeCount\n");
	return 0;
}
uint32_t nn::settings::ISettingsServer::GetAvailableLanguageCodes(int32_t& _0, nn::settings::LanguageCode *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::settings::ISettingsServer::GetAvailableLanguageCodes\n");
	return 0;
}
uint32_t nn::settings::ISettingsServer::GetLanguageCode(nn::settings::LanguageCode& _0) {
	ns_print("Stub implementation for nn::settings::ISettingsServer::GetLanguageCode\n");
	return 0;
}
uint32_t nn::settings::ISettingsServer::GetRegionCode(int32_t& _0) {
	ns_print("Stub implementation for nn::settings::ISettingsServer::GetRegionCode\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::AcquireFatalDirtyFlagEventHandle(IpcService*& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::AcquireFatalDirtyFlagEventHandle\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::AcquireTelemetryDirtyFlagEventHandle(IpcService*& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::AcquireTelemetryDirtyFlagEventHandle\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetAccountNotificationSettings(int32_t& _0, nn::settings::system::AccountNotificationSettings *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetAccountNotificationSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetAccountSettings(nn::settings::system::AccountSettings& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetAccountSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetAudioOutputMode(int32_t _0, int32_t& _1) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetAudioOutputMode\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetAudioVolume(int32_t _0, nn::settings::system::AudioVolume& _1) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetAudioVolume\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetAutoUpdateEnableFlag(bool& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetAutoUpdateEnableFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetAutomaticApplicationDownloadFlag(bool& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetAutomaticApplicationDownloadFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetBacklightSettings(nn::settings::system::BacklightSettings& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetBacklightSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetBacklightSettingsEx(nn::settings::system::BacklightSettingsEx& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetBacklightSettingsEx\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetBatteryLot(nn::settings::system::BatteryLot& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetBatteryLot\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetBatteryPercentageFlag(bool& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetBatteryPercentageFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetBluetoothAfhEnableFlag(bool& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetBluetoothAfhEnableFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetBluetoothBoostEnableFlag(bool& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetBluetoothBoostEnableFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetBluetoothDevicesSettings(int32_t& _0, nn::settings::system::BluetoothDevicesSettings *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetBluetoothDevicesSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetBluetoothEnableFlag(bool& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetBluetoothEnableFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetColorSetId(int32_t& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetColorSetId\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetConsoleInformationUploadFlag(bool& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetConsoleInformationUploadFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetDataDeletionSettings(nn::settings::system::DataDeletionSettings& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetDataDeletionSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetDebugModeFlag(bool& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetDebugModeFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetDeviceNickName(nn::settings::system::DeviceNickName *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetDeviceNickName\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetDeviceTimeZoneLocationName(nn::time::LocationName& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetDeviceTimeZoneLocationName\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetEdid(nn::settings::system::Edid *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetEdid\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetEulaVersions(int32_t& _0, nn::settings::system::EulaVersion *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetEulaVersions\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetExternalRtcResetFlag(bool& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetExternalRtcResetFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetExternalSteadyClockInternalOffset(int64_t& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetExternalSteadyClockInternalOffset\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetExternalSteadyClockSourceId(nn::util::Uuid& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetExternalSteadyClockSourceId\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetFatalDirtyFlags(nn::settings::system::FatalDirtyFlag& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetFatalDirtyFlags\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetFirmwareVersion(nn::settings::system::FirmwareVersion *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetFirmwareVersion\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetFirmwareVersion2(nn::settings::system::FirmwareVersion *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetFirmwareVersion2\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetHeadphoneVolumeUpdateFlag(bool& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetHeadphoneVolumeUpdateFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetHeadphoneVolumeWarningCount(int32_t& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetHeadphoneVolumeWarningCount\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetInRepairProcessEnableFlag(bool& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetInRepairProcessEnableFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetInitialLaunchSettings(nn::settings::system::InitialLaunchSettings& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetInitialLaunchSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetInitialSystemAppletProgramId(nn::ncm::ProgramId& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetInitialSystemAppletProgramId\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetLdnChannel(int32_t& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetLdnChannel\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetLockScreenFlag(bool& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetLockScreenFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetMiiAuthorId(nn::util::Uuid& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetMiiAuthorId\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetNetworkSettings(int32_t& _0, nn::settings::system::NetworkSettings *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetNetworkSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetNetworkSystemClockContext(nn::time::SystemClockContext& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetNetworkSystemClockContext\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetNfcEnableFlag(bool& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetNfcEnableFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetNotificationSettings(nn::settings::system::NotificationSettings& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetNotificationSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetNxControllerSettings(int32_t& _0, nn::settings::system::NxControllerSettings *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetNxControllerSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetOverlayDispProgramId(nn::ncm::ProgramId& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetOverlayDispProgramId\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetPrimaryAlbumStorage(int32_t& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetPrimaryAlbumStorage\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetProductModel(int32_t& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetProductModel\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetPtmBatteryLot(nn::settings::factory::BatteryLot& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetPtmBatteryLot\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetPtmFuelGaugeParameter(nn::settings::system::PtmFuelGaugeParameter& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetPtmFuelGaugeParameter\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetPushNotificationActivityModeOnSleep(int32_t& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetPushNotificationActivityModeOnSleep\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetQuestFlag(bool& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetQuestFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetSerialNumber(nn::settings::system::SerialNumber& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetSerialNumber\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetSettingsItemValue(nn::settings::SettingsName * _0, unsigned int _0_size, nn::settings::SettingsItemKey * _1, unsigned int _1_size, uint64_t& _2, uint8_t *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetSettingsItemValue\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetSettingsItemValueSize(nn::settings::SettingsName * _0, unsigned int _0_size, nn::settings::SettingsItemKey * _1, unsigned int _1_size, uint64_t& _2) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetSettingsItemValueSize\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetShutdownRtcValue(int64_t& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetShutdownRtcValue\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetSleepSettings(nn::settings::system::SleepSettings& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetSleepSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetTelemetryDirtyFlags(nn::settings::system::TelemetryDirtyFlag& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetTelemetryDirtyFlags\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetTvSettings(nn::settings::system::TvSettings& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetTvSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetUsb30EnableFlag(bool& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetUsb30EnableFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetUsbFullKeyEnableFlag(bool& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetUsbFullKeyEnableFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetUserSystemClockContext(nn::time::SystemClockContext& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetUserSystemClockContext\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetVibrationMasterVolume(float& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetVibrationMasterVolume\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetWirelessCertificationFile(uint64_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetWirelessCertificationFile\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetWirelessCertificationFileSize(uint64_t& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetWirelessCertificationFileSize\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::GetWirelessLanEnableFlag(bool& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::GetWirelessLanEnableFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::IsForceMuteOnHeadphoneRemoved(bool& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::IsForceMuteOnHeadphoneRemoved\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::IsUserSystemClockAutomaticCorrectionEnabled(bool& _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::IsUserSystemClockAutomaticCorrectionEnabled\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::NeedsToUpdateHeadphoneVolume(bool _0, bool& _1, bool& _2, int8_t& _3) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::NeedsToUpdateHeadphoneVolume\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetAccountNotificationSettings(nn::settings::system::AccountNotificationSettings * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetAccountNotificationSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetAccountSettings(nn::settings::system::AccountSettings _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetAccountSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetAudioOutputMode(int32_t _0, int32_t _1) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetAudioOutputMode\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetAudioVolume(nn::settings::system::AudioVolume _0, int32_t _1) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetAudioVolume\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetAutoUpdateEnableFlag(bool _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetAutoUpdateEnableFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetAutomaticApplicationDownloadFlag(bool _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetAutomaticApplicationDownloadFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetBacklightSettings(nn::settings::system::BacklightSettings _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetBacklightSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetBacklightSettingsEx(nn::settings::system::BacklightSettingsEx _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetBacklightSettingsEx\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetBatteryPercentageFlag(bool _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetBatteryPercentageFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetBluetoothAfhEnableFlag(bool _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetBluetoothAfhEnableFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetBluetoothBoostEnableFlag(bool _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetBluetoothBoostEnableFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetBluetoothDevicesSettings(nn::settings::system::BluetoothDevicesSettings * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetBluetoothDevicesSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetBluetoothEnableFlag(bool _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetBluetoothEnableFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetColorSetId(int32_t _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetColorSetId\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetConsoleInformationUploadFlag(bool _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetConsoleInformationUploadFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetDataDeletionSettings(nn::settings::system::DataDeletionSettings _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetDataDeletionSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetDeviceNickName(nn::settings::system::DeviceNickName * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetDeviceNickName\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetDeviceTimeZoneLocationName(nn::time::LocationName _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetDeviceTimeZoneLocationName\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetEdid(nn::settings::system::Edid * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetEdid\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetEulaVersions(nn::settings::system::EulaVersion * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetEulaVersions\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetExternalRtcResetFlag(bool _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetExternalRtcResetFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetExternalSteadyClockInternalOffset(int64_t _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetExternalSteadyClockInternalOffset\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetExternalSteadyClockSourceId(nn::util::Uuid _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetExternalSteadyClockSourceId\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetForceMuteOnHeadphoneRemoved(bool _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetForceMuteOnHeadphoneRemoved\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetHeadphoneVolumeUpdateFlag(bool _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetHeadphoneVolumeUpdateFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetHeadphoneVolumeWarningCount(int32_t _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetHeadphoneVolumeWarningCount\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetInRepairProcessEnableFlag(bool _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetInRepairProcessEnableFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetInitialLaunchSettings(nn::settings::system::InitialLaunchSettings _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetInitialLaunchSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetLanguageCode(nn::settings::LanguageCode _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetLanguageCode\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetLdnChannel(int32_t _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetLdnChannel\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetLockScreenFlag(bool _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetLockScreenFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetNetworkSettings(nn::settings::system::NetworkSettings * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetNetworkSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetNetworkSystemClockContext(nn::time::SystemClockContext _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetNetworkSystemClockContext\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetNfcEnableFlag(bool _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetNfcEnableFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetNotificationSettings(nn::settings::system::NotificationSettings _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetNotificationSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetNxControllerSettings(nn::settings::system::NxControllerSettings * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetNxControllerSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetPrimaryAlbumStorage(int32_t _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetPrimaryAlbumStorage\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetPtmBatteryLot(nn::settings::factory::BatteryLot _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetPtmBatteryLot\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetPtmFuelGaugeParameter(nn::settings::system::PtmFuelGaugeParameter _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetPtmFuelGaugeParameter\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetPushNotificationActivityModeOnSleep(int32_t _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetPushNotificationActivityModeOnSleep\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetQuestFlag(bool _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetQuestFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetRegionCode(int32_t _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetRegionCode\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetShutdownRtcValue(int64_t _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetShutdownRtcValue\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetSleepSettings(nn::settings::system::SleepSettings _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetSleepSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetTvSettings(nn::settings::system::TvSettings _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetTvSettings\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetUsb30EnableFlag(bool _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetUsb30EnableFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetUsbFullKeyEnableFlag(bool _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetUsbFullKeyEnableFlag\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetUserSystemClockAutomaticCorrectionEnabled(bool _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetUserSystemClockAutomaticCorrectionEnabled\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetUserSystemClockContext(nn::time::SystemClockContext _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetUserSystemClockContext\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetVibrationMasterVolume(float _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetVibrationMasterVolume\n");
	return 0;
}
uint32_t nn::settings::ISystemSettingsServer::SetWirelessLanEnableFlag(bool _0) {
	ns_print("Stub implementation for nn::settings::ISystemSettingsServer::SetWirelessLanEnableFlag\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::sm::detail {
	class IManagerInterface : public IpcService {
	public:
		IManagerInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(5, 1, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				ns_print("IPC message to nn::sm::detail::IManagerInterface::Unknown0: uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), temp2, temp5);
				resp->error_code = Unknown0(req->GetData<uint64_t>(8), temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::sm::detail::IManagerInterface::Unknown1: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown1(req->GetData<uint64_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::sm::detail::IManagerInterface", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0, uint8_t * _1, unsigned int _1_size, uint8_t * _2, unsigned int _2_size);
		uint32_t Unknown1(uint64_t _0);
	};
	class IUserInterface : public IpcService {
	public:
		IUserInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::sm::detail::IUserInterface::Unknown0: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown0(req->GetData<uint64_t>(8), req->pid);
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::sm::detail::IUserInterface::Unknown1: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown1(req->GetData<uint64_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::sm::detail::IUserInterface::Unknown2: uint64_t = 0x%%lx, uint8_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint64_t>(8), req->GetData<uint8_t>(0x10), req->GetData<uint32_t>(0x14));
				resp->error_code = Unknown2(req->GetData<uint64_t>(8), req->GetData<uint8_t>(0x10), req->GetData<uint32_t>(0x14), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::sm::detail::IUserInterface::Unknown3: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown3(req->GetData<uint64_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::sm::detail::IUserInterface", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0, uint64_t _1);
		uint32_t Unknown1(uint64_t _0, IpcService*& _1);
		uint32_t Unknown2(uint64_t _0, uint8_t _1, uint32_t _2, IpcService*& _3);
		uint32_t Unknown3(uint64_t _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::sm::detail::IManagerInterface::Unknown0(uint64_t _0, uint8_t * _1, unsigned int _1_size, uint8_t * _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::sm::detail::IManagerInterface::Unknown0\n");
	return 0;
}
uint32_t nn::sm::detail::IManagerInterface::Unknown1(uint64_t _0) {
	ns_print("Stub implementation for nn::sm::detail::IManagerInterface::Unknown1\n");
	return 0;
}
uint32_t nn::sm::detail::IUserInterface::Unknown0(uint64_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::sm::detail::IUserInterface::Unknown0\n");
	return 0;
}
uint32_t nn::sm::detail::IUserInterface::Unknown1(uint64_t _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::sm::detail::IUserInterface::Unknown1\n");
	return 0;
}
uint32_t nn::sm::detail::IUserInterface::Unknown2(uint64_t _0, uint8_t _1, uint32_t _2, IpcService*& _3) {
	ns_print("Stub implementation for nn::sm::detail::IUserInterface::Unknown2\n");
	return 0;
}
uint32_t nn::sm::detail::IUserInterface::Unknown3(uint64_t _0) {
	ns_print("Stub implementation for nn::sm::detail::IUserInterface::Unknown3\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::socket::resolver {
	class IResolver : public IpcService {
	public:
		IResolver() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::socket::resolver::IResolver::SetDnsAddressesPrivate: uint32_t = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), temp2);
				resp->error_code = SetDnsAddressesPrivate(req->GetData<uint32_t>(8), temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::socket::resolver::IResolver::GetDnsAddressPrivate: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = GetDnsAddressPrivate(req->GetData<uint32_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 12);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::socket::resolver::IResolver::GetHostByName: uint8_t = 0x%x, uint32_t = 0x%x, uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint8_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint64_t>(0x10), temp2);
				resp->error_code = GetHostByName(req->GetData<uint8_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint64_t>(0x10), req->pid, temp3, temp2, *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), *resp->GetDataPointer<uint32_t *>(0x10), temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 12);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::socket::resolver::IResolver::GetHostByAddr: uint32_t = 0x%x, uint32_t = 0x%x, uint32_t = 0x%x, uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), req->GetData<uint64_t>(0x18), temp2);
				resp->error_code = GetHostByAddr(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), req->GetData<uint64_t>(0x18), req->pid, temp3, temp2, *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), *resp->GetDataPointer<uint32_t *>(0x10), temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::socket::resolver::IResolver::GetHostStringError: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = GetHostStringError(req->GetData<uint32_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::socket::resolver::IResolver::GetGaiStringError: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = GetGaiStringError(req->GetData<uint32_t>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 12);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(5, 1, temp5);
				int8_t* temp6 = (int8_t *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				unsigned int temp8;
				auto temp7 = req->GetBuffer(5, 2, temp8);
				packed_addrinfo* temp9 = (packed_addrinfo *) new uint8_t[temp8];
				ARMv8::ReadBytes(temp7, (uint8_t *)temp9, temp8);
				unsigned int temp11;
				auto temp10 = req->GetBuffer(6, 0, temp11);
				packed_addrinfo* temp12 = (packed_addrinfo *) new uint8_t[temp11];
				ns_print("IPC message to nn::socket::resolver::IResolver::GetAddrInfo: bool enable_nsd_resolve = 0x%x, uint32_t = 0x%x, uint64_t pid_placeholder = 0x%%lx, int8_t *host = buffer<0x%lx>, int8_t *service = buffer<0x%lx>, packed_addrinfo *hints = buffer<0x%lx>\n", req->GetData<bool>(8), req->GetData<uint32_t>(0xc), req->GetData<uint64_t>(0x10), temp2, temp5, temp8);
				resp->error_code = GetAddrInfo(req->GetData<bool>(8), req->GetData<uint32_t>(0xc), req->GetData<uint64_t>(0x10), req->pid, temp3, temp2, temp6, temp5, temp9, temp8, *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), *resp->GetDataPointer<uint32_t *>(0x10), temp12, temp11);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				delete[] (uint8_t *) temp9;
				ARMv8::WriteBytes(temp10, (uint8_t *) temp12, temp11);
				delete[] (uint8_t *)temp12;
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				unsigned int temp8;
				auto temp7 = req->GetBuffer(6, 1, temp8);
				uint8_t* temp9 = (uint8_t *) new uint8_t[temp8];
				ns_print("IPC message to nn::socket::resolver::IResolver::GetNameInfo: uint32_t = 0x%x, uint32_t = 0x%x, uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint64_t>(0x10), temp2);
				resp->error_code = GetNameInfo(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint64_t>(0x10), req->pid, temp3, temp2, *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), temp6, temp5, temp9, temp8);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				ARMv8::WriteBytes(temp7, (uint8_t *) temp9, temp8);
				delete[] (uint8_t *)temp9;
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::socket::resolver::IResolver::RequestCancelHandle: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = RequestCancelHandle(req->GetData<uint64_t>(8), req->pid, *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::socket::resolver::IResolver::CancelSocketCall: uint32_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = CancelSocketCall(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10), req->pid);
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::socket::resolver::IResolver", req->cmd_id);
			}
		}
		uint32_t CancelSocketCall(uint32_t _0, uint64_t _1, uint64_t _2);
		uint32_t GetAddrInfo(bool enable_nsd_resolve, uint32_t _1, uint64_t pid_placeholder, uint64_t _3, int8_t * host, unsigned int host_size, int8_t * service, unsigned int service_size, packed_addrinfo * hints, unsigned int hints_size, int32_t& ret, uint32_t& bsd_errno, uint32_t& packed_addrinfo_size, packed_addrinfo *& response, unsigned int response_size);
		uint32_t GetDnsAddressPrivate(uint32_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t GetGaiStringError(uint32_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t GetHostByAddr(uint32_t _0, uint32_t _1, uint32_t _2, uint64_t _3, uint64_t _4, uint8_t * _5, unsigned int _5_size, uint32_t& _6, uint32_t& _7, uint32_t& _8, uint8_t *& _9, unsigned int _9_size);
		uint32_t GetHostByName(uint8_t _0, uint32_t _1, uint64_t _2, uint64_t _3, uint8_t * _4, unsigned int _4_size, uint32_t& _5, uint32_t& _6, uint32_t& _7, uint8_t *& _8, unsigned int _8_size);
		uint32_t GetHostStringError(uint32_t _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t GetNameInfo(uint32_t _0, uint32_t _1, uint64_t _2, uint64_t _3, uint8_t * _4, unsigned int _4_size, uint32_t& _5, uint32_t& _6, uint8_t *& _7, unsigned int _7_size, uint8_t *& _8, unsigned int _8_size);
		uint32_t RequestCancelHandle(uint64_t _0, uint64_t _1, uint32_t& _2);
		uint32_t SetDnsAddressesPrivate(uint32_t _0, uint8_t * _1, unsigned int _1_size);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::socket::resolver::IResolver::CancelSocketCall(uint32_t _0, uint64_t _1, uint64_t _2) {
	ns_print("Stub implementation for nn::socket::resolver::IResolver::CancelSocketCall\n");
	return 0;
}
uint32_t nn::socket::resolver::IResolver::GetAddrInfo(bool enable_nsd_resolve, uint32_t _1, uint64_t pid_placeholder, uint64_t _3, int8_t * host, unsigned int host_size, int8_t * service, unsigned int service_size, packed_addrinfo * hints, unsigned int hints_size, int32_t& ret, uint32_t& bsd_errno, uint32_t& packed_addrinfo_size, packed_addrinfo *& response, unsigned int response_size) {
	ns_print("Stub implementation for nn::socket::resolver::IResolver::GetAddrInfo\n");
	return 0;
}
uint32_t nn::socket::resolver::IResolver::GetDnsAddressPrivate(uint32_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::socket::resolver::IResolver::GetDnsAddressPrivate\n");
	return 0;
}
uint32_t nn::socket::resolver::IResolver::GetGaiStringError(uint32_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::socket::resolver::IResolver::GetGaiStringError\n");
	return 0;
}
uint32_t nn::socket::resolver::IResolver::GetHostByAddr(uint32_t _0, uint32_t _1, uint32_t _2, uint64_t _3, uint64_t _4, uint8_t * _5, unsigned int _5_size, uint32_t& _6, uint32_t& _7, uint32_t& _8, uint8_t *& _9, unsigned int _9_size) {
	ns_print("Stub implementation for nn::socket::resolver::IResolver::GetHostByAddr\n");
	return 0;
}
uint32_t nn::socket::resolver::IResolver::GetHostByName(uint8_t _0, uint32_t _1, uint64_t _2, uint64_t _3, uint8_t * _4, unsigned int _4_size, uint32_t& _5, uint32_t& _6, uint32_t& _7, uint8_t *& _8, unsigned int _8_size) {
	ns_print("Stub implementation for nn::socket::resolver::IResolver::GetHostByName\n");
	return 0;
}
uint32_t nn::socket::resolver::IResolver::GetHostStringError(uint32_t _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::socket::resolver::IResolver::GetHostStringError\n");
	return 0;
}
uint32_t nn::socket::resolver::IResolver::GetNameInfo(uint32_t _0, uint32_t _1, uint64_t _2, uint64_t _3, uint8_t * _4, unsigned int _4_size, uint32_t& _5, uint32_t& _6, uint8_t *& _7, unsigned int _7_size, uint8_t *& _8, unsigned int _8_size) {
	ns_print("Stub implementation for nn::socket::resolver::IResolver::GetNameInfo\n");
	return 0;
}
uint32_t nn::socket::resolver::IResolver::RequestCancelHandle(uint64_t _0, uint64_t _1, uint32_t& _2) {
	ns_print("Stub implementation for nn::socket::resolver::IResolver::RequestCancelHandle\n");
	return 0;
}
uint32_t nn::socket::resolver::IResolver::SetDnsAddressesPrivate(uint32_t _0, uint8_t * _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::socket::resolver::IResolver::SetDnsAddressesPrivate\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::socket::sf {
	class IClient : public IpcService {
	public:
		IClient() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::socket::sf::IClient::RegisterClient: uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint64_t = 0x%%lx, uint64_t pid = 0x%%lx, uint64_t transferMemorySize = 0x%%lx, KObject = 0x%x\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint64_t>(0x18), req->GetData<uint64_t>(0x20), req->GetData<uint64_t>(0x28), req->GetData<uint64_t>(0x30), req->GetCopied(0));
				resp->error_code = RegisterClient(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->GetData<uint64_t>(0x18), req->GetData<uint64_t>(0x20), req->GetData<uint64_t>(0x28), req->GetData<uint64_t>(0x30), req->pid, IPC::GetHandle<IpcService*>(req->GetCopied(0)), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::socket::sf::IClient::StartMonitoring: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = StartMonitoring(req->GetData<uint64_t>(8), req->pid);
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::socket::sf::IClient::Socket: uint32_t domain = 0x%x, uint32_t type = 0x%x, uint32_t protocol = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10));
				resp->error_code = Socket(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::socket::sf::IClient::SocketExempt: uint32_t = 0x%x, uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10));
				resp->error_code = SocketExempt(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::socket::sf::IClient::Open: uint32_t = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), temp2);
				resp->error_code = Open(req->GetData<uint32_t>(8), temp3, temp2, *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				fd_set* temp3 = (fd_set *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x21, 1, temp5);
				fd_set* temp6 = (fd_set *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				unsigned int temp8;
				auto temp7 = req->GetBuffer(0x21, 2, temp8);
				fd_set* temp9 = (fd_set *) new uint8_t[temp8];
				ARMv8::ReadBytes(temp7, (uint8_t *)temp9, temp8);
				unsigned int temp11;
				auto temp10 = req->GetBuffer(0x22, 0, temp11);
				fd_set* temp12 = (fd_set *) new uint8_t[temp11];
				unsigned int temp14;
				auto temp13 = req->GetBuffer(0x22, 1, temp14);
				fd_set* temp15 = (fd_set *) new uint8_t[temp14];
				unsigned int temp17;
				auto temp16 = req->GetBuffer(0x22, 2, temp17);
				fd_set* temp18 = (fd_set *) new uint8_t[temp17];
				ns_print("IPC message to nn::socket::sf::IClient::Select: uint32_t nfds = 0x%x, uint8_t[0x18] timeout = %s, fd_set *readfds_in = buffer<0x%lx>, fd_set *writefds_in = buffer<0x%lx>, fd_set *errorfds_in = buffer<0x%lx>\n", req->GetData<uint32_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x18).c_str(), temp2, temp5, temp8);
				resp->error_code = Select(req->GetData<uint32_t>(8), req->GetDataPointer<uint8_t *>(0x10), temp3, temp2, temp6, temp5, temp9, temp8, *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), temp12, temp11, temp15, temp14, temp18, temp17);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				delete[] (uint8_t *) temp9;
				ARMv8::WriteBytes(temp10, (uint8_t *) temp12, temp11);
				delete[] (uint8_t *)temp12;
				ARMv8::WriteBytes(temp13, (uint8_t *) temp15, temp14);
				delete[] (uint8_t *)temp15;
				ARMv8::WriteBytes(temp16, (uint8_t *) temp18, temp17);
				delete[] (uint8_t *)temp18;
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x22, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::socket::sf::IClient::Poll: uint32_t = 0x%x, uint32_t = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), temp2);
				resp->error_code = Poll(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), temp3, temp2, *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 12);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x21, 1, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				unsigned int temp8;
				auto temp7 = req->GetBuffer(0x22, 0, temp8);
				uint8_t* temp9 = (uint8_t *) new uint8_t[temp8];
				ns_print("IPC message to nn::socket::sf::IClient::Sysctl: uint8_t *= buffer<0x%lx>, uint8_t *= buffer<0x%lx>\n", temp2, temp5);
				resp->error_code = Sysctl(temp3, temp2, temp6, temp5, *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), *resp->GetDataPointer<uint32_t *>(0x10), temp9, temp8);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				ARMv8::WriteBytes(temp7, (uint8_t *) temp9, temp8);
				delete[] (uint8_t *)temp9;
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::socket::sf::IClient::Recv: uint32_t socket = 0x%x, uint32_t flags = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Recv(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 12);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x22, 1, temp5);
				sockaddr* temp6 = (sockaddr *) new uint8_t[temp5];
				ns_print("IPC message to nn::socket::sf::IClient::RecvFrom: uint32_t sock = 0x%x, uint32_t flags = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = RecvFrom(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), *resp->GetDataPointer<uint32_t *>(0x10), temp3, temp2, temp6, temp5);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::socket::sf::IClient::Send: uint32_t socket = 0x%x, uint32_t flags = 0x%x, int8_t *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), temp2);
				resp->error_code = Send(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), temp3, temp2, *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x21, 1, temp5);
				sockaddr* temp6 = (sockaddr *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				ns_print("IPC message to nn::socket::sf::IClient::SendTo: uint32_t socket = 0x%x, uint32_t flags = 0x%x, int8_t *= buffer<0x%lx>, sockaddr *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), temp2, temp5);
				resp->error_code = SendTo(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), temp3, temp2, temp6, temp5, *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 12);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				sockaddr* temp3 = (sockaddr *) new uint8_t[temp2];
				ns_print("IPC message to nn::socket::sf::IClient::Accept: uint32_t socket = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Accept(req->GetData<uint32_t>(8), *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), *resp->GetDataPointer<uint32_t *>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				sockaddr* temp3 = (sockaddr *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::socket::sf::IClient::Bind: uint32_t socket = 0x%x, sockaddr *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), temp2);
				resp->error_code = Bind(req->GetData<uint32_t>(8), temp3, temp2, *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				sockaddr* temp3 = (sockaddr *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::socket::sf::IClient::Connect: uint32_t socket = 0x%x, sockaddr *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), temp2);
				resp->error_code = Connect(req->GetData<uint32_t>(8), temp3, temp2, *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 12);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				sockaddr* temp3 = (sockaddr *) new uint8_t[temp2];
				ns_print("IPC message to nn::socket::sf::IClient::GetPeerName: uint32_t socket = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = GetPeerName(req->GetData<uint32_t>(8), *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), *resp->GetDataPointer<uint32_t *>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 12);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				sockaddr* temp3 = (sockaddr *) new uint8_t[temp2];
				ns_print("IPC message to nn::socket::sf::IClient::GetSockName: uint32_t socket = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = GetSockName(req->GetData<uint32_t>(8), *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), *resp->GetDataPointer<uint32_t *>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 12);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::socket::sf::IClient::GetSockOpt: uint32_t = 0x%x, uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10));
				resp->error_code = GetSockOpt(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), *resp->GetDataPointer<uint32_t *>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::socket::sf::IClient::Listen: uint32_t socket = 0x%x, uint32_t backlog = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Listen(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x21, 1, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				unsigned int temp8;
				auto temp7 = req->GetBuffer(0x21, 2, temp8);
				uint8_t* temp9 = (uint8_t *) new uint8_t[temp8];
				ARMv8::ReadBytes(temp7, (uint8_t *)temp9, temp8);
				unsigned int temp11;
				auto temp10 = req->GetBuffer(0x21, 3, temp11);
				uint8_t* temp12 = (uint8_t *) new uint8_t[temp11];
				ARMv8::ReadBytes(temp10, (uint8_t *)temp12, temp11);
				unsigned int temp14;
				auto temp13 = req->GetBuffer(0x22, 0, temp14);
				uint8_t* temp15 = (uint8_t *) new uint8_t[temp14];
				unsigned int temp17;
				auto temp16 = req->GetBuffer(0x22, 1, temp17);
				uint8_t* temp18 = (uint8_t *) new uint8_t[temp17];
				unsigned int temp20;
				auto temp19 = req->GetBuffer(0x22, 2, temp20);
				uint8_t* temp21 = (uint8_t *) new uint8_t[temp20];
				unsigned int temp23;
				auto temp22 = req->GetBuffer(0x22, 3, temp23);
				uint8_t* temp24 = (uint8_t *) new uint8_t[temp23];
				ns_print("IPC message to nn::socket::sf::IClient::Ioctl: uint32_t = 0x%x, uint32_t = 0x%x, uint32_t = 0x%x, uint8_t *= buffer<0x%lx>, uint8_t *= buffer<0x%lx>, uint8_t *= buffer<0x%lx>, uint8_t *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), temp2, temp5, temp8, temp11);
				resp->error_code = Ioctl(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), temp3, temp2, temp6, temp5, temp9, temp8, temp12, temp11, *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), temp15, temp14, temp18, temp17, temp21, temp20, temp24, temp23);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				delete[] (uint8_t *) temp9;
				delete[] (uint8_t *) temp12;
				ARMv8::WriteBytes(temp13, (uint8_t *) temp15, temp14);
				delete[] (uint8_t *)temp15;
				ARMv8::WriteBytes(temp16, (uint8_t *) temp18, temp17);
				delete[] (uint8_t *)temp18;
				ARMv8::WriteBytes(temp19, (uint8_t *) temp21, temp20);
				delete[] (uint8_t *)temp21;
				ARMv8::WriteBytes(temp22, (uint8_t *) temp24, temp23);
				delete[] (uint8_t *)temp24;
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::socket::sf::IClient::Fcntl: uint32_t = 0x%x, uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10));
				resp->error_code = Fcntl(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::socket::sf::IClient::SetSockOpt: uint32_t socket = 0x%x, uint32_t level = 0x%x, uint32_t option_name = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), temp2);
				resp->error_code = SetSockOpt(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), temp3, temp2, *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::socket::sf::IClient::Shutdown: uint32_t socket = 0x%x, uint32_t how = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Shutdown(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::socket::sf::IClient::ShutdownAllSockets: uint32_t how = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = ShutdownAllSockets(req->GetData<uint32_t>(8), *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 24: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::socket::sf::IClient::Write: uint32_t socket = 0x%x, int8_t *message = buffer<0x%lx>\n", req->GetData<uint32_t>(8), temp2);
				resp->error_code = Write(req->GetData<uint32_t>(8), temp3, temp2, *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 25: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				int8_t* temp3 = (int8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::socket::sf::IClient::Read: uint32_t socket = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Read(req->GetData<uint32_t>(8), *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 26: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::socket::sf::IClient::Close: uint32_t socket = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Close(req->GetData<uint32_t>(8), *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 27: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::socket::sf::IClient::DuplicateSocket: uint32_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = DuplicateSocket(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10), *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 28: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::socket::sf::IClient::GetResourceStatistics: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetResourceStatistics(req->GetData<uint64_t>(8), req->pid, *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 29: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::socket::sf::IClient::RecvMMsg: uint32_t = 0x%x, uint32_t = 0x%x, uint32_t = 0x%x, uint128_t = %s\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), read_string(req->GetDataPointer<uint8_t *>(0x18), 0x10).c_str());
				resp->error_code = RecvMMsg(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), req->GetData<uint128_t>(0x18), *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 30: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x21, 1, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				ns_print("IPC message to nn::socket::sf::IClient::SendMMsg: uint32_t = 0x%x, uint32_t = 0x%x, uint32_t = 0x%x, uint8_t *= buffer<0x%lx>, uint8_t *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), temp2, temp5);
				resp->error_code = SendMMsg(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), temp3, temp2, temp6, temp5, *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::socket::sf::IClient", req->cmd_id);
			}
		}
		uint32_t Accept(uint32_t socket, int32_t& ret, uint32_t& bsd_errno, uint32_t& addrlen, sockaddr *& addr, unsigned int addr_size);
		uint32_t Bind(uint32_t socket, sockaddr * _1, unsigned int _1_size, int32_t& ret, uint32_t& bsd_errno);
		uint32_t Close(uint32_t socket, int32_t& ret, uint32_t& bsd_errno);
		uint32_t Connect(uint32_t socket, sockaddr * _1, unsigned int _1_size, int32_t& ret, uint32_t& bsd_errno);
		uint32_t DuplicateSocket(uint32_t _0, uint64_t _1, int32_t& ret, uint32_t& bsd_errno);
		uint32_t Fcntl(uint32_t _0, uint32_t _1, uint32_t _2, int32_t& ret, uint32_t& bsd_errno);
		uint32_t GetPeerName(uint32_t socket, int32_t& ret, uint32_t& bsd_errno, uint32_t& addrlen, sockaddr *& addr, unsigned int addr_size);
		uint32_t GetResourceStatistics(uint64_t _0, uint64_t _1, int32_t& ret, uint32_t& bsd_errno, uint8_t *& _4, unsigned int _4_size);
		uint32_t GetSockName(uint32_t socket, int32_t& ret, uint32_t& bsd_errno, uint32_t& addrlen, sockaddr *& addr, unsigned int addr_size);
		uint32_t GetSockOpt(uint32_t _0, uint32_t _1, uint32_t _2, int32_t& ret, uint32_t& bsd_errno, uint32_t& _5, uint8_t *& _6, unsigned int _6_size);
		uint32_t Ioctl(uint32_t _0, uint32_t _1, uint32_t _2, uint8_t * _3, unsigned int _3_size, uint8_t * _4, unsigned int _4_size, uint8_t * _5, unsigned int _5_size, uint8_t * _6, unsigned int _6_size, int32_t& ret, uint32_t& bsd_errno, uint8_t *& _9, unsigned int _9_size, uint8_t *& _10, unsigned int _10_size, uint8_t *& _11, unsigned int _11_size, uint8_t *& _12, unsigned int _12_size);
		uint32_t Listen(uint32_t socket, uint32_t backlog, int32_t& ret, uint32_t& bsd_errno);
		uint32_t Open(uint32_t _0, uint8_t * _1, unsigned int _1_size, int32_t& ret, uint32_t& bsd_errno);
		uint32_t Poll(uint32_t _0, uint32_t _1, uint8_t * _2, unsigned int _2_size, int32_t& ret, uint32_t& bsd_errno, uint8_t *& _5, unsigned int _5_size);
		uint32_t Read(uint32_t socket, int32_t& ret, uint32_t& bsd_errno, int8_t *& message, unsigned int message_size);
		uint32_t Recv(uint32_t socket, uint32_t flags, int32_t& ret, uint32_t& bsd_errno, int8_t *& message, unsigned int message_size);
		uint32_t RecvFrom(uint32_t sock, uint32_t flags, int32_t& ret, uint32_t& bsd_errno, uint32_t& addrlen, int8_t *& message, unsigned int message_size, sockaddr *& _6, unsigned int _6_size);
		uint32_t RecvMMsg(uint32_t _0, uint32_t _1, uint32_t _2, uint128_t _3, int32_t& ret, uint32_t& bsd_errno, uint8_t *& _6, unsigned int _6_size);
		uint32_t RegisterClient(uint64_t _0, uint64_t _1, uint64_t _2, uint64_t _3, uint64_t pid, uint64_t transferMemorySize, uint64_t _6, IpcService* _7, uint32_t& bsd_errno);
		uint32_t Select(uint32_t nfds, uint8_t * timeout, fd_set * readfds_in, unsigned int readfds_in_size, fd_set * writefds_in, unsigned int writefds_in_size, fd_set * errorfds_in, unsigned int errorfds_in_size, int32_t& ret, uint32_t& bsd_errno, fd_set *& readfds_out, unsigned int readfds_out_size, fd_set *& writefds_out, unsigned int writefds_out_size, fd_set *& errorfds_out, unsigned int errorfds_out_size);
		uint32_t Send(uint32_t socket, uint32_t flags, int8_t * _2, unsigned int _2_size, int32_t& ret, uint32_t& bsd_errno);
		uint32_t SendMMsg(uint32_t _0, uint32_t _1, uint32_t _2, uint8_t * _3, unsigned int _3_size, uint8_t * _4, unsigned int _4_size, int32_t& ret, uint32_t& bsd_errno);
		uint32_t SendTo(uint32_t socket, uint32_t flags, int8_t * _2, unsigned int _2_size, sockaddr * _3, unsigned int _3_size, int32_t& ret, uint32_t& bsd_errno);
		uint32_t SetSockOpt(uint32_t socket, uint32_t level, uint32_t option_name, uint8_t * _3, unsigned int _3_size, int32_t& ret, uint32_t& bsd_errno);
		uint32_t Shutdown(uint32_t socket, uint32_t how, int32_t& ret, uint32_t& bsd_errno);
		uint32_t ShutdownAllSockets(uint32_t how, int32_t& ret, uint32_t& bsd_errno);
		uint32_t Socket(uint32_t domain, uint32_t type, uint32_t protocol, int32_t& ret, uint32_t& bsd_errno);
		uint32_t SocketExempt(uint32_t _0, uint32_t _1, uint32_t _2, int32_t& ret, uint32_t& bsd_errno);
		uint32_t StartMonitoring(uint64_t _0, uint64_t _1);
		uint32_t Sysctl(uint8_t * _0, unsigned int _0_size, uint8_t * _1, unsigned int _1_size, int32_t& ret, uint32_t& bsd_errno, uint32_t& _4, uint8_t *& _5, unsigned int _5_size);
		uint32_t Write(uint32_t socket, int8_t * message, unsigned int message_size, int32_t& ret, uint32_t& bsd_errno);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::socket::sf::IClient::DuplicateSocket(uint32_t _0, uint64_t _1, int32_t& ret, uint32_t& bsd_errno) {
	ns_print("Stub implementation for nn::socket::sf::IClient::DuplicateSocket\n");
	return 0;
}
uint32_t nn::socket::sf::IClient::Fcntl(uint32_t _0, uint32_t _1, uint32_t _2, int32_t& ret, uint32_t& bsd_errno) {
	ns_print("Stub implementation for nn::socket::sf::IClient::Fcntl\n");
	return 0;
}
uint32_t nn::socket::sf::IClient::GetPeerName(uint32_t socket, int32_t& ret, uint32_t& bsd_errno, uint32_t& addrlen, sockaddr *& addr, unsigned int addr_size) {
	ns_print("Stub implementation for nn::socket::sf::IClient::GetPeerName\n");
	return 0;
}
uint32_t nn::socket::sf::IClient::GetResourceStatistics(uint64_t _0, uint64_t _1, int32_t& ret, uint32_t& bsd_errno, uint8_t *& _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::socket::sf::IClient::GetResourceStatistics\n");
	return 0;
}
uint32_t nn::socket::sf::IClient::GetSockOpt(uint32_t _0, uint32_t _1, uint32_t _2, int32_t& ret, uint32_t& bsd_errno, uint32_t& _5, uint8_t *& _6, unsigned int _6_size) {
	ns_print("Stub implementation for nn::socket::sf::IClient::GetSockOpt\n");
	return 0;
}
uint32_t nn::socket::sf::IClient::Ioctl(uint32_t _0, uint32_t _1, uint32_t _2, uint8_t * _3, unsigned int _3_size, uint8_t * _4, unsigned int _4_size, uint8_t * _5, unsigned int _5_size, uint8_t * _6, unsigned int _6_size, int32_t& ret, uint32_t& bsd_errno, uint8_t *& _9, unsigned int _9_size, uint8_t *& _10, unsigned int _10_size, uint8_t *& _11, unsigned int _11_size, uint8_t *& _12, unsigned int _12_size) {
	ns_print("Stub implementation for nn::socket::sf::IClient::Ioctl\n");
	return 0;
}
uint32_t nn::socket::sf::IClient::Open(uint32_t _0, uint8_t * _1, unsigned int _1_size, int32_t& ret, uint32_t& bsd_errno) {
	ns_print("Stub implementation for nn::socket::sf::IClient::Open\n");
	return 0;
}
uint32_t nn::socket::sf::IClient::Poll(uint32_t _0, uint32_t _1, uint8_t * _2, unsigned int _2_size, int32_t& ret, uint32_t& bsd_errno, uint8_t *& _5, unsigned int _5_size) {
	ns_print("Stub implementation for nn::socket::sf::IClient::Poll\n");
	return 0;
}
uint32_t nn::socket::sf::IClient::Read(uint32_t socket, int32_t& ret, uint32_t& bsd_errno, int8_t *& message, unsigned int message_size) {
	ns_print("Stub implementation for nn::socket::sf::IClient::Read\n");
	return 0;
}
uint32_t nn::socket::sf::IClient::RecvFrom(uint32_t sock, uint32_t flags, int32_t& ret, uint32_t& bsd_errno, uint32_t& addrlen, int8_t *& message, unsigned int message_size, sockaddr *& _6, unsigned int _6_size) {
	ns_print("Stub implementation for nn::socket::sf::IClient::RecvFrom\n");
	return 0;
}
uint32_t nn::socket::sf::IClient::RecvMMsg(uint32_t _0, uint32_t _1, uint32_t _2, uint128_t _3, int32_t& ret, uint32_t& bsd_errno, uint8_t *& _6, unsigned int _6_size) {
	ns_print("Stub implementation for nn::socket::sf::IClient::RecvMMsg\n");
	return 0;
}
uint32_t nn::socket::sf::IClient::RegisterClient(uint64_t _0, uint64_t _1, uint64_t _2, uint64_t _3, uint64_t pid, uint64_t transferMemorySize, uint64_t _6, IpcService* _7, uint32_t& bsd_errno) {
	ns_print("Stub implementation for nn::socket::sf::IClient::RegisterClient\n");
	return 0;
}
uint32_t nn::socket::sf::IClient::Select(uint32_t nfds, uint8_t * timeout, fd_set * readfds_in, unsigned int readfds_in_size, fd_set * writefds_in, unsigned int writefds_in_size, fd_set * errorfds_in, unsigned int errorfds_in_size, int32_t& ret, uint32_t& bsd_errno, fd_set *& readfds_out, unsigned int readfds_out_size, fd_set *& writefds_out, unsigned int writefds_out_size, fd_set *& errorfds_out, unsigned int errorfds_out_size) {
	ns_print("Stub implementation for nn::socket::sf::IClient::Select\n");
	return 0;
}
uint32_t nn::socket::sf::IClient::SendMMsg(uint32_t _0, uint32_t _1, uint32_t _2, uint8_t * _3, unsigned int _3_size, uint8_t * _4, unsigned int _4_size, int32_t& ret, uint32_t& bsd_errno) {
	ns_print("Stub implementation for nn::socket::sf::IClient::SendMMsg\n");
	return 0;
}
uint32_t nn::socket::sf::IClient::ShutdownAllSockets(uint32_t how, int32_t& ret, uint32_t& bsd_errno) {
	ns_print("Stub implementation for nn::socket::sf::IClient::ShutdownAllSockets\n");
	return 0;
}
uint32_t nn::socket::sf::IClient::SocketExempt(uint32_t _0, uint32_t _1, uint32_t _2, int32_t& ret, uint32_t& bsd_errno) {
	ns_print("Stub implementation for nn::socket::sf::IClient::SocketExempt\n");
	return 0;
}
uint32_t nn::socket::sf::IClient::StartMonitoring(uint64_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::socket::sf::IClient::StartMonitoring\n");
	return 0;
}
uint32_t nn::socket::sf::IClient::Sysctl(uint8_t * _0, unsigned int _0_size, uint8_t * _1, unsigned int _1_size, int32_t& ret, uint32_t& bsd_errno, uint32_t& _4, uint8_t *& _5, unsigned int _5_size) {
	ns_print("Stub implementation for nn::socket::sf::IClient::Sysctl\n");
	return 0;
}
uint32_t nn::socket::sf::IClient::Write(uint32_t socket, int8_t * message, unsigned int message_size, int32_t& ret, uint32_t& bsd_errno) {
	ns_print("Stub implementation for nn::socket::sf::IClient::Write\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::spl::detail {
	class IGeneralInterface : public IpcService {
	public:
		IGeneralInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown0: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown0(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown11\n");
				resp->error_code = Unknown11(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown12\n");
				resp->error_code = Unknown12();
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown13\n");
				resp->error_code = Unknown13();
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown14\n");
				resp->error_code = Unknown14();
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown15\n");
				resp->error_code = Unknown15();
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown16\n");
				resp->error_code = Unknown16();
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown17\n");
				resp->error_code = Unknown17();
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown18\n");
				resp->error_code = Unknown18();
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown19\n");
				resp->error_code = Unknown19();
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown20\n");
				resp->error_code = Unknown20();
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown21\n");
				resp->error_code = Unknown21(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown22: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown22(req->GetData<uint32_t>(8));
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown23\n");
				resp->error_code = Unknown23(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 24: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown24\n");
				resp->error_code = Unknown24();
				return 0;
			}
			case 25: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spl::detail::IGeneralInterface::Unknown25\n");
				resp->error_code = Unknown25();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::spl::detail::IGeneralInterface", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t _0, uint64_t& _1);
		uint32_t Unknown1();
		uint32_t Unknown10();
		uint32_t Unknown11(uint8_t& _0);
		uint32_t Unknown12();
		uint32_t Unknown13();
		uint32_t Unknown14();
		uint32_t Unknown15();
		uint32_t Unknown16();
		uint32_t Unknown17();
		uint32_t Unknown18();
		uint32_t Unknown19();
		uint32_t Unknown2();
		uint32_t Unknown20();
		uint32_t Unknown21(uint32_t& _0);
		uint32_t Unknown22(uint32_t _0);
		uint32_t Unknown23(IpcService*& _0);
		uint32_t Unknown24();
		uint32_t Unknown25();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown7();
		uint32_t Unknown9();
	};
	class IRandomInterface : public IpcService {
	public:
		IRandomInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::spl::detail::IRandomInterface::Unknown0\n");
				resp->error_code = Unknown0(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::spl::detail::IRandomInterface", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint8_t *& _0, unsigned int _0_size);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::spl::detail::IGeneralInterface::Unknown0(uint32_t _0, uint64_t& _1) {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown0\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown1() {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown1\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown10() {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown10\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown11(uint8_t& _0) {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown11\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown12() {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown12\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown13() {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown13\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown14() {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown14\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown15() {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown15\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown16() {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown16\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown17() {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown17\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown18() {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown18\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown19() {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown19\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown2() {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown2\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown20() {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown20\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown21(uint32_t& _0) {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown21\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown22(uint32_t _0) {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown22\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown23(IpcService*& _0) {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown23\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown24() {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown24\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown25() {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown25\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown3() {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown3\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown4() {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown4\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown5() {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown5\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown7() {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown7\n");
	return 0;
}
uint32_t nn::spl::detail::IGeneralInterface::Unknown9() {
	ns_print("Stub implementation for nn::spl::detail::IGeneralInterface::Unknown9\n");
	return 0;
}
uint32_t nn::spl::detail::IRandomInterface::Unknown0(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::spl::detail::IRandomInterface::Unknown0\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::spsm::detail {
	class IPowerStateInterface : public IpcService {
	public:
		IPowerStateInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::spsm::detail::IPowerStateInterface::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::spsm::detail::IPowerStateInterface::Unknown1\n");
				resp->error_code = Unknown1(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::spsm::detail::IPowerStateInterface::Unknown2\n");
				resp->error_code = Unknown2(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spsm::detail::IPowerStateInterface::Unknown3: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown3(req->GetData<uint8_t>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::spsm::detail::IPowerStateInterface::Unknown4\n");
				resp->error_code = Unknown4(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::spsm::detail::IPowerStateInterface::Unknown5\n");
				resp->error_code = Unknown5(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spsm::detail::IPowerStateInterface::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spsm::detail::IPowerStateInterface::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::spsm::detail::IPowerStateInterface::Unknown8\n");
				resp->error_code = Unknown8(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spsm::detail::IPowerStateInterface::Unknown9: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown9(req->GetData<uint64_t>(8));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spsm::detail::IPowerStateInterface::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::spsm::detail::IPowerStateInterface::Unknown11: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown11(req->GetData<uint64_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::spsm::detail::IPowerStateInterface", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t& _0);
		uint32_t Unknown1(IpcService*& _0);
		uint32_t Unknown10();
		uint32_t Unknown11(uint64_t _0);
		uint32_t Unknown2(uint32_t& _0);
		uint32_t Unknown3(uint8_t _0);
		uint32_t Unknown4(IpcService*& _0);
		uint32_t Unknown5(uint32_t& _0);
		uint32_t Unknown6();
		uint32_t Unknown7();
		uint32_t Unknown8(uint8_t *& _0, unsigned int _0_size);
		uint32_t Unknown9(uint64_t _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::spsm::detail::IPowerStateInterface::Unknown0(uint32_t& _0) {
	ns_print("Stub implementation for nn::spsm::detail::IPowerStateInterface::Unknown0\n");
	return 0;
}
uint32_t nn::spsm::detail::IPowerStateInterface::Unknown1(IpcService*& _0) {
	ns_print("Stub implementation for nn::spsm::detail::IPowerStateInterface::Unknown1\n");
	return 0;
}
uint32_t nn::spsm::detail::IPowerStateInterface::Unknown10() {
	ns_print("Stub implementation for nn::spsm::detail::IPowerStateInterface::Unknown10\n");
	return 0;
}
uint32_t nn::spsm::detail::IPowerStateInterface::Unknown11(uint64_t _0) {
	ns_print("Stub implementation for nn::spsm::detail::IPowerStateInterface::Unknown11\n");
	return 0;
}
uint32_t nn::spsm::detail::IPowerStateInterface::Unknown2(uint32_t& _0) {
	ns_print("Stub implementation for nn::spsm::detail::IPowerStateInterface::Unknown2\n");
	return 0;
}
uint32_t nn::spsm::detail::IPowerStateInterface::Unknown3(uint8_t _0) {
	ns_print("Stub implementation for nn::spsm::detail::IPowerStateInterface::Unknown3\n");
	return 0;
}
uint32_t nn::spsm::detail::IPowerStateInterface::Unknown4(IpcService*& _0) {
	ns_print("Stub implementation for nn::spsm::detail::IPowerStateInterface::Unknown4\n");
	return 0;
}
uint32_t nn::spsm::detail::IPowerStateInterface::Unknown5(uint32_t& _0) {
	ns_print("Stub implementation for nn::spsm::detail::IPowerStateInterface::Unknown5\n");
	return 0;
}
uint32_t nn::spsm::detail::IPowerStateInterface::Unknown6() {
	ns_print("Stub implementation for nn::spsm::detail::IPowerStateInterface::Unknown6\n");
	return 0;
}
uint32_t nn::spsm::detail::IPowerStateInterface::Unknown7() {
	ns_print("Stub implementation for nn::spsm::detail::IPowerStateInterface::Unknown7\n");
	return 0;
}
uint32_t nn::spsm::detail::IPowerStateInterface::Unknown8(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::spsm::detail::IPowerStateInterface::Unknown8\n");
	return 0;
}
uint32_t nn::spsm::detail::IPowerStateInterface::Unknown9(uint64_t _0) {
	ns_print("Stub implementation for nn::spsm::detail::IPowerStateInterface::Unknown9\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::ssl::sf {
	class ISslConnection : public IpcService {
	public:
		ISslConnection() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::ssl::sf::ISslConnection::SetSocketDescriptor: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = SetSocketDescriptor(req->GetData<int32_t>(8), *resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::ssl::sf::ISslConnection::SetHostName: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = SetHostName(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ssl::sf::ISslConnection::SetVerifyOption: nn::ssl::sf::VerifyOption = 0x%x\n", req->GetData<nn::ssl::sf::VerifyOption>(8));
				resp->error_code = SetVerifyOption(req->GetData<nn::ssl::sf::VerifyOption>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ssl::sf::ISslConnection::SetIoMode: nn::ssl::sf::IoMode = 0x%x\n", req->GetData<nn::ssl::sf::IoMode>(8));
				resp->error_code = SetIoMode(req->GetData<nn::ssl::sf::IoMode>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::ssl::sf::ISslConnection::GetSocketDescriptor\n");
				resp->error_code = GetSocketDescriptor(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ssl::sf::ISslConnection::GetHostName\n");
				resp->error_code = GetHostName(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::ssl::sf::ISslConnection::GetVerifyOption\n");
				resp->error_code = GetVerifyOption(*resp->GetDataPointer<nn::ssl::sf::VerifyOption *>(8));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::ssl::sf::ISslConnection::GetIoMode\n");
				resp->error_code = GetIoMode(*resp->GetDataPointer<nn::ssl::sf::IoMode *>(8));
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ssl::sf::ISslConnection::DoHandshake\n");
				resp->error_code = DoHandshake();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ssl::sf::ISslConnection::DoHandshakeGetServerCert\n");
				resp->error_code = DoHandshakeGetServerCert(*resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ssl::sf::ISslConnection::Read\n");
				resp->error_code = Read(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::ssl::sf::ISslConnection::Write: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Write(temp3, temp2, *resp->GetDataPointer<uint32_t *>(8));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::ssl::sf::ISslConnection::Pending\n");
				resp->error_code = Pending(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ssl::sf::ISslConnection::Peek\n");
				resp->error_code = Peek(*resp->GetDataPointer<uint32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::ssl::sf::ISslConnection::Poll: nn::ssl::sf::PollEvent = 0x%x, uint32_t = 0x%x\n", req->GetData<nn::ssl::sf::PollEvent>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Poll(req->GetData<nn::ssl::sf::PollEvent>(8), req->GetData<uint32_t>(0xc), *resp->GetDataPointer<nn::ssl::sf::PollEvent *>(8));
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ssl::sf::ISslConnection::GetVerifyCertError\n");
				resp->error_code = GetVerifyCertError();
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::ssl::sf::ISslConnection::GetNeededServerCertBufferSize\n");
				resp->error_code = GetNeededServerCertBufferSize(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ssl::sf::ISslConnection::SetSessionCacheMode: nn::ssl::sf::SessionCacheMode = 0x%x\n", req->GetData<nn::ssl::sf::SessionCacheMode>(8));
				resp->error_code = SetSessionCacheMode(req->GetData<nn::ssl::sf::SessionCacheMode>(8));
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::ssl::sf::ISslConnection::GetSessionCacheMode\n");
				resp->error_code = GetSessionCacheMode(*resp->GetDataPointer<nn::ssl::sf::SessionCacheMode *>(8));
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ssl::sf::ISslConnection::FlushSessionCache\n");
				resp->error_code = FlushSessionCache();
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ssl::sf::ISslConnection::SetRenegotiationMode: nn::ssl::sf::RenegotiationMode = 0x%x\n", req->GetData<nn::ssl::sf::RenegotiationMode>(8));
				resp->error_code = SetRenegotiationMode(req->GetData<nn::ssl::sf::RenegotiationMode>(8));
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::ssl::sf::ISslConnection::GetRenegotiationMode\n");
				resp->error_code = GetRenegotiationMode(*resp->GetDataPointer<nn::ssl::sf::RenegotiationMode *>(8));
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ssl::sf::ISslConnection::SetOption: bool = 0x%x, nn::ssl::sf::OptionType = 0x%x\n", req->GetData<bool>(8), req->GetData<nn::ssl::sf::OptionType>(0xc));
				resp->error_code = SetOption(req->GetData<bool>(8), req->GetData<nn::ssl::sf::OptionType>(0xc));
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::ssl::sf::ISslConnection::GetOption: nn::ssl::sf::OptionType = 0x%x\n", req->GetData<nn::ssl::sf::OptionType>(8));
				resp->error_code = GetOption(req->GetData<nn::ssl::sf::OptionType>(8), *resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 24: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::ssl::sf::ISslConnection::GetVerifyCertErrors\n");
				resp->error_code = GetVerifyCertErrors(*resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ssl::sf::ISslConnection", req->cmd_id);
			}
		}
		uint32_t DoHandshake();
		uint32_t DoHandshakeGetServerCert(uint32_t& _0, uint32_t& _1, uint8_t *& _2, unsigned int _2_size);
		uint32_t FlushSessionCache();
		uint32_t GetHostName(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t GetIoMode(nn::ssl::sf::IoMode& _0);
		uint32_t GetNeededServerCertBufferSize(uint32_t& _0);
		uint32_t GetOption(nn::ssl::sf::OptionType _0, bool& _1);
		uint32_t GetRenegotiationMode(nn::ssl::sf::RenegotiationMode& _0);
		uint32_t GetSessionCacheMode(nn::ssl::sf::SessionCacheMode& _0);
		uint32_t GetSocketDescriptor(int32_t& _0);
		uint32_t GetVerifyCertError();
		uint32_t GetVerifyCertErrors(uint32_t& _0, uint32_t& _1, uint8_t *& _2, unsigned int _2_size);
		uint32_t GetVerifyOption(nn::ssl::sf::VerifyOption& _0);
		uint32_t Peek(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t Pending(int32_t& _0);
		uint32_t Poll(nn::ssl::sf::PollEvent _0, uint32_t _1, nn::ssl::sf::PollEvent& _2);
		uint32_t Read(uint32_t& _0, uint8_t *& _1, unsigned int _1_size);
		uint32_t SetHostName(uint8_t * _0, unsigned int _0_size);
		uint32_t SetIoMode(nn::ssl::sf::IoMode _0);
		uint32_t SetOption(bool _0, nn::ssl::sf::OptionType _1);
		uint32_t SetRenegotiationMode(nn::ssl::sf::RenegotiationMode _0);
		uint32_t SetSessionCacheMode(nn::ssl::sf::SessionCacheMode _0);
		uint32_t SetSocketDescriptor(int32_t _0, int32_t& _1);
		uint32_t SetVerifyOption(nn::ssl::sf::VerifyOption _0);
		uint32_t Write(uint8_t * _0, unsigned int _0_size, uint32_t& _1);
	};
	class ISslContext : public IpcService {
	public:
		ISslContext() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ssl::sf::ISslContext::SetOption: nn::ssl::sf::ContextOption = 0x%x, int32_t = 0x%x\n", req->GetData<nn::ssl::sf::ContextOption>(8), req->GetData<int32_t>(0xc));
				resp->error_code = SetOption(req->GetData<nn::ssl::sf::ContextOption>(8), req->GetData<int32_t>(0xc));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::ssl::sf::ISslContext::GetOption: nn::ssl::sf::ContextOption = 0x%x\n", req->GetData<nn::ssl::sf::ContextOption>(8));
				resp->error_code = GetOption(req->GetData<nn::ssl::sf::ContextOption>(8), *resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(1, 0, 0);
				nn::ssl::sf::ISslConnection* temp1;
				ns_print("IPC message to nn::ssl::sf::ISslContext::CreateConnection\n");
				resp->error_code = CreateConnection(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::ssl::sf::ISslContext::GetConnectionCount\n");
				resp->error_code = GetConnectionCount(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::ssl::sf::ISslContext::ImportServerPki: nn::ssl::sf::CertificateFormat = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<nn::ssl::sf::CertificateFormat>(8), temp2);
				resp->error_code = ImportServerPki(req->GetData<nn::ssl::sf::CertificateFormat>(8), temp3, temp2, *resp->GetDataPointer<uint64_t *>(8));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(5, 1, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				ns_print("IPC message to nn::ssl::sf::ISslContext::ImportClientPki: uint8_t *= buffer<0x%lx>, uint8_t *= buffer<0x%lx>\n", temp2, temp5);
				resp->error_code = ImportClientPki(temp3, temp2, temp6, temp5, *resp->GetDataPointer<uint64_t *>(8));
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ssl::sf::ISslContext::RemoveServerPki: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = RemoveServerPki(req->GetData<uint64_t>(8));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ssl::sf::ISslContext::RemoveClientPki: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = RemoveClientPki(req->GetData<uint64_t>(8));
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::ssl::sf::ISslContext::RegisterInternalPki: nn::ssl::sf::InternalPki = 0x%x\n", req->GetData<nn::ssl::sf::InternalPki>(8));
				resp->error_code = RegisterInternalPki(req->GetData<nn::ssl::sf::InternalPki>(8), *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::ssl::sf::ISslContext::AddPolicyOid: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = AddPolicyOid(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::ssl::sf::ISslContext::ImportCrl: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = ImportCrl(temp3, temp2, *resp->GetDataPointer<uint64_t *>(8));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ssl::sf::ISslContext::RemoveCrl: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = RemoveCrl(req->GetData<uint64_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ssl::sf::ISslContext", req->cmd_id);
			}
		}
		uint32_t AddPolicyOid(uint8_t * _0, unsigned int _0_size);
		uint32_t CreateConnection(nn::ssl::sf::ISslConnection*& _0);
		uint32_t GetConnectionCount(uint32_t& _0);
		uint32_t GetOption(nn::ssl::sf::ContextOption _0, int32_t& _1);
		uint32_t ImportClientPki(uint8_t * _0, unsigned int _0_size, uint8_t * _1, unsigned int _1_size, uint64_t& _2);
		uint32_t ImportCrl(uint8_t * _0, unsigned int _0_size, uint64_t& _1);
		uint32_t ImportServerPki(nn::ssl::sf::CertificateFormat _0, uint8_t * _1, unsigned int _1_size, uint64_t& _2);
		uint32_t RegisterInternalPki(nn::ssl::sf::InternalPki _0, uint64_t& _1);
		uint32_t RemoveClientPki(uint64_t _0);
		uint32_t RemoveCrl(uint64_t _0);
		uint32_t RemoveServerPki(uint64_t _0);
		uint32_t SetOption(nn::ssl::sf::ContextOption _0, int32_t _1);
	};
	class ISslService : public IpcService {
	public:
		ISslService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::ssl::sf::ISslContext* temp1;
				ns_print("IPC message to nn::ssl::sf::ISslService::CreateContext: nn::ssl::sf::SslVersion = 0x%x, uint64_t = 0x%%lx\n", req->GetData<nn::ssl::sf::SslVersion>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = CreateContext(req->GetData<nn::ssl::sf::SslVersion>(8), req->GetData<uint64_t>(0x10), req->pid, temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::ssl::sf::ISslService::GetContextCount\n");
				resp->error_code = GetContextCount(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::ssl::sf::ISslService::GetCertificates: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = GetCertificates(temp3, temp2, *resp->GetDataPointer<uint32_t *>(8), temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::ssl::sf::ISslService::GetCertificateBufSize: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = GetCertificateBufSize(temp3, temp2, *resp->GetDataPointer<uint32_t *>(8));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::ssl::sf::ISslService::DebugIoctl: uint64_t = 0x%%lx, uint8_t *= buffer<0x%lx>\n", req->GetData<uint64_t>(8), temp2);
				resp->error_code = DebugIoctl(req->GetData<uint64_t>(8), temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ssl::sf::ISslService::SetInterfaceVersion: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = SetInterfaceVersion(req->GetData<uint32_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ssl::sf::ISslService", req->cmd_id);
			}
		}
		uint32_t CreateContext(nn::ssl::sf::SslVersion _0, uint64_t _1, uint64_t _2, nn::ssl::sf::ISslContext*& _3);
		uint32_t DebugIoctl(uint64_t _0, uint8_t * _1, unsigned int _1_size, uint8_t *& _2, unsigned int _2_size);
		uint32_t GetCertificateBufSize(uint8_t * _0, unsigned int _0_size, uint32_t& _1);
		uint32_t GetCertificates(uint8_t * _0, unsigned int _0_size, uint32_t& _1, uint8_t *& _2, unsigned int _2_size);
		uint32_t GetContextCount(uint32_t& _0);
		uint32_t SetInterfaceVersion(uint32_t _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::ssl::sf::ISslConnection::DoHandshake() {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::DoHandshake\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::DoHandshakeGetServerCert(uint32_t& _0, uint32_t& _1, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::DoHandshakeGetServerCert\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::FlushSessionCache() {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::FlushSessionCache\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::GetHostName(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::GetHostName\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::GetIoMode(nn::ssl::sf::IoMode& _0) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::GetIoMode\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::GetNeededServerCertBufferSize(uint32_t& _0) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::GetNeededServerCertBufferSize\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::GetOption(nn::ssl::sf::OptionType _0, bool& _1) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::GetOption\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::GetRenegotiationMode(nn::ssl::sf::RenegotiationMode& _0) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::GetRenegotiationMode\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::GetSessionCacheMode(nn::ssl::sf::SessionCacheMode& _0) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::GetSessionCacheMode\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::GetSocketDescriptor(int32_t& _0) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::GetSocketDescriptor\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::GetVerifyCertError() {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::GetVerifyCertError\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::GetVerifyCertErrors(uint32_t& _0, uint32_t& _1, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::GetVerifyCertErrors\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::GetVerifyOption(nn::ssl::sf::VerifyOption& _0) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::GetVerifyOption\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::Peek(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::Peek\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::Pending(int32_t& _0) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::Pending\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::Poll(nn::ssl::sf::PollEvent _0, uint32_t _1, nn::ssl::sf::PollEvent& _2) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::Poll\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::Read(uint32_t& _0, uint8_t *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::Read\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::SetHostName(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::SetHostName\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::SetIoMode(nn::ssl::sf::IoMode _0) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::SetIoMode\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::SetOption(bool _0, nn::ssl::sf::OptionType _1) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::SetOption\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::SetRenegotiationMode(nn::ssl::sf::RenegotiationMode _0) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::SetRenegotiationMode\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::SetSessionCacheMode(nn::ssl::sf::SessionCacheMode _0) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::SetSessionCacheMode\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::SetSocketDescriptor(int32_t _0, int32_t& _1) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::SetSocketDescriptor\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::SetVerifyOption(nn::ssl::sf::VerifyOption _0) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::SetVerifyOption\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslConnection::Write(uint8_t * _0, unsigned int _0_size, uint32_t& _1) {
	ns_print("Stub implementation for nn::ssl::sf::ISslConnection::Write\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslContext::AddPolicyOid(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::ssl::sf::ISslContext::AddPolicyOid\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslContext::CreateConnection(nn::ssl::sf::ISslConnection*& _0) {
	ns_print("Stub implementation for nn::ssl::sf::ISslContext::CreateConnection\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslContext::GetConnectionCount(uint32_t& _0) {
	ns_print("Stub implementation for nn::ssl::sf::ISslContext::GetConnectionCount\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslContext::GetOption(nn::ssl::sf::ContextOption _0, int32_t& _1) {
	ns_print("Stub implementation for nn::ssl::sf::ISslContext::GetOption\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslContext::ImportClientPki(uint8_t * _0, unsigned int _0_size, uint8_t * _1, unsigned int _1_size, uint64_t& _2) {
	ns_print("Stub implementation for nn::ssl::sf::ISslContext::ImportClientPki\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslContext::ImportCrl(uint8_t * _0, unsigned int _0_size, uint64_t& _1) {
	ns_print("Stub implementation for nn::ssl::sf::ISslContext::ImportCrl\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslContext::ImportServerPki(nn::ssl::sf::CertificateFormat _0, uint8_t * _1, unsigned int _1_size, uint64_t& _2) {
	ns_print("Stub implementation for nn::ssl::sf::ISslContext::ImportServerPki\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslContext::RegisterInternalPki(nn::ssl::sf::InternalPki _0, uint64_t& _1) {
	ns_print("Stub implementation for nn::ssl::sf::ISslContext::RegisterInternalPki\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslContext::RemoveClientPki(uint64_t _0) {
	ns_print("Stub implementation for nn::ssl::sf::ISslContext::RemoveClientPki\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslContext::RemoveCrl(uint64_t _0) {
	ns_print("Stub implementation for nn::ssl::sf::ISslContext::RemoveCrl\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslContext::RemoveServerPki(uint64_t _0) {
	ns_print("Stub implementation for nn::ssl::sf::ISslContext::RemoveServerPki\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslContext::SetOption(nn::ssl::sf::ContextOption _0, int32_t _1) {
	ns_print("Stub implementation for nn::ssl::sf::ISslContext::SetOption\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslService::CreateContext(nn::ssl::sf::SslVersion _0, uint64_t _1, uint64_t _2, nn::ssl::sf::ISslContext*& _3) {
	ns_print("Stub implementation for nn::ssl::sf::ISslService::CreateContext\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslService::DebugIoctl(uint64_t _0, uint8_t * _1, unsigned int _1_size, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::ssl::sf::ISslService::DebugIoctl\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslService::GetCertificateBufSize(uint8_t * _0, unsigned int _0_size, uint32_t& _1) {
	ns_print("Stub implementation for nn::ssl::sf::ISslService::GetCertificateBufSize\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslService::GetCertificates(uint8_t * _0, unsigned int _0_size, uint32_t& _1, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::ssl::sf::ISslService::GetCertificates\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslService::GetContextCount(uint32_t& _0) {
	ns_print("Stub implementation for nn::ssl::sf::ISslService::GetContextCount\n");
	return 0;
}
uint32_t nn::ssl::sf::ISslService::SetInterfaceVersion(uint32_t _0) {
	ns_print("Stub implementation for nn::ssl::sf::ISslService::SetInterfaceVersion\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::tc {
	class IManager : public IpcService {
	public:
		IManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::tc::IManager::Unknown0: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown0(req->GetData<uint32_t>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::tc::IManager::Unknown1: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown1(req->GetData<uint32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::tc::IManager::Unknown2: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown2(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::tc::IManager::Unknown3: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown3(req->GetData<uint32_t>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::tc::IManager::Unknown4: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown4(req->GetData<uint32_t>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::tc::IManager::Unknown5: uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Unknown5(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::tc::IManager::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::tc::IManager::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::tc::IManager::Unknown8\n");
				resp->error_code = Unknown8(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::tc::IManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t _0);
		uint32_t Unknown1(uint32_t _0, IpcService*& _1);
		uint32_t Unknown2(uint32_t _0, uint8_t& _1);
		uint32_t Unknown3(uint32_t _0);
		uint32_t Unknown4(uint32_t _0);
		uint32_t Unknown5(uint32_t _0, uint32_t _1);
		uint32_t Unknown6();
		uint32_t Unknown7();
		uint32_t Unknown8(uint8_t& _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::tc::IManager::Unknown0(uint32_t _0) {
	ns_print("Stub implementation for nn::tc::IManager::Unknown0\n");
	return 0;
}
uint32_t nn::tc::IManager::Unknown1(uint32_t _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::tc::IManager::Unknown1\n");
	return 0;
}
uint32_t nn::tc::IManager::Unknown2(uint32_t _0, uint8_t& _1) {
	ns_print("Stub implementation for nn::tc::IManager::Unknown2\n");
	return 0;
}
uint32_t nn::tc::IManager::Unknown3(uint32_t _0) {
	ns_print("Stub implementation for nn::tc::IManager::Unknown3\n");
	return 0;
}
uint32_t nn::tc::IManager::Unknown4(uint32_t _0) {
	ns_print("Stub implementation for nn::tc::IManager::Unknown4\n");
	return 0;
}
uint32_t nn::tc::IManager::Unknown5(uint32_t _0, uint32_t _1) {
	ns_print("Stub implementation for nn::tc::IManager::Unknown5\n");
	return 0;
}
uint32_t nn::tc::IManager::Unknown6() {
	ns_print("Stub implementation for nn::tc::IManager::Unknown6\n");
	return 0;
}
uint32_t nn::tc::IManager::Unknown7() {
	ns_print("Stub implementation for nn::tc::IManager::Unknown7\n");
	return 0;
}
uint32_t nn::tc::IManager::Unknown8(uint8_t& _0) {
	ns_print("Stub implementation for nn::tc::IManager::Unknown8\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::timesrv::detail::service {
	class IStaticService : public IpcService {
	public:
		IStaticService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::timesrv::detail::service::ISystemClock* temp1;
				ns_print("IPC message to nn::timesrv::detail::service::IStaticService::GetStandardUserSystemClock\n");
				resp->error_code = GetStandardUserSystemClock(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(1, 0, 0);
				nn::timesrv::detail::service::ISystemClock* temp1;
				ns_print("IPC message to nn::timesrv::detail::service::IStaticService::GetStandardNetworkSystemClock\n");
				resp->error_code = GetStandardNetworkSystemClock(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 2: {
				resp->GenBuf(1, 0, 0);
				nn::timesrv::detail::service::ISteadyClock* temp1;
				ns_print("IPC message to nn::timesrv::detail::service::IStaticService::GetStandardSteadyClock\n");
				resp->error_code = GetStandardSteadyClock(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(1, 0, 0);
				nn::timesrv::detail::service::ITimeZoneService* temp1;
				ns_print("IPC message to nn::timesrv::detail::service::IStaticService::GetTimeZoneService\n");
				resp->error_code = GetTimeZoneService(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 4: {
				resp->GenBuf(1, 0, 0);
				nn::timesrv::detail::service::ISystemClock* temp1;
				ns_print("IPC message to nn::timesrv::detail::service::IStaticService::GetStandardLocalSystemClock\n");
				resp->error_code = GetStandardLocalSystemClock(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::timesrv::detail::service::IStaticService::IsStandardUserSystemClockAutomaticCorrectionEnabled\n");
				resp->error_code = IsStandardUserSystemClockAutomaticCorrectionEnabled(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::timesrv::detail::service::IStaticService::SetStandardUserSystemClockAutomaticCorrectionEnabled: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetStandardUserSystemClockAutomaticCorrectionEnabled(req->GetData<bool>(8));
				return 0;
			}
			case 200: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::timesrv::detail::service::IStaticService::IsStandardNetworkSystemClockAccuracySufficient\n");
				resp->error_code = IsStandardNetworkSystemClockAccuracySufficient(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::timesrv::detail::service::IStaticService", req->cmd_id);
			}
		}
		uint32_t GetStandardLocalSystemClock(nn::timesrv::detail::service::ISystemClock*& _0);
		uint32_t GetStandardNetworkSystemClock(nn::timesrv::detail::service::ISystemClock*& _0);
		uint32_t GetStandardSteadyClock(nn::timesrv::detail::service::ISteadyClock*& _0);
		uint32_t GetStandardUserSystemClock(nn::timesrv::detail::service::ISystemClock*& _0);
		uint32_t GetTimeZoneService(nn::timesrv::detail::service::ITimeZoneService*& _0);
		uint32_t IsStandardNetworkSystemClockAccuracySufficient(bool& _0);
		uint32_t IsStandardUserSystemClockAutomaticCorrectionEnabled(bool& _0);
		uint32_t SetStandardUserSystemClockAutomaticCorrectionEnabled(bool _0);
	};
	class ISteadyClock : public IpcService {
	public:
		ISteadyClock() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 24);
				auto temp1 = resp->GetDataPointer<nn::time::SteadyClockTimePoint>(8);
				ns_print("IPC message to nn::timesrv::detail::service::ISteadyClock::GetCurrentTimePoint\n");
				resp->error_code = GetCurrentTimePoint(temp1);
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::timesrv::detail::service::ISteadyClock::GetTestOffset\n");
				resp->error_code = GetTestOffset(*resp->GetDataPointer<nn::TimeSpanType *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::timesrv::detail::service::ISteadyClock::SetTestOffset: nn::TimeSpanType = 0x%%lx\n", req->GetData<nn::TimeSpanType>(8));
				resp->error_code = SetTestOffset(req->GetData<nn::TimeSpanType>(8));
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::timesrv::detail::service::ISteadyClock::GetRtcValue\n");
				resp->error_code = GetRtcValue(*resp->GetDataPointer<int64_t *>(8));
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::timesrv::detail::service::ISteadyClock::IsRtcResetDetected\n");
				resp->error_code = IsRtcResetDetected(*resp->GetDataPointer<bool *>(8));
				return 0;
			}
			case 102: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::timesrv::detail::service::ISteadyClock::GetSetupResutltValue\n");
				resp->error_code = GetSetupResutltValue(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 200: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::timesrv::detail::service::ISteadyClock::GetInternalOffset\n");
				resp->error_code = GetInternalOffset(*resp->GetDataPointer<nn::TimeSpanType *>(8));
				return 0;
			}
			case 201: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::timesrv::detail::service::ISteadyClock::SetInternalOffset: nn::TimeSpanType = 0x%%lx\n", req->GetData<nn::TimeSpanType>(8));
				resp->error_code = SetInternalOffset(req->GetData<nn::TimeSpanType>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::timesrv::detail::service::ISteadyClock", req->cmd_id);
			}
		}
		uint32_t GetCurrentTimePoint(nn::time::SteadyClockTimePoint& _0);
		uint32_t GetInternalOffset(nn::TimeSpanType& _0);
		uint32_t GetRtcValue(int64_t& _0);
		uint32_t GetSetupResutltValue(uint32_t& _0);
		uint32_t GetTestOffset(nn::TimeSpanType& _0);
		uint32_t IsRtcResetDetected(bool& _0);
		uint32_t SetInternalOffset(nn::TimeSpanType _0);
		uint32_t SetTestOffset(nn::TimeSpanType _0);
	};
	class ISystemClock : public IpcService {
	public:
		ISystemClock() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::timesrv::detail::service::ISystemClock::GetCurrentTime\n");
				resp->error_code = GetCurrentTime(*resp->GetDataPointer<nn::time::PosixTime *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::timesrv::detail::service::ISystemClock::SetCurrentTime: nn::time::PosixTime = 0x%%lx\n", req->GetData<nn::time::PosixTime>(8));
				resp->error_code = SetCurrentTime(req->GetData<nn::time::PosixTime>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 32);
				auto temp1 = resp->GetDataPointer<nn::time::SystemClockContext>(8);
				ns_print("IPC message to nn::timesrv::detail::service::ISystemClock::GetSystemClockContext\n");
				resp->error_code = GetSystemClockContext(temp1);
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::timesrv::detail::service::ISystemClock::SetSystemClockContext: nn::time::SystemClockContext = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x20).c_str());
				resp->error_code = SetSystemClockContext(req->GetDataPointer<nn::time::SystemClockContext>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::timesrv::detail::service::ISystemClock", req->cmd_id);
			}
		}
		uint32_t GetCurrentTime(nn::time::PosixTime& _0);
		uint32_t GetSystemClockContext(nn::time::SystemClockContext& _0);
		uint32_t SetCurrentTime(nn::time::PosixTime _0);
		uint32_t SetSystemClockContext(nn::time::SystemClockContext _0);
	};
	class ITimeZoneService : public IpcService {
	public:
		ITimeZoneService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 36);
				auto temp1 = resp->GetDataPointer<nn::time::LocationName>(8);
				ns_print("IPC message to nn::timesrv::detail::service::ITimeZoneService::GetDeviceLocationName\n");
				resp->error_code = GetDeviceLocationName(temp1);
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::timesrv::detail::service::ITimeZoneService::SetDeviceLocationName: nn::time::LocationName = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x24).c_str());
				resp->error_code = SetDeviceLocationName(req->GetDataPointer<nn::time::LocationName>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::timesrv::detail::service::ITimeZoneService::GetTotalLocationNameCount\n");
				resp->error_code = GetTotalLocationNameCount(*resp->GetDataPointer<int32_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::time::LocationName* temp3 = (nn::time::LocationName *) new uint8_t[temp2];
				ns_print("IPC message to nn::timesrv::detail::service::ITimeZoneService::LoadLocationNameList: int32_t = 0x%x\n", req->GetData<int32_t>(8));
				resp->error_code = LoadLocationNameList(req->GetData<int32_t>(8), *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x16, 0, temp2);
				nn::time::TimeZoneRule* temp3 = (nn::time::TimeZoneRule *) new uint8_t[temp2];
				ns_print("IPC message to nn::timesrv::detail::service::ITimeZoneService::LoadTimeZoneRule: nn::time::LocationName = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x24).c_str());
				resp->error_code = LoadTimeZoneRule(req->GetDataPointer<nn::time::LocationName>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::timesrv::detail::service::ITimeZoneService::GetTimeZoneRuleVersion\n");
				resp->error_code = GetTimeZoneRuleVersion(*resp->GetDataPointer<nn::time::TimeZoneRuleVersion *>(8));
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 0, 32);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x15, 0, temp2);
				nn::time::TimeZoneRule* temp3 = (nn::time::TimeZoneRule *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				auto temp4 = resp->GetDataPointer<nn::time::sf::CalendarAdditionalInfo>(0x10);
				ns_print("IPC message to nn::timesrv::detail::service::ITimeZoneService::ToCalendarTime: nn::time::PosixTime = 0x%%lx, nn::time::TimeZoneRule *= buffer<0x%lx>\n", req->GetData<nn::time::PosixTime>(8), temp2);
				resp->error_code = ToCalendarTime(req->GetData<nn::time::PosixTime>(8), temp3, temp2, *resp->GetDataPointer<nn::time::CalendarTime *>(8), temp4);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 32);
				auto temp1 = resp->GetDataPointer<nn::time::sf::CalendarAdditionalInfo>(0x10);
				ns_print("IPC message to nn::timesrv::detail::service::ITimeZoneService::ToCalendarTimeWithMyRule: nn::time::PosixTime = 0x%%lx\n", req->GetData<nn::time::PosixTime>(8));
				resp->error_code = ToCalendarTimeWithMyRule(req->GetData<nn::time::PosixTime>(8), *resp->GetDataPointer<nn::time::CalendarTime *>(8), temp1);
				return 0;
			}
			case 201: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x15, 0, temp2);
				nn::time::TimeZoneRule* temp3 = (nn::time::TimeZoneRule *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0xa, 0, temp5);
				nn::time::PosixTime* temp6 = (nn::time::PosixTime *) new uint8_t[temp5];
				ns_print("IPC message to nn::timesrv::detail::service::ITimeZoneService::ToPosixTime: nn::time::CalendarTime = 0x%%lx, nn::time::TimeZoneRule *= buffer<0x%lx>\n", req->GetData<nn::time::CalendarTime>(8), temp2);
				resp->error_code = ToPosixTime(req->GetData<nn::time::CalendarTime>(8), temp3, temp2, *resp->GetDataPointer<int32_t *>(8), temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 202: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0xa, 0, temp2);
				nn::time::PosixTime* temp3 = (nn::time::PosixTime *) new uint8_t[temp2];
				ns_print("IPC message to nn::timesrv::detail::service::ITimeZoneService::ToPosixTimeWithMyRule: nn::time::CalendarTime = 0x%%lx\n", req->GetData<nn::time::CalendarTime>(8));
				resp->error_code = ToPosixTimeWithMyRule(req->GetData<nn::time::CalendarTime>(8), *resp->GetDataPointer<int32_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::timesrv::detail::service::ITimeZoneService", req->cmd_id);
			}
		}
		uint32_t GetDeviceLocationName(nn::time::LocationName& _0);
		uint32_t GetTimeZoneRuleVersion(nn::time::TimeZoneRuleVersion& _0);
		uint32_t GetTotalLocationNameCount(int32_t& _0);
		uint32_t LoadLocationNameList(int32_t _0, int32_t& _1, nn::time::LocationName *& _2, unsigned int _2_size);
		uint32_t LoadTimeZoneRule(nn::time::LocationName _0, nn::time::TimeZoneRule *& _1, unsigned int _1_size);
		uint32_t SetDeviceLocationName(nn::time::LocationName _0);
		uint32_t ToCalendarTime(nn::time::PosixTime _0, nn::time::TimeZoneRule * _1, unsigned int _1_size, nn::time::CalendarTime& _2, nn::time::sf::CalendarAdditionalInfo& _3);
		uint32_t ToCalendarTimeWithMyRule(nn::time::PosixTime _0, nn::time::CalendarTime& _1, nn::time::sf::CalendarAdditionalInfo& _2);
		uint32_t ToPosixTime(nn::time::CalendarTime _0, nn::time::TimeZoneRule * _1, unsigned int _1_size, int32_t& _2, nn::time::PosixTime *& _3, unsigned int _3_size);
		uint32_t ToPosixTimeWithMyRule(nn::time::CalendarTime _0, int32_t& _1, nn::time::PosixTime *& _2, unsigned int _2_size);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::timesrv::detail::service::IStaticService::GetStandardLocalSystemClock(nn::timesrv::detail::service::ISystemClock*& _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::IStaticService::GetStandardLocalSystemClock\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::IStaticService::GetStandardNetworkSystemClock(nn::timesrv::detail::service::ISystemClock*& _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::IStaticService::GetStandardNetworkSystemClock\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::IStaticService::GetStandardSteadyClock(nn::timesrv::detail::service::ISteadyClock*& _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::IStaticService::GetStandardSteadyClock\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::IStaticService::GetStandardUserSystemClock(nn::timesrv::detail::service::ISystemClock*& _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::IStaticService::GetStandardUserSystemClock\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::IStaticService::GetTimeZoneService(nn::timesrv::detail::service::ITimeZoneService*& _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::IStaticService::GetTimeZoneService\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::IStaticService::IsStandardNetworkSystemClockAccuracySufficient(bool& _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::IStaticService::IsStandardNetworkSystemClockAccuracySufficient\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::IStaticService::IsStandardUserSystemClockAutomaticCorrectionEnabled(bool& _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::IStaticService::IsStandardUserSystemClockAutomaticCorrectionEnabled\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::IStaticService::SetStandardUserSystemClockAutomaticCorrectionEnabled(bool _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::IStaticService::SetStandardUserSystemClockAutomaticCorrectionEnabled\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ISteadyClock::GetCurrentTimePoint(nn::time::SteadyClockTimePoint& _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ISteadyClock::GetCurrentTimePoint\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ISteadyClock::GetInternalOffset(nn::TimeSpanType& _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ISteadyClock::GetInternalOffset\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ISteadyClock::GetRtcValue(int64_t& _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ISteadyClock::GetRtcValue\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ISteadyClock::GetSetupResutltValue(uint32_t& _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ISteadyClock::GetSetupResutltValue\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ISteadyClock::GetTestOffset(nn::TimeSpanType& _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ISteadyClock::GetTestOffset\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ISteadyClock::IsRtcResetDetected(bool& _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ISteadyClock::IsRtcResetDetected\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ISteadyClock::SetInternalOffset(nn::TimeSpanType _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ISteadyClock::SetInternalOffset\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ISteadyClock::SetTestOffset(nn::TimeSpanType _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ISteadyClock::SetTestOffset\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ISystemClock::GetCurrentTime(nn::time::PosixTime& _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ISystemClock::GetCurrentTime\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ISystemClock::GetSystemClockContext(nn::time::SystemClockContext& _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ISystemClock::GetSystemClockContext\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ISystemClock::SetCurrentTime(nn::time::PosixTime _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ISystemClock::SetCurrentTime\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ISystemClock::SetSystemClockContext(nn::time::SystemClockContext _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ISystemClock::SetSystemClockContext\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ITimeZoneService::GetDeviceLocationName(nn::time::LocationName& _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ITimeZoneService::GetDeviceLocationName\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ITimeZoneService::GetTimeZoneRuleVersion(nn::time::TimeZoneRuleVersion& _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ITimeZoneService::GetTimeZoneRuleVersion\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ITimeZoneService::GetTotalLocationNameCount(int32_t& _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ITimeZoneService::GetTotalLocationNameCount\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ITimeZoneService::LoadLocationNameList(int32_t _0, int32_t& _1, nn::time::LocationName *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ITimeZoneService::LoadLocationNameList\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ITimeZoneService::LoadTimeZoneRule(nn::time::LocationName _0, nn::time::TimeZoneRule *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ITimeZoneService::LoadTimeZoneRule\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ITimeZoneService::SetDeviceLocationName(nn::time::LocationName _0) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ITimeZoneService::SetDeviceLocationName\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ITimeZoneService::ToCalendarTime(nn::time::PosixTime _0, nn::time::TimeZoneRule * _1, unsigned int _1_size, nn::time::CalendarTime& _2, nn::time::sf::CalendarAdditionalInfo& _3) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ITimeZoneService::ToCalendarTime\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ITimeZoneService::ToCalendarTimeWithMyRule(nn::time::PosixTime _0, nn::time::CalendarTime& _1, nn::time::sf::CalendarAdditionalInfo& _2) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ITimeZoneService::ToCalendarTimeWithMyRule\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ITimeZoneService::ToPosixTime(nn::time::CalendarTime _0, nn::time::TimeZoneRule * _1, unsigned int _1_size, int32_t& _2, nn::time::PosixTime *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ITimeZoneService::ToPosixTime\n");
	return 0;
}
uint32_t nn::timesrv::detail::service::ITimeZoneService::ToPosixTimeWithMyRule(nn::time::CalendarTime _0, int32_t& _1, nn::time::PosixTime *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::timesrv::detail::service::ITimeZoneService::ToPosixTimeWithMyRule\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::tma {
	class IHtcManager : public IpcService {
	public:
		IHtcManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nn::tma::IHtcManager::Unknown0: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown0(temp3, temp2, *resp->GetDataPointer<uint32_t *>(8), temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::tma::IHtcManager::Unknown1: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown1(temp3, temp2, *resp->GetDataPointer<uint32_t *>(8));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::tma::IHtcManager::Unknown2\n");
				resp->error_code = Unknown2(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::tma::IHtcManager::Unknown3\n");
				resp->error_code = Unknown3(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::tma::IHtcManager::Unknown4\n");
				resp->error_code = Unknown4(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::tma::IHtcManager::Unknown5\n");
				resp->error_code = Unknown5(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::tma::IHtcManager::Unknown6\n");
				resp->error_code = Unknown6(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::tma::IHtcManager::Unknown7\n");
				resp->error_code = Unknown7(temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::tma::IHtcManager::Unknown8: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown8(req->GetData<uint8_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::tma::IHtcManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint8_t * _0, unsigned int _0_size, uint32_t& _1, uint8_t *& _2, unsigned int _2_size);
		uint32_t Unknown1(uint8_t * _0, unsigned int _0_size, uint32_t& _1);
		uint32_t Unknown2(IpcService*& _0);
		uint32_t Unknown3(IpcService*& _0);
		uint32_t Unknown4(IpcService*& _0);
		uint32_t Unknown5(IpcService*& _0);
		uint32_t Unknown6(uint8_t *& _0, unsigned int _0_size);
		uint32_t Unknown7(uint8_t *& _0, unsigned int _0_size);
		uint32_t Unknown8(uint8_t _0);
	};
	class IHtcsManager : public IpcService {
	public:
		IHtcsManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::tma::IHtcsManager::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::tma::IHtcsManager::Unknown1: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown1(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::tma::IHtcsManager::Unknown2: uint8_t[0x42] = %s, uint32_t = 0x%x\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x42).c_str(), req->GetData<uint32_t>(0x4c));
				resp->error_code = Unknown2(req->GetDataPointer<uint8_t *>(8), req->GetData<uint32_t>(0x4c), *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::tma::IHtcsManager::Unknown3: uint8_t[0x42] = %s, uint32_t = 0x%x\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x42).c_str(), req->GetData<uint32_t>(0x4c));
				resp->error_code = Unknown3(req->GetDataPointer<uint8_t *>(8), req->GetData<uint32_t>(0x4c), *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::tma::IHtcsManager::Unknown4: uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Unknown4(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 76);
				auto temp1 = resp->GetDataPointer<uint8_t *>(8);
				ns_print("IPC message to nn::tma::IHtcsManager::Unknown5: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown5(req->GetData<uint32_t>(8), temp1, *resp->GetDataPointer<uint32_t *>(0x4c), *resp->GetDataPointer<uint32_t *>(0x50));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 16);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::tma::IHtcsManager::Unknown6: uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Unknown6(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint64_t *>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 16);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::tma::IHtcsManager::Unknown7: uint32_t = 0x%x, uint32_t = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), temp2);
				resp->error_code = Unknown7(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), temp3, temp2, *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint64_t *>(0x10));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::tma::IHtcsManager::Unknown8: uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Unknown8(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::tma::IHtcsManager::Unknown9: uint32_t = 0x%x, uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10));
				resp->error_code = Unknown9(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 32);
				auto temp1 = resp->GetDataPointer<uint8_t *>(8);
				ns_print("IPC message to nn::tma::IHtcsManager::Unknown10\n");
				resp->error_code = Unknown10(temp1);
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 32);
				auto temp1 = resp->GetDataPointer<uint8_t *>(8);
				ns_print("IPC message to nn::tma::IHtcsManager::Unknown11\n");
				resp->error_code = Unknown11(temp1);
				return 0;
			}
			case 12: {
				resp->GenBuf(1, 0, 4);
				IUnknown* temp1;
				ns_print("IPC message to nn::tma::IHtcsManager::Unknown12\n");
				resp->error_code = Unknown12(*resp->GetDataPointer<uint32_t *>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 13: {
				resp->GenBuf(1, 0, 4);
				IUnknown* temp1;
				ns_print("IPC message to nn::tma::IHtcsManager::Unknown13: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown13(req->GetData<uint8_t>(8), *resp->GetDataPointer<uint32_t *>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 100: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::tma::IHtcsManager::Unknown100: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown100(req->GetData<uint64_t>(8), req->pid);
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::tma::IHtcsManager::Unknown101: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown101(req->GetData<uint64_t>(8), req->pid);
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::tma::IHtcsManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t& _0, uint32_t& _1);
		uint32_t Unknown1(uint32_t _0, uint32_t& _1, uint32_t& _2);
		uint32_t Unknown10(uint8_t *& _0);
		uint32_t Unknown100(uint64_t _0, uint64_t _1);
		uint32_t Unknown101(uint64_t _0, uint64_t _1);
		uint32_t Unknown11(uint8_t *& _0);
		uint32_t Unknown12(uint32_t& _0, IUnknown*& _1);
		uint32_t Unknown13(uint8_t _0, uint32_t& _1, IUnknown*& _2);
		uint32_t Unknown2(uint8_t * _0, uint32_t _1, uint32_t& _2, uint32_t& _3);
		uint32_t Unknown3(uint8_t * _0, uint32_t _1, uint32_t& _2, uint32_t& _3);
		uint32_t Unknown4(uint32_t _0, uint32_t _1, uint32_t& _2, uint32_t& _3);
		uint32_t Unknown5(uint32_t _0, uint8_t *& _1, uint32_t& _2, uint32_t& _3);
		uint32_t Unknown6(uint32_t _0, uint32_t _1, uint32_t& _2, uint64_t& _3, uint8_t *& _4, unsigned int _4_size);
		uint32_t Unknown7(uint32_t _0, uint32_t _1, uint8_t * _2, unsigned int _2_size, uint32_t& _3, uint64_t& _4);
		uint32_t Unknown8(uint32_t _0, uint32_t _1, uint32_t& _2, uint32_t& _3);
		uint32_t Unknown9(uint32_t _0, uint32_t _1, uint32_t _2, uint32_t& _3, uint32_t& _4);
	};
	class ISocket : public IpcService {
	public:
		ISocket() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::tma::ISocket::Unknown0\n");
				resp->error_code = Unknown0(*resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::tma::ISocket::Unknown1: uint8_t[0x42] = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x42).c_str());
				resp->error_code = Unknown1(req->GetDataPointer<uint8_t *>(8), *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::tma::ISocket::Unknown2: uint8_t[0x42] = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x42).c_str());
				resp->error_code = Unknown2(req->GetDataPointer<uint8_t *>(8), *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::tma::ISocket::Unknown3: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown3(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 4: {
				resp->GenBuf(1, 0, 72);
				auto temp1 = resp->GetDataPointer<uint8_t *>(8);
				IUnknown* temp2;
				ns_print("IPC message to nn::tma::ISocket::Unknown4\n");
				resp->error_code = Unknown4(temp1, *resp->GetDataPointer<uint32_t *>(0x4c), temp2);
				if(temp2 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp2));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 16);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::tma::ISocket::Unknown5: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown5(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint64_t *>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 16);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::tma::ISocket::Unknown6: uint32_t = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), temp2);
				resp->error_code = Unknown6(req->GetData<uint32_t>(8), temp3, temp2, *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint64_t *>(0x10));
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::tma::ISocket::Unknown7: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown7(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::tma::ISocket::Unknown8: uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Unknown8(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint32_t *>(0xc));
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 1, 4);
				IpcService *temp1;
				ns_print("IPC message to nn::tma::ISocket::Unknown9\n");
				resp->error_code = Unknown9(*resp->GetDataPointer<uint32_t *>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 10: {
				resp->GenBuf(1, 0, 72);
				auto temp1 = resp->GetDataPointer<uint8_t *>(8);
				IUnknown* temp2;
				ns_print("IPC message to nn::tma::ISocket::Unknown10: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown10(req->GetData<uint32_t>(8), temp1, *resp->GetDataPointer<uint32_t *>(0x4c), temp2);
				if(temp2 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp2));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 1, 4);
				IpcService *temp1;
				ns_print("IPC message to nn::tma::ISocket::Unknown11: uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Unknown11(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), *resp->GetDataPointer<uint32_t *>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 16);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x22, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::tma::ISocket::Unknown12: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown12(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint64_t *>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 1, 4);
				IpcService *temp1;
				ns_print("IPC message to nn::tma::ISocket::Unknown13: uint32_t = 0x%x, uint32_t = 0x%x, uint32_t = 0x%x, uint64_t = 0x%%lx, KObject = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), req->GetData<uint64_t>(0x18), req->GetCopied(0));
				resp->error_code = Unknown13(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), req->GetData<uint64_t>(0x18), IPC::GetHandle<IpcService*>(req->GetCopied(0)), *resp->GetDataPointer<uint32_t *>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 1, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				IpcService *temp4;
				ns_print("IPC message to nn::tma::ISocket::Unknown14: uint32_t = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), temp2);
				resp->error_code = Unknown14(req->GetData<uint32_t>(8), temp3, temp2, *resp->GetDataPointer<uint32_t *>(8), temp4);
				delete[] (uint8_t *) temp3;
				if(temp4 != nullptr)
					resp->SetCopy(0, NewHandle(temp4));
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 1, 4);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x21, 1, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ARMv8::ReadBytes(temp4, (uint8_t *)temp6, temp5);
				IpcService *temp7;
				ns_print("IPC message to nn::tma::ISocket::Unknown15: uint32_t = 0x%x, uint64_t = 0x%%lx, KObject = 0x%x, uint8_t *= buffer<0x%lx>, uint8_t *= buffer<0x%lx>\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10), req->GetCopied(0), temp2, temp5);
				resp->error_code = Unknown15(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10), IPC::GetHandle<IpcService*>(req->GetCopied(0)), temp3, temp2, temp6, temp5, *resp->GetDataPointer<uint32_t *>(8), temp7);
				delete[] (uint8_t *) temp3;
				delete[] (uint8_t *) temp6;
				if(temp7 != nullptr)
					resp->SetCopy(0, NewHandle(temp7));
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::tma::ISocket::Unknown16: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown16(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint32_t *>(8), *resp->GetDataPointer<uint64_t *>(0x10));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::tma::ISocket", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t& _0, uint32_t& _1);
		uint32_t Unknown1(uint8_t * _0, uint32_t& _1, uint32_t& _2);
		uint32_t Unknown10(uint32_t _0, uint8_t *& _1, uint32_t& _2, IUnknown*& _3);
		uint32_t Unknown11(uint32_t _0, uint32_t _1, uint32_t& _2, IpcService*& _3);
		uint32_t Unknown12(uint32_t _0, uint32_t& _1, uint64_t& _2, uint8_t *& _3, unsigned int _3_size);
		uint32_t Unknown13(uint32_t _0, uint32_t _1, uint32_t _2, uint64_t _3, IpcService* _4, uint32_t& _5, IpcService*& _6);
		uint32_t Unknown14(uint32_t _0, uint8_t * _1, unsigned int _1_size, uint32_t& _2, IpcService*& _3);
		uint32_t Unknown15(uint32_t _0, uint64_t _1, IpcService* _2, uint8_t * _3, unsigned int _3_size, uint8_t * _4, unsigned int _4_size, uint32_t& _5, IpcService*& _6);
		uint32_t Unknown16(uint32_t _0, uint32_t& _1, uint64_t& _2);
		uint32_t Unknown2(uint8_t * _0, uint32_t& _1, uint32_t& _2);
		uint32_t Unknown3(uint32_t _0, uint32_t& _1, uint32_t& _2);
		uint32_t Unknown4(uint8_t *& _0, uint32_t& _1, IUnknown*& _2);
		uint32_t Unknown5(uint32_t _0, uint32_t& _1, uint64_t& _2, uint8_t *& _3, unsigned int _3_size);
		uint32_t Unknown6(uint32_t _0, uint8_t * _1, unsigned int _1_size, uint32_t& _2, uint64_t& _3);
		uint32_t Unknown7(uint32_t _0, uint32_t& _1, uint32_t& _2);
		uint32_t Unknown8(uint32_t _0, uint32_t _1, uint32_t& _2, uint32_t& _3);
		uint32_t Unknown9(uint32_t& _0, IpcService*& _1);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::tma::IHtcManager::Unknown0(uint8_t * _0, unsigned int _0_size, uint32_t& _1, uint8_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::tma::IHtcManager::Unknown0\n");
	return 0;
}
uint32_t nn::tma::IHtcManager::Unknown1(uint8_t * _0, unsigned int _0_size, uint32_t& _1) {
	ns_print("Stub implementation for nn::tma::IHtcManager::Unknown1\n");
	return 0;
}
uint32_t nn::tma::IHtcManager::Unknown2(IpcService*& _0) {
	ns_print("Stub implementation for nn::tma::IHtcManager::Unknown2\n");
	return 0;
}
uint32_t nn::tma::IHtcManager::Unknown3(IpcService*& _0) {
	ns_print("Stub implementation for nn::tma::IHtcManager::Unknown3\n");
	return 0;
}
uint32_t nn::tma::IHtcManager::Unknown4(IpcService*& _0) {
	ns_print("Stub implementation for nn::tma::IHtcManager::Unknown4\n");
	return 0;
}
uint32_t nn::tma::IHtcManager::Unknown5(IpcService*& _0) {
	ns_print("Stub implementation for nn::tma::IHtcManager::Unknown5\n");
	return 0;
}
uint32_t nn::tma::IHtcManager::Unknown6(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::tma::IHtcManager::Unknown6\n");
	return 0;
}
uint32_t nn::tma::IHtcManager::Unknown7(uint8_t *& _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::tma::IHtcManager::Unknown7\n");
	return 0;
}
uint32_t nn::tma::IHtcManager::Unknown8(uint8_t _0) {
	ns_print("Stub implementation for nn::tma::IHtcManager::Unknown8\n");
	return 0;
}
uint32_t nn::tma::IHtcsManager::Unknown0(uint32_t& _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::tma::IHtcsManager::Unknown0\n");
	return 0;
}
uint32_t nn::tma::IHtcsManager::Unknown1(uint32_t _0, uint32_t& _1, uint32_t& _2) {
	ns_print("Stub implementation for nn::tma::IHtcsManager::Unknown1\n");
	return 0;
}
uint32_t nn::tma::IHtcsManager::Unknown10(uint8_t *& _0) {
	ns_print("Stub implementation for nn::tma::IHtcsManager::Unknown10\n");
	return 0;
}
uint32_t nn::tma::IHtcsManager::Unknown100(uint64_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::tma::IHtcsManager::Unknown100\n");
	return 0;
}
uint32_t nn::tma::IHtcsManager::Unknown101(uint64_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::tma::IHtcsManager::Unknown101\n");
	return 0;
}
uint32_t nn::tma::IHtcsManager::Unknown11(uint8_t *& _0) {
	ns_print("Stub implementation for nn::tma::IHtcsManager::Unknown11\n");
	return 0;
}
uint32_t nn::tma::IHtcsManager::Unknown12(uint32_t& _0, IUnknown*& _1) {
	ns_print("Stub implementation for nn::tma::IHtcsManager::Unknown12\n");
	return 0;
}
uint32_t nn::tma::IHtcsManager::Unknown13(uint8_t _0, uint32_t& _1, IUnknown*& _2) {
	ns_print("Stub implementation for nn::tma::IHtcsManager::Unknown13\n");
	return 0;
}
uint32_t nn::tma::IHtcsManager::Unknown2(uint8_t * _0, uint32_t _1, uint32_t& _2, uint32_t& _3) {
	ns_print("Stub implementation for nn::tma::IHtcsManager::Unknown2\n");
	return 0;
}
uint32_t nn::tma::IHtcsManager::Unknown3(uint8_t * _0, uint32_t _1, uint32_t& _2, uint32_t& _3) {
	ns_print("Stub implementation for nn::tma::IHtcsManager::Unknown3\n");
	return 0;
}
uint32_t nn::tma::IHtcsManager::Unknown4(uint32_t _0, uint32_t _1, uint32_t& _2, uint32_t& _3) {
	ns_print("Stub implementation for nn::tma::IHtcsManager::Unknown4\n");
	return 0;
}
uint32_t nn::tma::IHtcsManager::Unknown5(uint32_t _0, uint8_t *& _1, uint32_t& _2, uint32_t& _3) {
	ns_print("Stub implementation for nn::tma::IHtcsManager::Unknown5\n");
	return 0;
}
uint32_t nn::tma::IHtcsManager::Unknown6(uint32_t _0, uint32_t _1, uint32_t& _2, uint64_t& _3, uint8_t *& _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::tma::IHtcsManager::Unknown6\n");
	return 0;
}
uint32_t nn::tma::IHtcsManager::Unknown7(uint32_t _0, uint32_t _1, uint8_t * _2, unsigned int _2_size, uint32_t& _3, uint64_t& _4) {
	ns_print("Stub implementation for nn::tma::IHtcsManager::Unknown7\n");
	return 0;
}
uint32_t nn::tma::IHtcsManager::Unknown8(uint32_t _0, uint32_t _1, uint32_t& _2, uint32_t& _3) {
	ns_print("Stub implementation for nn::tma::IHtcsManager::Unknown8\n");
	return 0;
}
uint32_t nn::tma::IHtcsManager::Unknown9(uint32_t _0, uint32_t _1, uint32_t _2, uint32_t& _3, uint32_t& _4) {
	ns_print("Stub implementation for nn::tma::IHtcsManager::Unknown9\n");
	return 0;
}
uint32_t nn::tma::ISocket::Unknown0(uint32_t& _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::tma::ISocket::Unknown0\n");
	return 0;
}
uint32_t nn::tma::ISocket::Unknown1(uint8_t * _0, uint32_t& _1, uint32_t& _2) {
	ns_print("Stub implementation for nn::tma::ISocket::Unknown1\n");
	return 0;
}
uint32_t nn::tma::ISocket::Unknown10(uint32_t _0, uint8_t *& _1, uint32_t& _2, IUnknown*& _3) {
	ns_print("Stub implementation for nn::tma::ISocket::Unknown10\n");
	return 0;
}
uint32_t nn::tma::ISocket::Unknown11(uint32_t _0, uint32_t _1, uint32_t& _2, IpcService*& _3) {
	ns_print("Stub implementation for nn::tma::ISocket::Unknown11\n");
	return 0;
}
uint32_t nn::tma::ISocket::Unknown12(uint32_t _0, uint32_t& _1, uint64_t& _2, uint8_t *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::tma::ISocket::Unknown12\n");
	return 0;
}
uint32_t nn::tma::ISocket::Unknown13(uint32_t _0, uint32_t _1, uint32_t _2, uint64_t _3, IpcService* _4, uint32_t& _5, IpcService*& _6) {
	ns_print("Stub implementation for nn::tma::ISocket::Unknown13\n");
	return 0;
}
uint32_t nn::tma::ISocket::Unknown14(uint32_t _0, uint8_t * _1, unsigned int _1_size, uint32_t& _2, IpcService*& _3) {
	ns_print("Stub implementation for nn::tma::ISocket::Unknown14\n");
	return 0;
}
uint32_t nn::tma::ISocket::Unknown15(uint32_t _0, uint64_t _1, IpcService* _2, uint8_t * _3, unsigned int _3_size, uint8_t * _4, unsigned int _4_size, uint32_t& _5, IpcService*& _6) {
	ns_print("Stub implementation for nn::tma::ISocket::Unknown15\n");
	return 0;
}
uint32_t nn::tma::ISocket::Unknown16(uint32_t _0, uint32_t& _1, uint64_t& _2) {
	ns_print("Stub implementation for nn::tma::ISocket::Unknown16\n");
	return 0;
}
uint32_t nn::tma::ISocket::Unknown2(uint8_t * _0, uint32_t& _1, uint32_t& _2) {
	ns_print("Stub implementation for nn::tma::ISocket::Unknown2\n");
	return 0;
}
uint32_t nn::tma::ISocket::Unknown3(uint32_t _0, uint32_t& _1, uint32_t& _2) {
	ns_print("Stub implementation for nn::tma::ISocket::Unknown3\n");
	return 0;
}
uint32_t nn::tma::ISocket::Unknown4(uint8_t *& _0, uint32_t& _1, IUnknown*& _2) {
	ns_print("Stub implementation for nn::tma::ISocket::Unknown4\n");
	return 0;
}
uint32_t nn::tma::ISocket::Unknown5(uint32_t _0, uint32_t& _1, uint64_t& _2, uint8_t *& _3, unsigned int _3_size) {
	ns_print("Stub implementation for nn::tma::ISocket::Unknown5\n");
	return 0;
}
uint32_t nn::tma::ISocket::Unknown6(uint32_t _0, uint8_t * _1, unsigned int _1_size, uint32_t& _2, uint64_t& _3) {
	ns_print("Stub implementation for nn::tma::ISocket::Unknown6\n");
	return 0;
}
uint32_t nn::tma::ISocket::Unknown7(uint32_t _0, uint32_t& _1, uint32_t& _2) {
	ns_print("Stub implementation for nn::tma::ISocket::Unknown7\n");
	return 0;
}
uint32_t nn::tma::ISocket::Unknown8(uint32_t _0, uint32_t _1, uint32_t& _2, uint32_t& _3) {
	ns_print("Stub implementation for nn::tma::ISocket::Unknown8\n");
	return 0;
}
uint32_t nn::tma::ISocket::Unknown9(uint32_t& _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::tma::ISocket::Unknown9\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::ts::server {
	class IMeasurementServer : public IpcService {
	public:
		IMeasurementServer() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ts::server::IMeasurementServer::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ts::server::IMeasurementServer::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ts::server::IMeasurementServer::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::ts::server::IMeasurementServer::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::ts::server::IMeasurementServer", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::ts::server::IMeasurementServer::Unknown0() {
	ns_print("Stub implementation for nn::ts::server::IMeasurementServer::Unknown0\n");
	return 0;
}
uint32_t nn::ts::server::IMeasurementServer::Unknown1() {
	ns_print("Stub implementation for nn::ts::server::IMeasurementServer::Unknown1\n");
	return 0;
}
uint32_t nn::ts::server::IMeasurementServer::Unknown2() {
	ns_print("Stub implementation for nn::ts::server::IMeasurementServer::Unknown2\n");
	return 0;
}
uint32_t nn::ts::server::IMeasurementServer::Unknown3() {
	ns_print("Stub implementation for nn::ts::server::IMeasurementServer::Unknown3\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::uart {
	class IManager : public IpcService {
	public:
		IManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::uart::IManager::Unknown0: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown0(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::uart::IManager::Unknown1: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown1(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::uart::IManager::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::uart::IManager::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::uart::IManager::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::uart::IManager::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::uart::IManager::Unknown6\n");
				resp->error_code = Unknown6(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::uart::IManager::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::uart::IManager::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::uart::IManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t _0, uint8_t& _1);
		uint32_t Unknown1(uint32_t _0, uint8_t& _1);
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6(IUnknown*& _0);
		uint32_t Unknown7();
		uint32_t Unknown8();
	};
	class IPortSession : public IpcService {
	public:
		IPortSession() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::uart::IPortSession::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::uart::IPortSession::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::uart::IPortSession::Unknown2\n");
				resp->error_code = Unknown2(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::uart::IPortSession::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::uart::IPortSession::Unknown4\n");
				resp->error_code = Unknown4(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::uart::IPortSession::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::uart::IPortSession::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::uart::IPortSession::Unknown7: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown7(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::uart::IPortSession", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2(uint64_t& _0);
		uint32_t Unknown3();
		uint32_t Unknown4(uint64_t& _0);
		uint32_t Unknown5();
		uint32_t Unknown6();
		uint32_t Unknown7(uint32_t _0, uint8_t& _1);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::uart::IManager::Unknown0(uint32_t _0, uint8_t& _1) {
	ns_print("Stub implementation for nn::uart::IManager::Unknown0\n");
	return 0;
}
uint32_t nn::uart::IManager::Unknown1(uint32_t _0, uint8_t& _1) {
	ns_print("Stub implementation for nn::uart::IManager::Unknown1\n");
	return 0;
}
uint32_t nn::uart::IManager::Unknown2() {
	ns_print("Stub implementation for nn::uart::IManager::Unknown2\n");
	return 0;
}
uint32_t nn::uart::IManager::Unknown3() {
	ns_print("Stub implementation for nn::uart::IManager::Unknown3\n");
	return 0;
}
uint32_t nn::uart::IManager::Unknown4() {
	ns_print("Stub implementation for nn::uart::IManager::Unknown4\n");
	return 0;
}
uint32_t nn::uart::IManager::Unknown5() {
	ns_print("Stub implementation for nn::uart::IManager::Unknown5\n");
	return 0;
}
uint32_t nn::uart::IManager::Unknown6(IUnknown*& _0) {
	ns_print("Stub implementation for nn::uart::IManager::Unknown6\n");
	return 0;
}
uint32_t nn::uart::IManager::Unknown7() {
	ns_print("Stub implementation for nn::uart::IManager::Unknown7\n");
	return 0;
}
uint32_t nn::uart::IManager::Unknown8() {
	ns_print("Stub implementation for nn::uart::IManager::Unknown8\n");
	return 0;
}
uint32_t nn::uart::IPortSession::Unknown0() {
	ns_print("Stub implementation for nn::uart::IPortSession::Unknown0\n");
	return 0;
}
uint32_t nn::uart::IPortSession::Unknown1() {
	ns_print("Stub implementation for nn::uart::IPortSession::Unknown1\n");
	return 0;
}
uint32_t nn::uart::IPortSession::Unknown2(uint64_t& _0) {
	ns_print("Stub implementation for nn::uart::IPortSession::Unknown2\n");
	return 0;
}
uint32_t nn::uart::IPortSession::Unknown3() {
	ns_print("Stub implementation for nn::uart::IPortSession::Unknown3\n");
	return 0;
}
uint32_t nn::uart::IPortSession::Unknown4(uint64_t& _0) {
	ns_print("Stub implementation for nn::uart::IPortSession::Unknown4\n");
	return 0;
}
uint32_t nn::uart::IPortSession::Unknown5() {
	ns_print("Stub implementation for nn::uart::IPortSession::Unknown5\n");
	return 0;
}
uint32_t nn::uart::IPortSession::Unknown6() {
	ns_print("Stub implementation for nn::uart::IPortSession::Unknown6\n");
	return 0;
}
uint32_t nn::uart::IPortSession::Unknown7(uint32_t _0, uint8_t& _1) {
	ns_print("Stub implementation for nn::uart::IPortSession::Unknown7\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::usb::ds {
	class IDsEndpoint : public IpcService {
	public:
		IDsEndpoint() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsEndpoint::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsEndpoint::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsEndpoint::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsEndpoint::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsEndpoint::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsEndpoint::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::usb::ds::IDsEndpoint", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
	};
	class IDsInterface : public IpcService {
	public:
		IDsInterface() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsInterface::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsInterface::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsInterface::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsInterface::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsInterface::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsInterface::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsInterface::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsInterface::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsInterface::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsInterface::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsInterface::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsInterface::Unknown11\n");
				resp->error_code = Unknown11();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::usb::ds::IDsInterface", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown10();
		uint32_t Unknown11();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6();
		uint32_t Unknown7();
		uint32_t Unknown8();
		uint32_t Unknown9();
	};
	class IDsService : public IpcService {
	public:
		IDsService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsService::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsService::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsService::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsService::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsService::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::ds::IDsService::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::usb::ds::IDsService", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::usb::ds::IDsEndpoint::Unknown0() {
	ns_print("Stub implementation for nn::usb::ds::IDsEndpoint::Unknown0\n");
	return 0;
}
uint32_t nn::usb::ds::IDsEndpoint::Unknown1() {
	ns_print("Stub implementation for nn::usb::ds::IDsEndpoint::Unknown1\n");
	return 0;
}
uint32_t nn::usb::ds::IDsEndpoint::Unknown2() {
	ns_print("Stub implementation for nn::usb::ds::IDsEndpoint::Unknown2\n");
	return 0;
}
uint32_t nn::usb::ds::IDsEndpoint::Unknown3() {
	ns_print("Stub implementation for nn::usb::ds::IDsEndpoint::Unknown3\n");
	return 0;
}
uint32_t nn::usb::ds::IDsEndpoint::Unknown4() {
	ns_print("Stub implementation for nn::usb::ds::IDsEndpoint::Unknown4\n");
	return 0;
}
uint32_t nn::usb::ds::IDsEndpoint::Unknown5() {
	ns_print("Stub implementation for nn::usb::ds::IDsEndpoint::Unknown5\n");
	return 0;
}
uint32_t nn::usb::ds::IDsInterface::Unknown0() {
	ns_print("Stub implementation for nn::usb::ds::IDsInterface::Unknown0\n");
	return 0;
}
uint32_t nn::usb::ds::IDsInterface::Unknown1() {
	ns_print("Stub implementation for nn::usb::ds::IDsInterface::Unknown1\n");
	return 0;
}
uint32_t nn::usb::ds::IDsInterface::Unknown10() {
	ns_print("Stub implementation for nn::usb::ds::IDsInterface::Unknown10\n");
	return 0;
}
uint32_t nn::usb::ds::IDsInterface::Unknown11() {
	ns_print("Stub implementation for nn::usb::ds::IDsInterface::Unknown11\n");
	return 0;
}
uint32_t nn::usb::ds::IDsInterface::Unknown2() {
	ns_print("Stub implementation for nn::usb::ds::IDsInterface::Unknown2\n");
	return 0;
}
uint32_t nn::usb::ds::IDsInterface::Unknown3() {
	ns_print("Stub implementation for nn::usb::ds::IDsInterface::Unknown3\n");
	return 0;
}
uint32_t nn::usb::ds::IDsInterface::Unknown4() {
	ns_print("Stub implementation for nn::usb::ds::IDsInterface::Unknown4\n");
	return 0;
}
uint32_t nn::usb::ds::IDsInterface::Unknown5() {
	ns_print("Stub implementation for nn::usb::ds::IDsInterface::Unknown5\n");
	return 0;
}
uint32_t nn::usb::ds::IDsInterface::Unknown6() {
	ns_print("Stub implementation for nn::usb::ds::IDsInterface::Unknown6\n");
	return 0;
}
uint32_t nn::usb::ds::IDsInterface::Unknown7() {
	ns_print("Stub implementation for nn::usb::ds::IDsInterface::Unknown7\n");
	return 0;
}
uint32_t nn::usb::ds::IDsInterface::Unknown8() {
	ns_print("Stub implementation for nn::usb::ds::IDsInterface::Unknown8\n");
	return 0;
}
uint32_t nn::usb::ds::IDsInterface::Unknown9() {
	ns_print("Stub implementation for nn::usb::ds::IDsInterface::Unknown9\n");
	return 0;
}
uint32_t nn::usb::ds::IDsService::Unknown0() {
	ns_print("Stub implementation for nn::usb::ds::IDsService::Unknown0\n");
	return 0;
}
uint32_t nn::usb::ds::IDsService::Unknown1() {
	ns_print("Stub implementation for nn::usb::ds::IDsService::Unknown1\n");
	return 0;
}
uint32_t nn::usb::ds::IDsService::Unknown2() {
	ns_print("Stub implementation for nn::usb::ds::IDsService::Unknown2\n");
	return 0;
}
uint32_t nn::usb::ds::IDsService::Unknown3() {
	ns_print("Stub implementation for nn::usb::ds::IDsService::Unknown3\n");
	return 0;
}
uint32_t nn::usb::ds::IDsService::Unknown4() {
	ns_print("Stub implementation for nn::usb::ds::IDsService::Unknown4\n");
	return 0;
}
uint32_t nn::usb::ds::IDsService::Unknown5() {
	ns_print("Stub implementation for nn::usb::ds::IDsService::Unknown5\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::usb::hs {
	class IClientEpSession : public IpcService {
	public:
		IClientEpSession() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::hs::IClientEpSession::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::hs::IClientEpSession::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::usb::hs::IClientEpSession::Unknown2\n");
				resp->error_code = Unknown2(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::hs::IClientEpSession::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::hs::IClientEpSession::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::hs::IClientEpSession::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::hs::IClientEpSession::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::usb::hs::IClientEpSession", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2(IpcService*& _0);
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6();
	};
	class IClientIfSession : public IpcService {
	public:
		IClientIfSession() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::usb::hs::IClientIfSession::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::hs::IClientIfSession::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::hs::IClientIfSession::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::hs::IClientIfSession::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::usb::hs::IClientIfSession::Unknown4\n");
				resp->error_code = Unknown4(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::hs::IClientIfSession::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::usb::hs::IClientIfSession::Unknown6\n");
				resp->error_code = Unknown6(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::hs::IClientIfSession::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::hs::IClientIfSession::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::hs::IClientIfSession::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::usb::hs::IClientIfSession", req->cmd_id);
			}
		}
		uint32_t Unknown0(IpcService*& _0);
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4(uint32_t& _0);
		uint32_t Unknown5();
		uint32_t Unknown6(IpcService*& _0);
		uint32_t Unknown7();
		uint32_t Unknown8();
		uint32_t Unknown9();
	};
	class IClientRootSession : public IpcService {
	public:
		IClientRootSession() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::hs::IClientRootSession::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::hs::IClientRootSession::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::hs::IClientRootSession::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::hs::IClientRootSession::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::hs::IClientRootSession::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::hs::IClientRootSession::Unknown5: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown5(req->GetData<uint8_t>(8));
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::usb::hs::IClientRootSession::Unknown6\n");
				resp->error_code = Unknown6(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::hs::IClientRootSession::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::usb::hs::IClientRootSession", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5(uint8_t _0);
		uint32_t Unknown6(IpcService*& _0);
		uint32_t Unknown7();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::usb::hs::IClientEpSession::Unknown0() {
	ns_print("Stub implementation for nn::usb::hs::IClientEpSession::Unknown0\n");
	return 0;
}
uint32_t nn::usb::hs::IClientEpSession::Unknown1() {
	ns_print("Stub implementation for nn::usb::hs::IClientEpSession::Unknown1\n");
	return 0;
}
uint32_t nn::usb::hs::IClientEpSession::Unknown2(IpcService*& _0) {
	ns_print("Stub implementation for nn::usb::hs::IClientEpSession::Unknown2\n");
	return 0;
}
uint32_t nn::usb::hs::IClientEpSession::Unknown3() {
	ns_print("Stub implementation for nn::usb::hs::IClientEpSession::Unknown3\n");
	return 0;
}
uint32_t nn::usb::hs::IClientEpSession::Unknown4() {
	ns_print("Stub implementation for nn::usb::hs::IClientEpSession::Unknown4\n");
	return 0;
}
uint32_t nn::usb::hs::IClientEpSession::Unknown5() {
	ns_print("Stub implementation for nn::usb::hs::IClientEpSession::Unknown5\n");
	return 0;
}
uint32_t nn::usb::hs::IClientEpSession::Unknown6() {
	ns_print("Stub implementation for nn::usb::hs::IClientEpSession::Unknown6\n");
	return 0;
}
uint32_t nn::usb::hs::IClientIfSession::Unknown0(IpcService*& _0) {
	ns_print("Stub implementation for nn::usb::hs::IClientIfSession::Unknown0\n");
	return 0;
}
uint32_t nn::usb::hs::IClientIfSession::Unknown1() {
	ns_print("Stub implementation for nn::usb::hs::IClientIfSession::Unknown1\n");
	return 0;
}
uint32_t nn::usb::hs::IClientIfSession::Unknown2() {
	ns_print("Stub implementation for nn::usb::hs::IClientIfSession::Unknown2\n");
	return 0;
}
uint32_t nn::usb::hs::IClientIfSession::Unknown3() {
	ns_print("Stub implementation for nn::usb::hs::IClientIfSession::Unknown3\n");
	return 0;
}
uint32_t nn::usb::hs::IClientIfSession::Unknown4(uint32_t& _0) {
	ns_print("Stub implementation for nn::usb::hs::IClientIfSession::Unknown4\n");
	return 0;
}
uint32_t nn::usb::hs::IClientIfSession::Unknown5() {
	ns_print("Stub implementation for nn::usb::hs::IClientIfSession::Unknown5\n");
	return 0;
}
uint32_t nn::usb::hs::IClientIfSession::Unknown6(IpcService*& _0) {
	ns_print("Stub implementation for nn::usb::hs::IClientIfSession::Unknown6\n");
	return 0;
}
uint32_t nn::usb::hs::IClientIfSession::Unknown7() {
	ns_print("Stub implementation for nn::usb::hs::IClientIfSession::Unknown7\n");
	return 0;
}
uint32_t nn::usb::hs::IClientIfSession::Unknown8() {
	ns_print("Stub implementation for nn::usb::hs::IClientIfSession::Unknown8\n");
	return 0;
}
uint32_t nn::usb::hs::IClientIfSession::Unknown9() {
	ns_print("Stub implementation for nn::usb::hs::IClientIfSession::Unknown9\n");
	return 0;
}
uint32_t nn::usb::hs::IClientRootSession::Unknown0() {
	ns_print("Stub implementation for nn::usb::hs::IClientRootSession::Unknown0\n");
	return 0;
}
uint32_t nn::usb::hs::IClientRootSession::Unknown1() {
	ns_print("Stub implementation for nn::usb::hs::IClientRootSession::Unknown1\n");
	return 0;
}
uint32_t nn::usb::hs::IClientRootSession::Unknown2() {
	ns_print("Stub implementation for nn::usb::hs::IClientRootSession::Unknown2\n");
	return 0;
}
uint32_t nn::usb::hs::IClientRootSession::Unknown3() {
	ns_print("Stub implementation for nn::usb::hs::IClientRootSession::Unknown3\n");
	return 0;
}
uint32_t nn::usb::hs::IClientRootSession::Unknown4() {
	ns_print("Stub implementation for nn::usb::hs::IClientRootSession::Unknown4\n");
	return 0;
}
uint32_t nn::usb::hs::IClientRootSession::Unknown5(uint8_t _0) {
	ns_print("Stub implementation for nn::usb::hs::IClientRootSession::Unknown5\n");
	return 0;
}
uint32_t nn::usb::hs::IClientRootSession::Unknown6(IpcService*& _0) {
	ns_print("Stub implementation for nn::usb::hs::IClientRootSession::Unknown6\n");
	return 0;
}
uint32_t nn::usb::hs::IClientRootSession::Unknown7() {
	ns_print("Stub implementation for nn::usb::hs::IClientRootSession::Unknown7\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::usb::pd::detail {
	class IPdCradleManager : public IpcService {
	public:
		IPdCradleManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::usb::pd::detail::IPdCradleManager::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::usb::pd::detail::IPdCradleManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(IUnknown*& _0);
	};
	class IPdCradleSession : public IpcService {
	public:
		IPdCradleSession() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::pd::detail::IPdCradleSession::Unknown0: uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Unknown0(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::usb::pd::detail::IPdCradleSession::Unknown1: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown1(req->GetData<uint32_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::pd::detail::IPdCradleSession::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::pd::detail::IPdCradleSession::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::pd::detail::IPdCradleSession::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::pd::detail::IPdCradleSession::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::pd::detail::IPdCradleSession::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::usb::pd::detail::IPdCradleSession::Unknown7\n");
				resp->error_code = Unknown7(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::usb::pd::detail::IPdCradleSession::Unknown8\n");
				resp->error_code = Unknown8(*resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::usb::pd::detail::IPdCradleSession", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint32_t _0, uint32_t _1);
		uint32_t Unknown1(uint32_t _0, uint32_t& _1);
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6();
		uint32_t Unknown7(uint8_t& _0);
		uint32_t Unknown8(uint8_t& _0);
	};
	class IPdManager : public IpcService {
	public:
		IPdManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				IUnknown* temp1;
				ns_print("IPC message to nn::usb::pd::detail::IPdManager::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::usb::pd::detail::IPdManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(IUnknown*& _0);
	};
	class IPdSession : public IpcService {
	public:
		IPdSession() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::usb::pd::detail::IPdSession::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::pd::detail::IPdSession::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::pd::detail::IPdSession::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::usb::pd::detail::IPdSession::Unknown3\n");
				resp->error_code = Unknown3(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::pd::detail::IPdSession::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::pd::detail::IPdSession::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::pd::detail::IPdSession::Unknown6: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown6(req->GetData<uint8_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::usb::pd::detail::IPdSession", req->cmd_id);
			}
		}
		uint32_t Unknown0(IpcService*& _0);
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3(uint32_t& _0);
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6(uint8_t _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::usb::pd::detail::IPdCradleManager::Unknown0(IUnknown*& _0) {
	ns_print("Stub implementation for nn::usb::pd::detail::IPdCradleManager::Unknown0\n");
	return 0;
}
uint32_t nn::usb::pd::detail::IPdCradleSession::Unknown0(uint32_t _0, uint32_t _1) {
	ns_print("Stub implementation for nn::usb::pd::detail::IPdCradleSession::Unknown0\n");
	return 0;
}
uint32_t nn::usb::pd::detail::IPdCradleSession::Unknown1(uint32_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::usb::pd::detail::IPdCradleSession::Unknown1\n");
	return 0;
}
uint32_t nn::usb::pd::detail::IPdCradleSession::Unknown2() {
	ns_print("Stub implementation for nn::usb::pd::detail::IPdCradleSession::Unknown2\n");
	return 0;
}
uint32_t nn::usb::pd::detail::IPdCradleSession::Unknown3() {
	ns_print("Stub implementation for nn::usb::pd::detail::IPdCradleSession::Unknown3\n");
	return 0;
}
uint32_t nn::usb::pd::detail::IPdCradleSession::Unknown4() {
	ns_print("Stub implementation for nn::usb::pd::detail::IPdCradleSession::Unknown4\n");
	return 0;
}
uint32_t nn::usb::pd::detail::IPdCradleSession::Unknown5() {
	ns_print("Stub implementation for nn::usb::pd::detail::IPdCradleSession::Unknown5\n");
	return 0;
}
uint32_t nn::usb::pd::detail::IPdCradleSession::Unknown6() {
	ns_print("Stub implementation for nn::usb::pd::detail::IPdCradleSession::Unknown6\n");
	return 0;
}
uint32_t nn::usb::pd::detail::IPdCradleSession::Unknown7(uint8_t& _0) {
	ns_print("Stub implementation for nn::usb::pd::detail::IPdCradleSession::Unknown7\n");
	return 0;
}
uint32_t nn::usb::pd::detail::IPdCradleSession::Unknown8(uint8_t& _0) {
	ns_print("Stub implementation for nn::usb::pd::detail::IPdCradleSession::Unknown8\n");
	return 0;
}
uint32_t nn::usb::pd::detail::IPdManager::Unknown0(IUnknown*& _0) {
	ns_print("Stub implementation for nn::usb::pd::detail::IPdManager::Unknown0\n");
	return 0;
}
uint32_t nn::usb::pd::detail::IPdSession::Unknown0(IpcService*& _0) {
	ns_print("Stub implementation for nn::usb::pd::detail::IPdSession::Unknown0\n");
	return 0;
}
uint32_t nn::usb::pd::detail::IPdSession::Unknown1() {
	ns_print("Stub implementation for nn::usb::pd::detail::IPdSession::Unknown1\n");
	return 0;
}
uint32_t nn::usb::pd::detail::IPdSession::Unknown2() {
	ns_print("Stub implementation for nn::usb::pd::detail::IPdSession::Unknown2\n");
	return 0;
}
uint32_t nn::usb::pd::detail::IPdSession::Unknown3(uint32_t& _0) {
	ns_print("Stub implementation for nn::usb::pd::detail::IPdSession::Unknown3\n");
	return 0;
}
uint32_t nn::usb::pd::detail::IPdSession::Unknown4() {
	ns_print("Stub implementation for nn::usb::pd::detail::IPdSession::Unknown4\n");
	return 0;
}
uint32_t nn::usb::pd::detail::IPdSession::Unknown5() {
	ns_print("Stub implementation for nn::usb::pd::detail::IPdSession::Unknown5\n");
	return 0;
}
uint32_t nn::usb::pd::detail::IPdSession::Unknown6(uint8_t _0) {
	ns_print("Stub implementation for nn::usb::pd::detail::IPdSession::Unknown6\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::usb::pm {
	class IPmService : public IpcService {
	public:
		IPmService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::usb::pm::IPmService::Unknown0\n");
				resp->error_code = Unknown0(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::pm::IPmService::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::usb::pm::IPmService::Unknown2\n");
				resp->error_code = Unknown2(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::usb::pm::IPmService::Unknown3\n");
				resp->error_code = Unknown3(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::pm::IPmService::Unknown4: uint32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = Unknown4(req->GetData<uint32_t>(8), req->GetData<uint32_t>(0xc));
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::usb::pm::IPmService::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::usb::pm::IPmService", req->cmd_id);
			}
		}
		uint32_t Unknown0(IpcService*& _0);
		uint32_t Unknown1();
		uint32_t Unknown2(IpcService*& _0);
		uint32_t Unknown3(uint32_t& _0);
		uint32_t Unknown4(uint32_t _0, uint32_t _1);
		uint32_t Unknown5();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::usb::pm::IPmService::Unknown0(IpcService*& _0) {
	ns_print("Stub implementation for nn::usb::pm::IPmService::Unknown0\n");
	return 0;
}
uint32_t nn::usb::pm::IPmService::Unknown1() {
	ns_print("Stub implementation for nn::usb::pm::IPmService::Unknown1\n");
	return 0;
}
uint32_t nn::usb::pm::IPmService::Unknown2(IpcService*& _0) {
	ns_print("Stub implementation for nn::usb::pm::IPmService::Unknown2\n");
	return 0;
}
uint32_t nn::usb::pm::IPmService::Unknown3(uint32_t& _0) {
	ns_print("Stub implementation for nn::usb::pm::IPmService::Unknown3\n");
	return 0;
}
uint32_t nn::usb::pm::IPmService::Unknown4(uint32_t _0, uint32_t _1) {
	ns_print("Stub implementation for nn::usb::pm::IPmService::Unknown4\n");
	return 0;
}
uint32_t nn::usb::pm::IPmService::Unknown5() {
	ns_print("Stub implementation for nn::usb::pm::IPmService::Unknown5\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::visrv::sf {
	class IApplicationDisplayService : public IpcService {
	public:
		IApplicationDisplayService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 100: {
				resp->GenBuf(1, 0, 0);
				nns::hosbinder::IHOSBinderDriver* temp1;
				ns_print("IPC message to nn::visrv::sf::IApplicationDisplayService::GetRelayService\n");
				resp->error_code = GetRelayService(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 101: {
				resp->GenBuf(1, 0, 0);
				nn::visrv::sf::ISystemDisplayService* temp1;
				ns_print("IPC message to nn::visrv::sf::IApplicationDisplayService::GetSystemDisplayService\n");
				resp->error_code = GetSystemDisplayService(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 102: {
				resp->GenBuf(1, 0, 0);
				nn::visrv::sf::IManagerDisplayService* temp1;
				ns_print("IPC message to nn::visrv::sf::IApplicationDisplayService::GetManagerDisplayService\n");
				resp->error_code = GetManagerDisplayService(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 103: {
				resp->GenBuf(1, 0, 0);
				nns::hosbinder::IHOSBinderDriver* temp1;
				ns_print("IPC message to nn::visrv::sf::IApplicationDisplayService::GetIndirectDisplayTransactionService\n");
				resp->error_code = GetIndirectDisplayTransactionService(temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 1000: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::vi::DisplayInfo* temp3 = (nn::vi::DisplayInfo *) new uint8_t[temp2];
				ns_print("IPC message to nn::visrv::sf::IApplicationDisplayService::ListDisplays\n");
				resp->error_code = ListDisplays(*resp->GetDataPointer<int64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 1010: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::visrv::sf::IApplicationDisplayService::OpenDisplay: nn::vi::DisplayName = %s\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x40).c_str());
				resp->error_code = OpenDisplay(req->GetDataPointer<nn::vi::DisplayName>(8), *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 1011: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::visrv::sf::IApplicationDisplayService::OpenDefaultDisplay\n");
				resp->error_code = OpenDefaultDisplay(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 1020: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::IApplicationDisplayService::CloseDisplay: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = CloseDisplay(req->GetData<uint64_t>(8));
				return 0;
			}
			case 1101: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::IApplicationDisplayService::SetDisplayEnabled: bool = 0x%x, uint64_t = 0x%%lx\n", req->GetData<bool>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = SetDisplayEnabled(req->GetData<bool>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 1102: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::visrv::sf::IApplicationDisplayService::GetDisplayResolution: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetDisplayResolution(req->GetData<uint64_t>(8), *resp->GetDataPointer<int64_t *>(8), *resp->GetDataPointer<int64_t *>(0x10));
				return 0;
			}
			case 2020: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::visrv::sf::IApplicationDisplayService::OpenLayer: nn::vi::DisplayName = %s, uint64_t = 0x%%lx, nn::applet::AppletResourceUserId = 0x%%lx\n", read_string(req->GetDataPointer<uint8_t *>(8), 0x40).c_str(), req->GetData<uint64_t>(0x48), req->GetData<nn::applet::AppletResourceUserId>(0x50));
				resp->error_code = OpenLayer(req->GetDataPointer<nn::vi::DisplayName>(8), req->GetData<uint64_t>(0x48), req->GetData<nn::applet::AppletResourceUserId>(0x50), req->pid, *resp->GetDataPointer<int64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2021: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::IApplicationDisplayService::CloseLayer: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = CloseLayer(req->GetData<uint64_t>(8));
				return 0;
			}
			case 2030: {
				resp->GenBuf(0, 0, 16);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::visrv::sf::IApplicationDisplayService::CreateStrayLayer: uint32_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = CreateStrayLayer(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10), *resp->GetDataPointer<uint64_t *>(8), *resp->GetDataPointer<int64_t *>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2031: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::IApplicationDisplayService::DestroyStrayLayer: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = DestroyStrayLayer(req->GetData<uint64_t>(8));
				return 0;
			}
			case 2101: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::IApplicationDisplayService::SetLayerScalingMode: uint32_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = SetLayerScalingMode(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 2450: {
				resp->GenBuf(0, 0, 16);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x46, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::visrv::sf::IApplicationDisplayService::GetIndirectLayerImageMap: int64_t = 0x%%lx, int64_t = 0x%%lx, uint64_t = 0x%%lx, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<int64_t>(8), req->GetData<int64_t>(0x10), req->GetData<uint64_t>(0x18), req->GetData<nn::applet::AppletResourceUserId>(0x20));
				resp->error_code = GetIndirectLayerImageMap(req->GetData<int64_t>(8), req->GetData<int64_t>(0x10), req->GetData<uint64_t>(0x18), req->GetData<nn::applet::AppletResourceUserId>(0x20), req->pid, *resp->GetDataPointer<int64_t *>(8), *resp->GetDataPointer<int64_t *>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2451: {
				resp->GenBuf(0, 0, 16);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x46, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::visrv::sf::IApplicationDisplayService::GetIndirectLayerImageCropMap: float = %f, float = %f, float = %f, float = %f, int64_t = 0x%%lx, int64_t = 0x%%lx, uint64_t = 0x%%lx, nn::applet::AppletResourceUserId = 0x%%lx\n", (double) req->GetData<float>(8), (double) req->GetData<float>(0xc), (double) req->GetData<float>(0x10), (double) req->GetData<float>(0x14), req->GetData<int64_t>(0x18), req->GetData<int64_t>(0x20), req->GetData<uint64_t>(0x28), req->GetData<nn::applet::AppletResourceUserId>(0x30));
				resp->error_code = GetIndirectLayerImageCropMap(req->GetData<float>(8), req->GetData<float>(0xc), req->GetData<float>(0x10), req->GetData<float>(0x14), req->GetData<int64_t>(0x18), req->GetData<int64_t>(0x20), req->GetData<uint64_t>(0x28), req->GetData<nn::applet::AppletResourceUserId>(0x30), req->pid, *resp->GetDataPointer<int64_t *>(8), *resp->GetDataPointer<int64_t *>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2460: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::visrv::sf::IApplicationDisplayService::GetIndirectLayerImageRequiredMemoryInfo: int64_t = 0x%%lx, int64_t = 0x%%lx\n", req->GetData<int64_t>(8), req->GetData<int64_t>(0x10));
				resp->error_code = GetIndirectLayerImageRequiredMemoryInfo(req->GetData<int64_t>(8), req->GetData<int64_t>(0x10), *resp->GetDataPointer<int64_t *>(8), *resp->GetDataPointer<int64_t *>(0x10));
				return 0;
			}
			case 5202: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::visrv::sf::IApplicationDisplayService::GetDisplayVsyncEvent: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetDisplayVsyncEvent(req->GetData<uint64_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 5203: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::visrv::sf::IApplicationDisplayService::GetDisplayVsyncEventForDebug: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetDisplayVsyncEventForDebug(req->GetData<uint64_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::visrv::sf::IApplicationDisplayService", req->cmd_id);
			}
		}
		uint32_t CloseDisplay(uint64_t _0);
		uint32_t CloseLayer(uint64_t _0);
		uint32_t CreateStrayLayer(uint32_t _0, uint64_t _1, uint64_t& _2, int64_t& _3, uint8_t *& _4, unsigned int _4_size);
		uint32_t DestroyStrayLayer(uint64_t _0);
		uint32_t GetDisplayResolution(uint64_t _0, int64_t& _1, int64_t& _2);
		uint32_t GetDisplayVsyncEvent(uint64_t _0, IpcService*& _1);
		uint32_t GetDisplayVsyncEventForDebug(uint64_t _0, IpcService*& _1);
		uint32_t GetIndirectDisplayTransactionService(nns::hosbinder::IHOSBinderDriver*& _0);
		uint32_t GetIndirectLayerImageCropMap(float _0, float _1, float _2, float _3, int64_t _4, int64_t _5, uint64_t _6, nn::applet::AppletResourceUserId _7, uint64_t _8, int64_t& _9, int64_t& _10, uint8_t *& _11, unsigned int _11_size);
		uint32_t GetIndirectLayerImageMap(int64_t _0, int64_t _1, uint64_t _2, nn::applet::AppletResourceUserId _3, uint64_t _4, int64_t& _5, int64_t& _6, uint8_t *& _7, unsigned int _7_size);
		uint32_t GetIndirectLayerImageRequiredMemoryInfo(int64_t _0, int64_t _1, int64_t& _2, int64_t& _3);
		uint32_t GetManagerDisplayService(nn::visrv::sf::IManagerDisplayService*& _0);
		uint32_t GetRelayService(nns::hosbinder::IHOSBinderDriver*& _0);
		uint32_t GetSystemDisplayService(nn::visrv::sf::ISystemDisplayService*& _0);
		uint32_t ListDisplays(int64_t& _0, nn::vi::DisplayInfo *& _1, unsigned int _1_size);
		uint32_t OpenDefaultDisplay(uint64_t& _0);
		uint32_t OpenDisplay(nn::vi::DisplayName _0, uint64_t& _1);
		uint32_t OpenLayer(nn::vi::DisplayName _0, uint64_t _1, nn::applet::AppletResourceUserId _2, uint64_t _3, int64_t& _4, uint8_t *& _5, unsigned int _5_size);
		uint32_t SetDisplayEnabled(bool _0, uint64_t _1);
		uint32_t SetLayerScalingMode(uint32_t _0, uint64_t _1);
	};
	class IApplicationRootService : public IpcService {
	public:
		IApplicationRootService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(1, 0, 0);
				nn::visrv::sf::IApplicationDisplayService* temp1;
				ns_print("IPC message to nn::visrv::sf::IApplicationRootService::GetDisplayService: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = GetDisplayService(req->GetData<uint32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::visrv::sf::IApplicationRootService", req->cmd_id);
			}
		}
		uint32_t GetDisplayService(uint32_t _0, nn::visrv::sf::IApplicationDisplayService*& _1);
	};
	class IManagerDisplayService : public IpcService {
	public:
		IManagerDisplayService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 1102: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::GetDisplayResolution: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetDisplayResolution(req->GetData<uint64_t>(8), *resp->GetDataPointer<int64_t *>(8), *resp->GetDataPointer<int64_t *>(0x10));
				return 0;
			}
			case 2010: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::CreateManagedLayer: uint32_t = 0x%x, uint64_t = 0x%%lx, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10), req->GetData<nn::applet::AppletResourceUserId>(0x18));
				resp->error_code = CreateManagedLayer(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10), req->GetData<nn::applet::AppletResourceUserId>(0x18), *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 2011: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::DestroyManagedLayer: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = DestroyManagedLayer(req->GetData<uint64_t>(8));
				return 0;
			}
			case 2050: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::CreateIndirectLayer\n");
				resp->error_code = CreateIndirectLayer(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 2051: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::DestroyIndirectLayer: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = DestroyIndirectLayer(req->GetData<uint64_t>(8));
				return 0;
			}
			case 2052: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::CreateIndirectProducerEndPoint: uint64_t = 0x%%lx, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = CreateIndirectProducerEndPoint(req->GetData<uint64_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 2053: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::DestroyIndirectProducerEndPoint: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = DestroyIndirectProducerEndPoint(req->GetData<uint64_t>(8));
				return 0;
			}
			case 2054: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::CreateIndirectConsumerEndPoint: uint64_t = 0x%%lx, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = CreateIndirectConsumerEndPoint(req->GetData<uint64_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), *resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 2055: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::DestroyIndirectConsumerEndPoint: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = DestroyIndirectConsumerEndPoint(req->GetData<uint64_t>(8));
				return 0;
			}
			case 2300: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::AcquireLayerTexturePresentingEvent: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = AcquireLayerTexturePresentingEvent(req->GetData<uint64_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 2301: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::ReleaseLayerTexturePresentingEvent: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = ReleaseLayerTexturePresentingEvent(req->GetData<uint64_t>(8));
				return 0;
			}
			case 2302: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::GetDisplayHotplugEvent: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetDisplayHotplugEvent(req->GetData<uint64_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 2402: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::GetDisplayHotplugState: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetDisplayHotplugState(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 4201: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::SetDisplayAlpha: float = %f, uint64_t = 0x%%lx\n", (double) req->GetData<float>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = SetDisplayAlpha(req->GetData<float>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 4203: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::SetDisplayLayerStack: uint32_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = SetDisplayLayerStack(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 4205: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::SetDisplayPowerState: uint32_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = SetDisplayPowerState(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 6000: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::AddToLayerStack: uint32_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = AddToLayerStack(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 6001: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::RemoveFromLayerStack: uint32_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = RemoveFromLayerStack(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 6002: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::SetLayerVisibility: bool = 0x%x, uint64_t = 0x%%lx\n", req->GetData<bool>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = SetLayerVisibility(req->GetData<bool>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 7000: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::SetContentVisibility: bool = 0x%x\n", req->GetData<bool>(8));
				resp->error_code = SetContentVisibility(req->GetData<bool>(8));
				return 0;
			}
			case 8000: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::SetConductorLayer: bool = 0x%x, uint64_t = 0x%%lx\n", req->GetData<bool>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = SetConductorLayer(req->GetData<bool>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 8100: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::IManagerDisplayService::SetIndirectProducerFlipOffset: uint64_t = 0x%%lx, uint64_t = 0x%%lx, nn::TimeSpan = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->GetData<nn::TimeSpan>(0x18));
				resp->error_code = SetIndirectProducerFlipOffset(req->GetData<uint64_t>(8), req->GetData<uint64_t>(0x10), req->GetData<nn::TimeSpan>(0x18));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::visrv::sf::IManagerDisplayService", req->cmd_id);
			}
		}
		uint32_t AcquireLayerTexturePresentingEvent(uint64_t _0, IpcService*& _1);
		uint32_t AddToLayerStack(uint32_t _0, uint64_t _1);
		uint32_t CreateIndirectConsumerEndPoint(uint64_t _0, nn::applet::AppletResourceUserId _1, uint64_t& _2);
		uint32_t CreateIndirectLayer(uint64_t& _0);
		uint32_t CreateIndirectProducerEndPoint(uint64_t _0, nn::applet::AppletResourceUserId _1, uint64_t& _2);
		uint32_t CreateManagedLayer(uint32_t _0, uint64_t _1, nn::applet::AppletResourceUserId _2, uint64_t& _3);
		uint32_t DestroyIndirectConsumerEndPoint(uint64_t _0);
		uint32_t DestroyIndirectLayer(uint64_t _0);
		uint32_t DestroyIndirectProducerEndPoint(uint64_t _0);
		uint32_t DestroyManagedLayer(uint64_t _0);
		uint32_t GetDisplayHotplugEvent(uint64_t _0, IpcService*& _1);
		uint32_t GetDisplayHotplugState(uint64_t _0, uint32_t& _1);
		uint32_t GetDisplayResolution(uint64_t _0, int64_t& _1, int64_t& _2);
		uint32_t ReleaseLayerTexturePresentingEvent(uint64_t _0);
		uint32_t RemoveFromLayerStack(uint32_t _0, uint64_t _1);
		uint32_t SetConductorLayer(bool _0, uint64_t _1);
		uint32_t SetContentVisibility(bool _0);
		uint32_t SetDisplayAlpha(float _0, uint64_t _1);
		uint32_t SetDisplayLayerStack(uint32_t _0, uint64_t _1);
		uint32_t SetDisplayPowerState(uint32_t _0, uint64_t _1);
		uint32_t SetIndirectProducerFlipOffset(uint64_t _0, uint64_t _1, nn::TimeSpan _2);
		uint32_t SetLayerVisibility(bool _0, uint64_t _1);
	};
	class IManagerRootService : public IpcService {
	public:
		IManagerRootService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 2: {
				resp->GenBuf(1, 0, 0);
				nn::visrv::sf::IApplicationDisplayService* temp1;
				ns_print("IPC message to nn::visrv::sf::IManagerRootService::GetDisplayService: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = GetDisplayService(req->GetData<uint32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(1, 0, 0);
				nn::visrv::sf::IApplicationDisplayService* temp1;
				ns_print("IPC message to nn::visrv::sf::IManagerRootService::GetDisplayServiceWithProxyNameExchange: nn::vi::ProxyName = 0x%%lx, uint32_t = 0x%x\n", req->GetData<nn::vi::ProxyName>(8), req->GetData<uint32_t>(0x10));
				resp->error_code = GetDisplayServiceWithProxyNameExchange(req->GetData<nn::vi::ProxyName>(8), req->GetData<uint32_t>(0x10), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::visrv::sf::IManagerRootService", req->cmd_id);
			}
		}
		uint32_t GetDisplayService(uint32_t _0, nn::visrv::sf::IApplicationDisplayService*& _1);
		uint32_t GetDisplayServiceWithProxyNameExchange(nn::vi::ProxyName _0, uint32_t _1, nn::visrv::sf::IApplicationDisplayService*& _2);
	};
	class ISystemDisplayService : public IpcService {
	public:
		ISystemDisplayService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 1200: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::GetZOrderCountMin: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetZOrderCountMin(req->GetData<uint64_t>(8), *resp->GetDataPointer<int64_t *>(8));
				return 0;
			}
			case 1202: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::GetZOrderCountMax: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetZOrderCountMax(req->GetData<uint64_t>(8), *resp->GetDataPointer<int64_t *>(8));
				return 0;
			}
			case 1203: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::GetDisplayLogicalResolution: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetDisplayLogicalResolution(req->GetData<uint64_t>(8), *resp->GetDataPointer<int32_t *>(8), *resp->GetDataPointer<int32_t *>(0xc));
				return 0;
			}
			case 1204: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::SetDisplayMagnification: int32_t = 0x%x, int32_t = 0x%x, int32_t = 0x%x, int32_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<int32_t>(8), req->GetData<int32_t>(0xc), req->GetData<int32_t>(0x10), req->GetData<int32_t>(0x14), req->GetData<uint64_t>(0x18));
				resp->error_code = SetDisplayMagnification(req->GetData<int32_t>(8), req->GetData<int32_t>(0xc), req->GetData<int32_t>(0x10), req->GetData<int32_t>(0x14), req->GetData<uint64_t>(0x18));
				return 0;
			}
			case 2201: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::SetLayerPosition: float = %f, float = %f, uint64_t = 0x%%lx\n", (double) req->GetData<float>(8), (double) req->GetData<float>(0xc), req->GetData<uint64_t>(0x10));
				resp->error_code = SetLayerPosition(req->GetData<float>(8), req->GetData<float>(0xc), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 2203: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::SetLayerSize: uint64_t = 0x%%lx, int64_t = 0x%%lx, int64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<int64_t>(0x10), req->GetData<int64_t>(0x18));
				resp->error_code = SetLayerSize(req->GetData<uint64_t>(8), req->GetData<int64_t>(0x10), req->GetData<int64_t>(0x18));
				return 0;
			}
			case 2204: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::GetLayerZ: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetLayerZ(req->GetData<uint64_t>(8), *resp->GetDataPointer<int64_t *>(8));
				return 0;
			}
			case 2205: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::SetLayerZ: uint64_t = 0x%%lx, int64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<int64_t>(0x10));
				resp->error_code = SetLayerZ(req->GetData<uint64_t>(8), req->GetData<int64_t>(0x10));
				return 0;
			}
			case 2207: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::SetLayerVisibility: bool = 0x%x, uint64_t = 0x%%lx\n", req->GetData<bool>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = SetLayerVisibility(req->GetData<bool>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 2209: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::SetLayerAlpha: float = %f, uint64_t = 0x%%lx\n", (double) req->GetData<float>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = SetLayerAlpha(req->GetData<float>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 2312: {
				resp->GenBuf(0, 0, 16);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::CreateStrayLayer: uint32_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = CreateStrayLayer(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10), *resp->GetDataPointer<uint64_t *>(8), *resp->GetDataPointer<int64_t *>(0x10), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2400: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::OpenIndirectLayer: uint64_t = 0x%%lx, nn::applet::AppletResourceUserId = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10));
				resp->error_code = OpenIndirectLayer(req->GetData<uint64_t>(8), req->GetData<nn::applet::AppletResourceUserId>(0x10), req->pid, *resp->GetDataPointer<int64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 2401: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::CloseIndirectLayer: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = CloseIndirectLayer(req->GetData<uint64_t>(8));
				return 0;
			}
			case 2402: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::FlipIndirectLayer: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = FlipIndirectLayer(req->GetData<uint64_t>(8));
				return 0;
			}
			case 3000: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				nn::vi::DisplayModeInfo* temp3 = (nn::vi::DisplayModeInfo *) new uint8_t[temp2];
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::ListDisplayModes: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = ListDisplayModes(req->GetData<uint64_t>(8), *resp->GetDataPointer<int64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 3001: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint32_t* temp3 = (uint32_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::ListDisplayRgbRanges: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = ListDisplayRgbRanges(req->GetData<uint64_t>(8), *resp->GetDataPointer<int64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 3002: {
				resp->GenBuf(0, 0, 8);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(6, 0, temp2);
				uint32_t* temp3 = (uint32_t *) new uint8_t[temp2];
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::ListDisplayContentTypes: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = ListDisplayContentTypes(req->GetData<uint64_t>(8), *resp->GetDataPointer<int64_t *>(8), temp3, temp2);
				ARMv8::WriteBytes(temp1, (uint8_t *) temp3, temp2);
				delete[] (uint8_t *)temp3;
				return 0;
			}
			case 3200: {
				resp->GenBuf(0, 0, 16);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::GetDisplayMode: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetDisplayMode(req->GetData<uint64_t>(8), *resp->GetDataPointer<nn::vi::DisplayModeInfo *>(8));
				return 0;
			}
			case 3201: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::SetDisplayMode: uint64_t = 0x%%lx, nn::vi::DisplayModeInfo = %s\n", req->GetData<uint64_t>(8), read_string(req->GetDataPointer<uint8_t *>(0x10), 0x10).c_str());
				resp->error_code = SetDisplayMode(req->GetData<uint64_t>(8), req->GetData<nn::vi::DisplayModeInfo>(0x10));
				return 0;
			}
			case 3202: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::GetDisplayUnderscan: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetDisplayUnderscan(req->GetData<uint64_t>(8), *resp->GetDataPointer<int64_t *>(8));
				return 0;
			}
			case 3203: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::SetDisplayUnderscan: uint64_t = 0x%%lx, int64_t = 0x%%lx\n", req->GetData<uint64_t>(8), req->GetData<int64_t>(0x10));
				resp->error_code = SetDisplayUnderscan(req->GetData<uint64_t>(8), req->GetData<int64_t>(0x10));
				return 0;
			}
			case 3204: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::GetDisplayContentType: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetDisplayContentType(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 3205: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::SetDisplayContentType: uint32_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = SetDisplayContentType(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 3206: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::GetDisplayRgbRange: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetDisplayRgbRange(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 3207: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::SetDisplayRgbRange: uint32_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = SetDisplayRgbRange(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 3208: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::GetDisplayCmuMode: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetDisplayCmuMode(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 3209: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::SetDisplayCmuMode: uint32_t = 0x%x, uint64_t = 0x%%lx\n", req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = SetDisplayCmuMode(req->GetData<uint32_t>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 3210: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::GetDisplayContrastRatio: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetDisplayContrastRatio(req->GetData<uint64_t>(8), *resp->GetDataPointer<float *>(8));
				return 0;
			}
			case 3211: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::SetDisplayContrastRatio: float = %f, uint64_t = 0x%%lx\n", (double) req->GetData<float>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = SetDisplayContrastRatio(req->GetData<float>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 3214: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::GetDisplayGamma: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetDisplayGamma(req->GetData<uint64_t>(8), *resp->GetDataPointer<float *>(8));
				return 0;
			}
			case 3215: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::SetDisplayGamma: float = %f, uint64_t = 0x%%lx\n", (double) req->GetData<float>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = SetDisplayGamma(req->GetData<float>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			case 3216: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::GetDisplayCmuLuma: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = GetDisplayCmuLuma(req->GetData<uint64_t>(8), *resp->GetDataPointer<float *>(8));
				return 0;
			}
			case 3217: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::visrv::sf::ISystemDisplayService::SetDisplayCmuLuma: float = %f, uint64_t = 0x%%lx\n", (double) req->GetData<float>(8), req->GetData<uint64_t>(0x10));
				resp->error_code = SetDisplayCmuLuma(req->GetData<float>(8), req->GetData<uint64_t>(0x10));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::visrv::sf::ISystemDisplayService", req->cmd_id);
			}
		}
		uint32_t CloseIndirectLayer(uint64_t _0);
		uint32_t CreateStrayLayer(uint32_t _0, uint64_t _1, uint64_t& _2, int64_t& _3, uint8_t *& _4, unsigned int _4_size);
		uint32_t FlipIndirectLayer(uint64_t _0);
		uint32_t GetDisplayCmuLuma(uint64_t _0, float& _1);
		uint32_t GetDisplayCmuMode(uint64_t _0, uint32_t& _1);
		uint32_t GetDisplayContentType(uint64_t _0, uint32_t& _1);
		uint32_t GetDisplayContrastRatio(uint64_t _0, float& _1);
		uint32_t GetDisplayGamma(uint64_t _0, float& _1);
		uint32_t GetDisplayLogicalResolution(uint64_t _0, int32_t& _1, int32_t& _2);
		uint32_t GetDisplayMode(uint64_t _0, nn::vi::DisplayModeInfo& _1);
		uint32_t GetDisplayRgbRange(uint64_t _0, uint32_t& _1);
		uint32_t GetDisplayUnderscan(uint64_t _0, int64_t& _1);
		uint32_t GetLayerZ(uint64_t _0, int64_t& _1);
		uint32_t GetZOrderCountMax(uint64_t _0, int64_t& _1);
		uint32_t GetZOrderCountMin(uint64_t _0, int64_t& _1);
		uint32_t ListDisplayContentTypes(uint64_t _0, int64_t& _1, uint32_t *& _2, unsigned int _2_size);
		uint32_t ListDisplayModes(uint64_t _0, int64_t& _1, nn::vi::DisplayModeInfo *& _2, unsigned int _2_size);
		uint32_t ListDisplayRgbRanges(uint64_t _0, int64_t& _1, uint32_t *& _2, unsigned int _2_size);
		uint32_t OpenIndirectLayer(uint64_t _0, nn::applet::AppletResourceUserId _1, uint64_t _2, int64_t& _3, uint8_t *& _4, unsigned int _4_size);
		uint32_t SetDisplayCmuLuma(float _0, uint64_t _1);
		uint32_t SetDisplayCmuMode(uint32_t _0, uint64_t _1);
		uint32_t SetDisplayContentType(uint32_t _0, uint64_t _1);
		uint32_t SetDisplayContrastRatio(float _0, uint64_t _1);
		uint32_t SetDisplayGamma(float _0, uint64_t _1);
		uint32_t SetDisplayMagnification(int32_t _0, int32_t _1, int32_t _2, int32_t _3, uint64_t _4);
		uint32_t SetDisplayMode(uint64_t _0, nn::vi::DisplayModeInfo _1);
		uint32_t SetDisplayRgbRange(uint32_t _0, uint64_t _1);
		uint32_t SetDisplayUnderscan(uint64_t _0, int64_t _1);
		uint32_t SetLayerAlpha(float _0, uint64_t _1);
		uint32_t SetLayerPosition(float _0, float _1, uint64_t _2);
		uint32_t SetLayerSize(uint64_t _0, int64_t _1, int64_t _2);
		uint32_t SetLayerVisibility(bool _0, uint64_t _1);
		uint32_t SetLayerZ(uint64_t _0, int64_t _1);
	};
	class ISystemRootService : public IpcService {
	public:
		ISystemRootService() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 1: {
				resp->GenBuf(1, 0, 0);
				nn::visrv::sf::IApplicationDisplayService* temp1;
				ns_print("IPC message to nn::visrv::sf::ISystemRootService::GetDisplayService: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = GetDisplayService(req->GetData<uint32_t>(8), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(1, 0, 0);
				nn::visrv::sf::IApplicationDisplayService* temp1;
				ns_print("IPC message to nn::visrv::sf::ISystemRootService::GetDisplayServiceWithProxyNameExchange: nn::vi::ProxyName = 0x%%lx, uint32_t = 0x%x\n", req->GetData<nn::vi::ProxyName>(8), req->GetData<uint32_t>(0x10));
				resp->error_code = GetDisplayServiceWithProxyNameExchange(req->GetData<nn::vi::ProxyName>(8), req->GetData<uint32_t>(0x10), temp1);
				if(temp1 != nullptr)
					resp->SetMove(0, NewHandle((IpcService *)temp1));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::visrv::sf::ISystemRootService", req->cmd_id);
			}
		}
		uint32_t GetDisplayService(uint32_t _0, nn::visrv::sf::IApplicationDisplayService*& _1);
		uint32_t GetDisplayServiceWithProxyNameExchange(nn::vi::ProxyName _0, uint32_t _1, nn::visrv::sf::IApplicationDisplayService*& _2);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::visrv::sf::IApplicationDisplayService::CloseDisplay(uint64_t _0) {
	ns_print("Stub implementation for nn::visrv::sf::IApplicationDisplayService::CloseDisplay\n");
	return 0;
}
uint32_t nn::visrv::sf::IApplicationDisplayService::CloseLayer(uint64_t _0) {
	ns_print("Stub implementation for nn::visrv::sf::IApplicationDisplayService::CloseLayer\n");
	return 0;
}
uint32_t nn::visrv::sf::IApplicationDisplayService::CreateStrayLayer(uint32_t _0, uint64_t _1, uint64_t& _2, int64_t& _3, uint8_t *& _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::visrv::sf::IApplicationDisplayService::CreateStrayLayer\n");
	return 0;
}
uint32_t nn::visrv::sf::IApplicationDisplayService::DestroyStrayLayer(uint64_t _0) {
	ns_print("Stub implementation for nn::visrv::sf::IApplicationDisplayService::DestroyStrayLayer\n");
	return 0;
}
uint32_t nn::visrv::sf::IApplicationDisplayService::GetDisplayResolution(uint64_t _0, int64_t& _1, int64_t& _2) {
	ns_print("Stub implementation for nn::visrv::sf::IApplicationDisplayService::GetDisplayResolution\n");
	return 0;
}
uint32_t nn::visrv::sf::IApplicationDisplayService::GetDisplayVsyncEvent(uint64_t _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::visrv::sf::IApplicationDisplayService::GetDisplayVsyncEvent\n");
	return 0;
}
uint32_t nn::visrv::sf::IApplicationDisplayService::GetDisplayVsyncEventForDebug(uint64_t _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::visrv::sf::IApplicationDisplayService::GetDisplayVsyncEventForDebug\n");
	return 0;
}
uint32_t nn::visrv::sf::IApplicationDisplayService::GetIndirectDisplayTransactionService(nns::hosbinder::IHOSBinderDriver*& _0) {
	ns_print("Stub implementation for nn::visrv::sf::IApplicationDisplayService::GetIndirectDisplayTransactionService\n");
	return 0;
}
uint32_t nn::visrv::sf::IApplicationDisplayService::GetIndirectLayerImageCropMap(float _0, float _1, float _2, float _3, int64_t _4, int64_t _5, uint64_t _6, nn::applet::AppletResourceUserId _7, uint64_t _8, int64_t& _9, int64_t& _10, uint8_t *& _11, unsigned int _11_size) {
	ns_print("Stub implementation for nn::visrv::sf::IApplicationDisplayService::GetIndirectLayerImageCropMap\n");
	return 0;
}
uint32_t nn::visrv::sf::IApplicationDisplayService::GetIndirectLayerImageMap(int64_t _0, int64_t _1, uint64_t _2, nn::applet::AppletResourceUserId _3, uint64_t _4, int64_t& _5, int64_t& _6, uint8_t *& _7, unsigned int _7_size) {
	ns_print("Stub implementation for nn::visrv::sf::IApplicationDisplayService::GetIndirectLayerImageMap\n");
	return 0;
}
uint32_t nn::visrv::sf::IApplicationDisplayService::GetIndirectLayerImageRequiredMemoryInfo(int64_t _0, int64_t _1, int64_t& _2, int64_t& _3) {
	ns_print("Stub implementation for nn::visrv::sf::IApplicationDisplayService::GetIndirectLayerImageRequiredMemoryInfo\n");
	return 0;
}
uint32_t nn::visrv::sf::IApplicationDisplayService::GetManagerDisplayService(nn::visrv::sf::IManagerDisplayService*& _0) {
	ns_print("Stub implementation for nn::visrv::sf::IApplicationDisplayService::GetManagerDisplayService\n");
	return 0;
}
uint32_t nn::visrv::sf::IApplicationDisplayService::GetRelayService(nns::hosbinder::IHOSBinderDriver*& _0) {
	ns_print("Stub implementation for nn::visrv::sf::IApplicationDisplayService::GetRelayService\n");
	return 0;
}
uint32_t nn::visrv::sf::IApplicationDisplayService::GetSystemDisplayService(nn::visrv::sf::ISystemDisplayService*& _0) {
	ns_print("Stub implementation for nn::visrv::sf::IApplicationDisplayService::GetSystemDisplayService\n");
	return 0;
}
uint32_t nn::visrv::sf::IApplicationDisplayService::ListDisplays(int64_t& _0, nn::vi::DisplayInfo *& _1, unsigned int _1_size) {
	ns_print("Stub implementation for nn::visrv::sf::IApplicationDisplayService::ListDisplays\n");
	return 0;
}
uint32_t nn::visrv::sf::IApplicationDisplayService::OpenDefaultDisplay(uint64_t& _0) {
	ns_print("Stub implementation for nn::visrv::sf::IApplicationDisplayService::OpenDefaultDisplay\n");
	return 0;
}
uint32_t nn::visrv::sf::IApplicationDisplayService::OpenDisplay(nn::vi::DisplayName _0, uint64_t& _1) {
	ns_print("Stub implementation for nn::visrv::sf::IApplicationDisplayService::OpenDisplay\n");
	return 0;
}
uint32_t nn::visrv::sf::IApplicationDisplayService::OpenLayer(nn::vi::DisplayName _0, uint64_t _1, nn::applet::AppletResourceUserId _2, uint64_t _3, int64_t& _4, uint8_t *& _5, unsigned int _5_size) {
	ns_print("Stub implementation for nn::visrv::sf::IApplicationDisplayService::OpenLayer\n");
	return 0;
}
uint32_t nn::visrv::sf::IApplicationDisplayService::SetDisplayEnabled(bool _0, uint64_t _1) {
	ns_print("Stub implementation for nn::visrv::sf::IApplicationDisplayService::SetDisplayEnabled\n");
	return 0;
}
uint32_t nn::visrv::sf::IApplicationDisplayService::SetLayerScalingMode(uint32_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::visrv::sf::IApplicationDisplayService::SetLayerScalingMode\n");
	return 0;
}
uint32_t nn::visrv::sf::IApplicationRootService::GetDisplayService(uint32_t _0, nn::visrv::sf::IApplicationDisplayService*& _1) {
	ns_print("Stub implementation for nn::visrv::sf::IApplicationRootService::GetDisplayService\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::AcquireLayerTexturePresentingEvent(uint64_t _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::AcquireLayerTexturePresentingEvent\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::AddToLayerStack(uint32_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::AddToLayerStack\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::CreateIndirectConsumerEndPoint(uint64_t _0, nn::applet::AppletResourceUserId _1, uint64_t& _2) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::CreateIndirectConsumerEndPoint\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::CreateIndirectLayer(uint64_t& _0) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::CreateIndirectLayer\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::CreateIndirectProducerEndPoint(uint64_t _0, nn::applet::AppletResourceUserId _1, uint64_t& _2) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::CreateIndirectProducerEndPoint\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::CreateManagedLayer(uint32_t _0, uint64_t _1, nn::applet::AppletResourceUserId _2, uint64_t& _3) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::CreateManagedLayer\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::DestroyIndirectConsumerEndPoint(uint64_t _0) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::DestroyIndirectConsumerEndPoint\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::DestroyIndirectLayer(uint64_t _0) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::DestroyIndirectLayer\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::DestroyIndirectProducerEndPoint(uint64_t _0) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::DestroyIndirectProducerEndPoint\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::DestroyManagedLayer(uint64_t _0) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::DestroyManagedLayer\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::GetDisplayHotplugEvent(uint64_t _0, IpcService*& _1) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::GetDisplayHotplugEvent\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::GetDisplayHotplugState(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::GetDisplayHotplugState\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::GetDisplayResolution(uint64_t _0, int64_t& _1, int64_t& _2) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::GetDisplayResolution\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::ReleaseLayerTexturePresentingEvent(uint64_t _0) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::ReleaseLayerTexturePresentingEvent\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::RemoveFromLayerStack(uint32_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::RemoveFromLayerStack\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::SetConductorLayer(bool _0, uint64_t _1) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::SetConductorLayer\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::SetContentVisibility(bool _0) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::SetContentVisibility\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::SetDisplayAlpha(float _0, uint64_t _1) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::SetDisplayAlpha\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::SetDisplayLayerStack(uint32_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::SetDisplayLayerStack\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::SetDisplayPowerState(uint32_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::SetDisplayPowerState\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::SetIndirectProducerFlipOffset(uint64_t _0, uint64_t _1, nn::TimeSpan _2) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::SetIndirectProducerFlipOffset\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerDisplayService::SetLayerVisibility(bool _0, uint64_t _1) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerDisplayService::SetLayerVisibility\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerRootService::GetDisplayService(uint32_t _0, nn::visrv::sf::IApplicationDisplayService*& _1) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerRootService::GetDisplayService\n");
	return 0;
}
uint32_t nn::visrv::sf::IManagerRootService::GetDisplayServiceWithProxyNameExchange(nn::vi::ProxyName _0, uint32_t _1, nn::visrv::sf::IApplicationDisplayService*& _2) {
	ns_print("Stub implementation for nn::visrv::sf::IManagerRootService::GetDisplayServiceWithProxyNameExchange\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::CloseIndirectLayer(uint64_t _0) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::CloseIndirectLayer\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::CreateStrayLayer(uint32_t _0, uint64_t _1, uint64_t& _2, int64_t& _3, uint8_t *& _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::CreateStrayLayer\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::FlipIndirectLayer(uint64_t _0) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::FlipIndirectLayer\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::GetDisplayCmuLuma(uint64_t _0, float& _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::GetDisplayCmuLuma\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::GetDisplayCmuMode(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::GetDisplayCmuMode\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::GetDisplayContentType(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::GetDisplayContentType\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::GetDisplayContrastRatio(uint64_t _0, float& _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::GetDisplayContrastRatio\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::GetDisplayGamma(uint64_t _0, float& _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::GetDisplayGamma\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::GetDisplayLogicalResolution(uint64_t _0, int32_t& _1, int32_t& _2) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::GetDisplayLogicalResolution\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::GetDisplayMode(uint64_t _0, nn::vi::DisplayModeInfo& _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::GetDisplayMode\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::GetDisplayRgbRange(uint64_t _0, uint32_t& _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::GetDisplayRgbRange\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::GetDisplayUnderscan(uint64_t _0, int64_t& _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::GetDisplayUnderscan\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::GetLayerZ(uint64_t _0, int64_t& _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::GetLayerZ\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::GetZOrderCountMax(uint64_t _0, int64_t& _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::GetZOrderCountMax\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::GetZOrderCountMin(uint64_t _0, int64_t& _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::GetZOrderCountMin\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::ListDisplayContentTypes(uint64_t _0, int64_t& _1, uint32_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::ListDisplayContentTypes\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::ListDisplayModes(uint64_t _0, int64_t& _1, nn::vi::DisplayModeInfo *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::ListDisplayModes\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::ListDisplayRgbRanges(uint64_t _0, int64_t& _1, uint32_t *& _2, unsigned int _2_size) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::ListDisplayRgbRanges\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::OpenIndirectLayer(uint64_t _0, nn::applet::AppletResourceUserId _1, uint64_t _2, int64_t& _3, uint8_t *& _4, unsigned int _4_size) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::OpenIndirectLayer\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::SetDisplayCmuLuma(float _0, uint64_t _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::SetDisplayCmuLuma\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::SetDisplayCmuMode(uint32_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::SetDisplayCmuMode\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::SetDisplayContentType(uint32_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::SetDisplayContentType\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::SetDisplayContrastRatio(float _0, uint64_t _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::SetDisplayContrastRatio\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::SetDisplayGamma(float _0, uint64_t _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::SetDisplayGamma\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::SetDisplayMagnification(int32_t _0, int32_t _1, int32_t _2, int32_t _3, uint64_t _4) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::SetDisplayMagnification\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::SetDisplayMode(uint64_t _0, nn::vi::DisplayModeInfo _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::SetDisplayMode\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::SetDisplayRgbRange(uint32_t _0, uint64_t _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::SetDisplayRgbRange\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::SetDisplayUnderscan(uint64_t _0, int64_t _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::SetDisplayUnderscan\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::SetLayerAlpha(float _0, uint64_t _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::SetLayerAlpha\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::SetLayerPosition(float _0, float _1, uint64_t _2) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::SetLayerPosition\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::SetLayerSize(uint64_t _0, int64_t _1, int64_t _2) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::SetLayerSize\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::SetLayerVisibility(bool _0, uint64_t _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::SetLayerVisibility\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemDisplayService::SetLayerZ(uint64_t _0, int64_t _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemDisplayService::SetLayerZ\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemRootService::GetDisplayService(uint32_t _0, nn::visrv::sf::IApplicationDisplayService*& _1) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemRootService::GetDisplayService\n");
	return 0;
}
uint32_t nn::visrv::sf::ISystemRootService::GetDisplayServiceWithProxyNameExchange(nn::vi::ProxyName _0, uint32_t _1, nn::visrv::sf::IApplicationDisplayService*& _2) {
	ns_print("Stub implementation for nn::visrv::sf::ISystemRootService::GetDisplayServiceWithProxyNameExchange\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::wlan::detail {
	class IInfraManager : public IpcService {
	public:
		IInfraManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown10\n");
				resp->error_code = Unknown10(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown11\n");
				resp->error_code = Unknown11();
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown12\n");
				resp->error_code = Unknown12(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown13: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown13(req->GetData<uint32_t>(8));
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown14\n");
				resp->error_code = Unknown14();
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown15\n");
				resp->error_code = Unknown15();
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown16\n");
				resp->error_code = Unknown16();
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown17\n");
				resp->error_code = Unknown17();
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown18\n");
				resp->error_code = Unknown18(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown19\n");
				resp->error_code = Unknown19();
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown20\n");
				resp->error_code = Unknown20();
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown21\n");
				resp->error_code = Unknown21(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown22: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown22(req->GetData<uint32_t>(8));
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown23: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown23(req->GetData<uint32_t>(8));
				return 0;
			}
			case 24: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown24\n");
				resp->error_code = Unknown24();
				return 0;
			}
			case 25: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::IInfraManager::Unknown25\n");
				resp->error_code = Unknown25();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::wlan::detail::IInfraManager", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown10(uint32_t& _0);
		uint32_t Unknown11();
		uint32_t Unknown12(uint32_t& _0);
		uint32_t Unknown13(uint32_t _0);
		uint32_t Unknown14();
		uint32_t Unknown15();
		uint32_t Unknown16();
		uint32_t Unknown17();
		uint32_t Unknown18(uint32_t& _0);
		uint32_t Unknown19();
		uint32_t Unknown2();
		uint32_t Unknown20();
		uint32_t Unknown21(uint32_t& _0);
		uint32_t Unknown22(uint32_t _0);
		uint32_t Unknown23(uint32_t _0);
		uint32_t Unknown24();
		uint32_t Unknown25();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6();
		uint32_t Unknown7();
		uint32_t Unknown8();
		uint32_t Unknown9();
	};
	class ILocalGetActionFrame : public IpcService {
	public:
		ILocalGetActionFrame() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalGetActionFrame::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::wlan::detail::ILocalGetActionFrame", req->cmd_id);
			}
		}
		uint32_t Unknown0();
	};
	class ILocalGetFrame : public IpcService {
	public:
		ILocalGetFrame() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalGetFrame::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::wlan::detail::ILocalGetFrame", req->cmd_id);
			}
		}
		uint32_t Unknown0();
	};
	class ILocalManager : public IpcService {
	public:
		ILocalManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown11\n");
				resp->error_code = Unknown11();
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown12\n");
				resp->error_code = Unknown12();
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown13\n");
				resp->error_code = Unknown13();
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown14\n");
				resp->error_code = Unknown14();
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown15\n");
				resp->error_code = Unknown15();
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown16: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown16(req->GetData<uint32_t>(8));
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown17\n");
				resp->error_code = Unknown17();
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown18\n");
				resp->error_code = Unknown18();
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown19\n");
				resp->error_code = Unknown19();
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown20\n");
				resp->error_code = Unknown20(temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 21: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown21\n");
				resp->error_code = Unknown21();
				return 0;
			}
			case 22: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown22\n");
				resp->error_code = Unknown22(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 23: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown23\n");
				resp->error_code = Unknown23();
				return 0;
			}
			case 24: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown24\n");
				resp->error_code = Unknown24();
				return 0;
			}
			case 25: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown25: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown25(req->GetData<uint32_t>(8));
				return 0;
			}
			case 26: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown26\n");
				resp->error_code = Unknown26();
				return 0;
			}
			case 27: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown27: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown27(req->GetData<uint32_t>(8));
				return 0;
			}
			case 28: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown28\n");
				resp->error_code = Unknown28();
				return 0;
			}
			case 29: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown29: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown29(req->GetData<uint32_t>(8));
				return 0;
			}
			case 30: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown30\n");
				resp->error_code = Unknown30();
				return 0;
			}
			case 31: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown31\n");
				resp->error_code = Unknown31();
				return 0;
			}
			case 32: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown32\n");
				resp->error_code = Unknown32();
				return 0;
			}
			case 33: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown33\n");
				resp->error_code = Unknown33();
				return 0;
			}
			case 34: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown34\n");
				resp->error_code = Unknown34();
				return 0;
			}
			case 35: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown35\n");
				resp->error_code = Unknown35();
				return 0;
			}
			case 36: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown36\n");
				resp->error_code = Unknown36();
				return 0;
			}
			case 37: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown37\n");
				resp->error_code = Unknown37();
				return 0;
			}
			case 38: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown38\n");
				resp->error_code = Unknown38();
				return 0;
			}
			case 39: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown39: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown39(req->GetData<uint32_t>(8));
				return 0;
			}
			case 40: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown40\n");
				resp->error_code = Unknown40();
				return 0;
			}
			case 41: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown41\n");
				resp->error_code = Unknown41();
				return 0;
			}
			case 42: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown42: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown42(req->GetData<uint32_t>(8));
				return 0;
			}
			case 43: {
				resp->GenBuf(0, 0, 4);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown43\n");
				resp->error_code = Unknown43(*resp->GetDataPointer<uint32_t *>(8));
				return 0;
			}
			case 44: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ILocalManager::Unknown44: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown44(req->GetData<uint32_t>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::wlan::detail::ILocalManager", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown10();
		uint32_t Unknown11();
		uint32_t Unknown12();
		uint32_t Unknown13();
		uint32_t Unknown14();
		uint32_t Unknown15();
		uint32_t Unknown16(uint32_t _0);
		uint32_t Unknown17();
		uint32_t Unknown18();
		uint32_t Unknown19();
		uint32_t Unknown2();
		uint32_t Unknown20(IpcService*& _0);
		uint32_t Unknown21();
		uint32_t Unknown22(uint32_t& _0);
		uint32_t Unknown23();
		uint32_t Unknown24();
		uint32_t Unknown25(uint32_t _0);
		uint32_t Unknown26();
		uint32_t Unknown27(uint32_t _0);
		uint32_t Unknown28();
		uint32_t Unknown29(uint32_t _0);
		uint32_t Unknown3();
		uint32_t Unknown30();
		uint32_t Unknown31();
		uint32_t Unknown32();
		uint32_t Unknown33();
		uint32_t Unknown34();
		uint32_t Unknown35();
		uint32_t Unknown36();
		uint32_t Unknown37();
		uint32_t Unknown38();
		uint32_t Unknown39(uint32_t _0);
		uint32_t Unknown4();
		uint32_t Unknown40();
		uint32_t Unknown41();
		uint32_t Unknown42(uint32_t _0);
		uint32_t Unknown43(uint32_t& _0);
		uint32_t Unknown44(uint32_t _0);
		uint32_t Unknown5();
		uint32_t Unknown6();
		uint32_t Unknown7();
		uint32_t Unknown8();
		uint32_t Unknown9();
	};
	class ISocketGetFrame : public IpcService {
	public:
		ISocketGetFrame() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ISocketGetFrame::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::wlan::detail::ISocketGetFrame", req->cmd_id);
			}
		}
		uint32_t Unknown0();
	};
	class ISocketManager : public IpcService {
	public:
		ISocketManager() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				ns_print("IPC message to nn::wlan::detail::ISocketManager::Unknown0: uint8_t *= buffer<0x%lx>\n", temp2);
				resp->error_code = Unknown0(temp3, temp2);
				delete[] (uint8_t *) temp3;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ISocketManager::Unknown1: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown1(req->GetData<uint32_t>(8));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ISocketManager::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ISocketManager::Unknown3: uint32_t = 0x%x\n", req->GetData<uint32_t>(8));
				resp->error_code = Unknown3(req->GetData<uint32_t>(8));
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ISocketManager::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ISocketManager::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ISocketManager::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ISocketManager::Unknown7: uint8_t = 0x%x\n", req->GetData<uint8_t>(8));
				resp->error_code = Unknown7(req->GetData<uint8_t>(8));
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::wlan::detail::ISocketManager::Unknown8\n");
				resp->error_code = Unknown8(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ISocketManager::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ISocketManager::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::wlan::detail::ISocketManager::Unknown11\n");
				resp->error_code = Unknown11();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::wlan::detail::ISocketManager", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint8_t * _0, unsigned int _0_size);
		uint32_t Unknown1(uint32_t _0);
		uint32_t Unknown10();
		uint32_t Unknown11();
		uint32_t Unknown2();
		uint32_t Unknown3(uint32_t _0);
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6();
		uint32_t Unknown7(uint8_t _0);
		uint32_t Unknown8(uint64_t& _0);
		uint32_t Unknown9();
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::wlan::detail::IInfraManager::Unknown0() {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown0\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown1() {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown1\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown10(uint32_t& _0) {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown10\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown11() {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown11\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown12(uint32_t& _0) {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown12\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown13(uint32_t _0) {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown13\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown14() {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown14\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown15() {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown15\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown16() {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown16\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown17() {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown17\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown18(uint32_t& _0) {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown18\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown19() {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown19\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown2() {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown2\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown20() {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown20\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown21(uint32_t& _0) {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown21\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown22(uint32_t _0) {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown22\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown23(uint32_t _0) {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown23\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown24() {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown24\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown25() {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown25\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown3() {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown3\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown4() {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown4\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown5() {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown5\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown6() {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown6\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown7() {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown7\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown8() {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown8\n");
	return 0;
}
uint32_t nn::wlan::detail::IInfraManager::Unknown9() {
	ns_print("Stub implementation for nn::wlan::detail::IInfraManager::Unknown9\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalGetActionFrame::Unknown0() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalGetActionFrame::Unknown0\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalGetFrame::Unknown0() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalGetFrame::Unknown0\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown0() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown0\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown1() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown1\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown10() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown10\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown11() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown11\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown12() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown12\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown13() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown13\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown14() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown14\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown15() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown15\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown16(uint32_t _0) {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown16\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown17() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown17\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown18() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown18\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown19() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown19\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown2() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown2\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown20(IpcService*& _0) {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown20\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown21() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown21\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown22(uint32_t& _0) {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown22\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown23() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown23\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown24() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown24\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown25(uint32_t _0) {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown25\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown26() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown26\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown27(uint32_t _0) {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown27\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown28() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown28\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown29(uint32_t _0) {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown29\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown3() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown3\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown30() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown30\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown31() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown31\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown32() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown32\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown33() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown33\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown34() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown34\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown35() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown35\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown36() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown36\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown37() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown37\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown38() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown38\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown39(uint32_t _0) {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown39\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown4() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown4\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown40() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown40\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown41() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown41\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown42(uint32_t _0) {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown42\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown43(uint32_t& _0) {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown43\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown44(uint32_t _0) {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown44\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown5() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown5\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown6() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown6\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown7() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown7\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown8() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown8\n");
	return 0;
}
uint32_t nn::wlan::detail::ILocalManager::Unknown9() {
	ns_print("Stub implementation for nn::wlan::detail::ILocalManager::Unknown9\n");
	return 0;
}
uint32_t nn::wlan::detail::ISocketGetFrame::Unknown0() {
	ns_print("Stub implementation for nn::wlan::detail::ISocketGetFrame::Unknown0\n");
	return 0;
}
uint32_t nn::wlan::detail::ISocketManager::Unknown0(uint8_t * _0, unsigned int _0_size) {
	ns_print("Stub implementation for nn::wlan::detail::ISocketManager::Unknown0\n");
	return 0;
}
uint32_t nn::wlan::detail::ISocketManager::Unknown1(uint32_t _0) {
	ns_print("Stub implementation for nn::wlan::detail::ISocketManager::Unknown1\n");
	return 0;
}
uint32_t nn::wlan::detail::ISocketManager::Unknown10() {
	ns_print("Stub implementation for nn::wlan::detail::ISocketManager::Unknown10\n");
	return 0;
}
uint32_t nn::wlan::detail::ISocketManager::Unknown11() {
	ns_print("Stub implementation for nn::wlan::detail::ISocketManager::Unknown11\n");
	return 0;
}
uint32_t nn::wlan::detail::ISocketManager::Unknown2() {
	ns_print("Stub implementation for nn::wlan::detail::ISocketManager::Unknown2\n");
	return 0;
}
uint32_t nn::wlan::detail::ISocketManager::Unknown3(uint32_t _0) {
	ns_print("Stub implementation for nn::wlan::detail::ISocketManager::Unknown3\n");
	return 0;
}
uint32_t nn::wlan::detail::ISocketManager::Unknown4() {
	ns_print("Stub implementation for nn::wlan::detail::ISocketManager::Unknown4\n");
	return 0;
}
uint32_t nn::wlan::detail::ISocketManager::Unknown5() {
	ns_print("Stub implementation for nn::wlan::detail::ISocketManager::Unknown5\n");
	return 0;
}
uint32_t nn::wlan::detail::ISocketManager::Unknown6() {
	ns_print("Stub implementation for nn::wlan::detail::ISocketManager::Unknown6\n");
	return 0;
}
uint32_t nn::wlan::detail::ISocketManager::Unknown7(uint8_t _0) {
	ns_print("Stub implementation for nn::wlan::detail::ISocketManager::Unknown7\n");
	return 0;
}
uint32_t nn::wlan::detail::ISocketManager::Unknown8(uint64_t& _0) {
	ns_print("Stub implementation for nn::wlan::detail::ISocketManager::Unknown8\n");
	return 0;
}
uint32_t nn::wlan::detail::ISocketManager::Unknown9() {
	ns_print("Stub implementation for nn::wlan::detail::ISocketManager::Unknown9\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nn::xcd::detail {
	class ISystemServer : public IpcService {
	public:
		ISystemServer() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::xcd::detail::ISystemServer::Unknown0: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown0(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::xcd::detail::ISystemServer::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 1);
				ns_print("IPC message to nn::xcd::detail::ISystemServer::Unknown2: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown2(req->GetData<uint64_t>(8), *resp->GetDataPointer<uint8_t *>(8));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::xcd::detail::ISystemServer::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::xcd::detail::ISystemServer::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::xcd::detail::ISystemServer::Unknown5: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown5(req->GetData<uint64_t>(8));
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::xcd::detail::ISystemServer::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::xcd::detail::ISystemServer::Unknown11\n");
				resp->error_code = Unknown11();
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::xcd::detail::ISystemServer::Unknown12\n");
				resp->error_code = Unknown12();
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::xcd::detail::ISystemServer::Unknown13: uint64_t = 0x%%lx\n", req->GetData<uint64_t>(8));
				resp->error_code = Unknown13(req->GetData<uint64_t>(8));
				return 0;
			}
			case 14: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::xcd::detail::ISystemServer::Unknown14\n");
				resp->error_code = Unknown14();
				return 0;
			}
			case 15: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::xcd::detail::ISystemServer::Unknown15\n");
				resp->error_code = Unknown15();
				return 0;
			}
			case 16: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::xcd::detail::ISystemServer::Unknown16\n");
				resp->error_code = Unknown16();
				return 0;
			}
			case 17: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::xcd::detail::ISystemServer::Unknown17\n");
				resp->error_code = Unknown17();
				return 0;
			}
			case 18: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::xcd::detail::ISystemServer::Unknown18\n");
				resp->error_code = Unknown18();
				return 0;
			}
			case 19: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::xcd::detail::ISystemServer::Unknown19\n");
				resp->error_code = Unknown19();
				return 0;
			}
			case 20: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nn::xcd::detail::ISystemServer::Unknown20\n");
				resp->error_code = Unknown20();
				return 0;
			}
			case 101: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::xcd::detail::ISystemServer::Unknown101\n");
				resp->error_code = Unknown101(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			case 102: {
				resp->GenBuf(0, 0, 8);
				ns_print("IPC message to nn::xcd::detail::ISystemServer::Unknown102\n");
				resp->error_code = Unknown102(*resp->GetDataPointer<uint64_t *>(8));
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nn::xcd::detail::ISystemServer", req->cmd_id);
			}
		}
		uint32_t Unknown0(uint64_t _0, uint8_t& _1);
		uint32_t Unknown1();
		uint32_t Unknown10();
		uint32_t Unknown101(uint64_t& _0);
		uint32_t Unknown102(uint64_t& _0);
		uint32_t Unknown11();
		uint32_t Unknown12();
		uint32_t Unknown13(uint64_t _0);
		uint32_t Unknown14();
		uint32_t Unknown15();
		uint32_t Unknown16();
		uint32_t Unknown17();
		uint32_t Unknown18();
		uint32_t Unknown19();
		uint32_t Unknown2(uint64_t _0, uint8_t& _1);
		uint32_t Unknown20();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5(uint64_t _0);
	};
}
#ifdef DEFINE_STUBS
uint32_t nn::xcd::detail::ISystemServer::Unknown0(uint64_t _0, uint8_t& _1) {
	ns_print("Stub implementation for nn::xcd::detail::ISystemServer::Unknown0\n");
	return 0;
}
uint32_t nn::xcd::detail::ISystemServer::Unknown1() {
	ns_print("Stub implementation for nn::xcd::detail::ISystemServer::Unknown1\n");
	return 0;
}
uint32_t nn::xcd::detail::ISystemServer::Unknown10() {
	ns_print("Stub implementation for nn::xcd::detail::ISystemServer::Unknown10\n");
	return 0;
}
uint32_t nn::xcd::detail::ISystemServer::Unknown101(uint64_t& _0) {
	ns_print("Stub implementation for nn::xcd::detail::ISystemServer::Unknown101\n");
	return 0;
}
uint32_t nn::xcd::detail::ISystemServer::Unknown102(uint64_t& _0) {
	ns_print("Stub implementation for nn::xcd::detail::ISystemServer::Unknown102\n");
	return 0;
}
uint32_t nn::xcd::detail::ISystemServer::Unknown11() {
	ns_print("Stub implementation for nn::xcd::detail::ISystemServer::Unknown11\n");
	return 0;
}
uint32_t nn::xcd::detail::ISystemServer::Unknown12() {
	ns_print("Stub implementation for nn::xcd::detail::ISystemServer::Unknown12\n");
	return 0;
}
uint32_t nn::xcd::detail::ISystemServer::Unknown13(uint64_t _0) {
	ns_print("Stub implementation for nn::xcd::detail::ISystemServer::Unknown13\n");
	return 0;
}
uint32_t nn::xcd::detail::ISystemServer::Unknown14() {
	ns_print("Stub implementation for nn::xcd::detail::ISystemServer::Unknown14\n");
	return 0;
}
uint32_t nn::xcd::detail::ISystemServer::Unknown15() {
	ns_print("Stub implementation for nn::xcd::detail::ISystemServer::Unknown15\n");
	return 0;
}
uint32_t nn::xcd::detail::ISystemServer::Unknown16() {
	ns_print("Stub implementation for nn::xcd::detail::ISystemServer::Unknown16\n");
	return 0;
}
uint32_t nn::xcd::detail::ISystemServer::Unknown17() {
	ns_print("Stub implementation for nn::xcd::detail::ISystemServer::Unknown17\n");
	return 0;
}
uint32_t nn::xcd::detail::ISystemServer::Unknown18() {
	ns_print("Stub implementation for nn::xcd::detail::ISystemServer::Unknown18\n");
	return 0;
}
uint32_t nn::xcd::detail::ISystemServer::Unknown19() {
	ns_print("Stub implementation for nn::xcd::detail::ISystemServer::Unknown19\n");
	return 0;
}
uint32_t nn::xcd::detail::ISystemServer::Unknown2(uint64_t _0, uint8_t& _1) {
	ns_print("Stub implementation for nn::xcd::detail::ISystemServer::Unknown2\n");
	return 0;
}
uint32_t nn::xcd::detail::ISystemServer::Unknown20() {
	ns_print("Stub implementation for nn::xcd::detail::ISystemServer::Unknown20\n");
	return 0;
}
uint32_t nn::xcd::detail::ISystemServer::Unknown3() {
	ns_print("Stub implementation for nn::xcd::detail::ISystemServer::Unknown3\n");
	return 0;
}
uint32_t nn::xcd::detail::ISystemServer::Unknown4() {
	ns_print("Stub implementation for nn::xcd::detail::ISystemServer::Unknown4\n");
	return 0;
}
uint32_t nn::xcd::detail::ISystemServer::Unknown5(uint64_t _0) {
	ns_print("Stub implementation for nn::xcd::detail::ISystemServer::Unknown5\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nns::hosbinder {
	class IHOSBinderDriver : public IpcService {
	public:
		IHOSBinderDriver() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(5, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(6, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nns::hosbinder::IHOSBinderDriver::TransactParcel: int32_t = 0x%x, uint32_t = 0x%x, uint32_t = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<int32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), temp2);
				resp->error_code = TransactParcel(req->GetData<int32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nns::hosbinder::IHOSBinderDriver::AdjustRefcount: int32_t = 0x%x, int32_t = 0x%x, int32_t = 0x%x\n", req->GetData<int32_t>(8), req->GetData<int32_t>(0xc), req->GetData<int32_t>(0x10));
				resp->error_code = AdjustRefcount(req->GetData<int32_t>(8), req->GetData<int32_t>(0xc), req->GetData<int32_t>(0x10));
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 1, 0);
				IpcService *temp1;
				ns_print("IPC message to nns::hosbinder::IHOSBinderDriver::GetNativeHandle: int32_t = 0x%x, uint32_t = 0x%x\n", req->GetData<int32_t>(8), req->GetData<uint32_t>(0xc));
				resp->error_code = GetNativeHandle(req->GetData<int32_t>(8), req->GetData<uint32_t>(0xc), temp1);
				if(temp1 != nullptr)
					resp->SetCopy(0, NewHandle(temp1));
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				unsigned int temp2;
				auto temp1 = req->GetBuffer(0x21, 0, temp2);
				uint8_t* temp3 = (uint8_t *) new uint8_t[temp2];
				ARMv8::ReadBytes(temp1, (uint8_t *)temp3, temp2);
				unsigned int temp5;
				auto temp4 = req->GetBuffer(0x22, 0, temp5);
				uint8_t* temp6 = (uint8_t *) new uint8_t[temp5];
				ns_print("IPC message to nns::hosbinder::IHOSBinderDriver::TransactParcelAuto: int32_t = 0x%x, uint32_t = 0x%x, uint32_t = 0x%x, uint8_t *= buffer<0x%lx>\n", req->GetData<int32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), temp2);
				resp->error_code = TransactParcelAuto(req->GetData<int32_t>(8), req->GetData<uint32_t>(0xc), req->GetData<uint32_t>(0x10), temp3, temp2, temp6, temp5);
				delete[] (uint8_t *) temp3;
				ARMv8::WriteBytes(temp4, (uint8_t *) temp6, temp5);
				delete[] (uint8_t *)temp6;
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nns::hosbinder::IHOSBinderDriver", req->cmd_id);
			}
		}
		uint32_t AdjustRefcount(int32_t _0, int32_t _1, int32_t _2);
		uint32_t GetNativeHandle(int32_t _0, uint32_t _1, IpcService*& _2);
		uint32_t TransactParcel(int32_t _0, uint32_t _1, uint32_t _2, uint8_t * _3, unsigned int _3_size, uint8_t *& _4, unsigned int _4_size);
		uint32_t TransactParcelAuto(int32_t _0, uint32_t _1, uint32_t _2, uint8_t * _3, unsigned int _3_size, uint8_t *& _4, unsigned int _4_size);
	};
}
#ifdef DEFINE_STUBS
uint32_t nns::hosbinder::IHOSBinderDriver::AdjustRefcount(int32_t _0, int32_t _1, int32_t _2) {
	ns_print("Stub implementation for nns::hosbinder::IHOSBinderDriver::AdjustRefcount\n");
	return 0;
}
uint32_t nns::hosbinder::IHOSBinderDriver::GetNativeHandle(int32_t _0, uint32_t _1, IpcService*& _2) {
	ns_print("Stub implementation for nns::hosbinder::IHOSBinderDriver::GetNativeHandle\n");
	return 0;
}
uint32_t nns::hosbinder::IHOSBinderDriver::TransactParcel(int32_t _0, uint32_t _1, uint32_t _2, uint8_t * _3, unsigned int _3_size, uint8_t *& _4, unsigned int _4_size) {
	ns_print("Stub implementation for nns::hosbinder::IHOSBinderDriver::TransactParcel\n");
	return 0;
}
uint32_t nns::hosbinder::IHOSBinderDriver::TransactParcelAuto(int32_t _0, uint32_t _1, uint32_t _2, uint8_t * _3, unsigned int _3_size, uint8_t *& _4, unsigned int _4_size) {
	ns_print("Stub implementation for nns::hosbinder::IHOSBinderDriver::TransactParcelAuto\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nns::nvdrv {
	class INvDrvDebugFSServices : public IpcService {
	public:
		INvDrvDebugFSServices() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nns::nvdrv::INvDrvDebugFSServices::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nns::nvdrv::INvDrvDebugFSServices::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nns::nvdrv::INvDrvDebugFSServices::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nns::nvdrv::INvDrvDebugFSServices::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nns::nvdrv::INvDrvDebugFSServices::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nns::nvdrv::INvDrvDebugFSServices", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4();
	};
	class INvDrvServices : public IpcService {
	public:
		INvDrvServices() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nns::nvdrv::INvDrvServices::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nns::nvdrv::INvDrvServices::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nns::nvdrv::INvDrvServices::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nns::nvdrv::INvDrvServices::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nns::nvdrv::INvDrvServices::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nns::nvdrv::INvDrvServices::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nns::nvdrv::INvDrvServices::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nns::nvdrv::INvDrvServices::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			case 8: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nns::nvdrv::INvDrvServices::Unknown8\n");
				resp->error_code = Unknown8();
				return 0;
			}
			case 9: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nns::nvdrv::INvDrvServices::Unknown9\n");
				resp->error_code = Unknown9();
				return 0;
			}
			case 10: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nns::nvdrv::INvDrvServices::Unknown10\n");
				resp->error_code = Unknown10();
				return 0;
			}
			case 11: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nns::nvdrv::INvDrvServices::Unknown11\n");
				resp->error_code = Unknown11();
				return 0;
			}
			case 12: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nns::nvdrv::INvDrvServices::Unknown12\n");
				resp->error_code = Unknown12();
				return 0;
			}
			case 13: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nns::nvdrv::INvDrvServices::Unknown13\n");
				resp->error_code = Unknown13();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nns::nvdrv::INvDrvServices", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown10();
		uint32_t Unknown11();
		uint32_t Unknown12();
		uint32_t Unknown13();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6();
		uint32_t Unknown7();
		uint32_t Unknown8();
		uint32_t Unknown9();
	};
}
#ifdef DEFINE_STUBS
uint32_t nns::nvdrv::INvDrvDebugFSServices::Unknown0() {
	ns_print("Stub implementation for nns::nvdrv::INvDrvDebugFSServices::Unknown0\n");
	return 0;
}
uint32_t nns::nvdrv::INvDrvDebugFSServices::Unknown1() {
	ns_print("Stub implementation for nns::nvdrv::INvDrvDebugFSServices::Unknown1\n");
	return 0;
}
uint32_t nns::nvdrv::INvDrvDebugFSServices::Unknown2() {
	ns_print("Stub implementation for nns::nvdrv::INvDrvDebugFSServices::Unknown2\n");
	return 0;
}
uint32_t nns::nvdrv::INvDrvDebugFSServices::Unknown3() {
	ns_print("Stub implementation for nns::nvdrv::INvDrvDebugFSServices::Unknown3\n");
	return 0;
}
uint32_t nns::nvdrv::INvDrvDebugFSServices::Unknown4() {
	ns_print("Stub implementation for nns::nvdrv::INvDrvDebugFSServices::Unknown4\n");
	return 0;
}
uint32_t nns::nvdrv::INvDrvServices::Unknown0() {
	ns_print("Stub implementation for nns::nvdrv::INvDrvServices::Unknown0\n");
	return 0;
}
uint32_t nns::nvdrv::INvDrvServices::Unknown1() {
	ns_print("Stub implementation for nns::nvdrv::INvDrvServices::Unknown1\n");
	return 0;
}
uint32_t nns::nvdrv::INvDrvServices::Unknown10() {
	ns_print("Stub implementation for nns::nvdrv::INvDrvServices::Unknown10\n");
	return 0;
}
uint32_t nns::nvdrv::INvDrvServices::Unknown11() {
	ns_print("Stub implementation for nns::nvdrv::INvDrvServices::Unknown11\n");
	return 0;
}
uint32_t nns::nvdrv::INvDrvServices::Unknown12() {
	ns_print("Stub implementation for nns::nvdrv::INvDrvServices::Unknown12\n");
	return 0;
}
uint32_t nns::nvdrv::INvDrvServices::Unknown13() {
	ns_print("Stub implementation for nns::nvdrv::INvDrvServices::Unknown13\n");
	return 0;
}
uint32_t nns::nvdrv::INvDrvServices::Unknown2() {
	ns_print("Stub implementation for nns::nvdrv::INvDrvServices::Unknown2\n");
	return 0;
}
uint32_t nns::nvdrv::INvDrvServices::Unknown3() {
	ns_print("Stub implementation for nns::nvdrv::INvDrvServices::Unknown3\n");
	return 0;
}
uint32_t nns::nvdrv::INvDrvServices::Unknown4() {
	ns_print("Stub implementation for nns::nvdrv::INvDrvServices::Unknown4\n");
	return 0;
}
uint32_t nns::nvdrv::INvDrvServices::Unknown5() {
	ns_print("Stub implementation for nns::nvdrv::INvDrvServices::Unknown5\n");
	return 0;
}
uint32_t nns::nvdrv::INvDrvServices::Unknown6() {
	ns_print("Stub implementation for nns::nvdrv::INvDrvServices::Unknown6\n");
	return 0;
}
uint32_t nns::nvdrv::INvDrvServices::Unknown7() {
	ns_print("Stub implementation for nns::nvdrv::INvDrvServices::Unknown7\n");
	return 0;
}
uint32_t nns::nvdrv::INvDrvServices::Unknown8() {
	ns_print("Stub implementation for nns::nvdrv::INvDrvServices::Unknown8\n");
	return 0;
}
uint32_t nns::nvdrv::INvDrvServices::Unknown9() {
	ns_print("Stub implementation for nns::nvdrv::INvDrvServices::Unknown9\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nv::gemcontrol {
	class INvGemControl : public IpcService {
	public:
		INvGemControl() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nv::gemcontrol::INvGemControl::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nv::gemcontrol::INvGemControl::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nv::gemcontrol::INvGemControl::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			case 3: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nv::gemcontrol::INvGemControl::Unknown3\n");
				resp->error_code = Unknown3();
				return 0;
			}
			case 4: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nv::gemcontrol::INvGemControl::Unknown4\n");
				resp->error_code = Unknown4();
				return 0;
			}
			case 5: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nv::gemcontrol::INvGemControl::Unknown5\n");
				resp->error_code = Unknown5();
				return 0;
			}
			case 6: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nv::gemcontrol::INvGemControl::Unknown6\n");
				resp->error_code = Unknown6();
				return 0;
			}
			case 7: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nv::gemcontrol::INvGemControl::Unknown7\n");
				resp->error_code = Unknown7();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nv::gemcontrol::INvGemControl", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2();
		uint32_t Unknown3();
		uint32_t Unknown4();
		uint32_t Unknown5();
		uint32_t Unknown6();
		uint32_t Unknown7();
	};
}
#ifdef DEFINE_STUBS
uint32_t nv::gemcontrol::INvGemControl::Unknown0() {
	ns_print("Stub implementation for nv::gemcontrol::INvGemControl::Unknown0\n");
	return 0;
}
uint32_t nv::gemcontrol::INvGemControl::Unknown1() {
	ns_print("Stub implementation for nv::gemcontrol::INvGemControl::Unknown1\n");
	return 0;
}
uint32_t nv::gemcontrol::INvGemControl::Unknown2() {
	ns_print("Stub implementation for nv::gemcontrol::INvGemControl::Unknown2\n");
	return 0;
}
uint32_t nv::gemcontrol::INvGemControl::Unknown3() {
	ns_print("Stub implementation for nv::gemcontrol::INvGemControl::Unknown3\n");
	return 0;
}
uint32_t nv::gemcontrol::INvGemControl::Unknown4() {
	ns_print("Stub implementation for nv::gemcontrol::INvGemControl::Unknown4\n");
	return 0;
}
uint32_t nv::gemcontrol::INvGemControl::Unknown5() {
	ns_print("Stub implementation for nv::gemcontrol::INvGemControl::Unknown5\n");
	return 0;
}
uint32_t nv::gemcontrol::INvGemControl::Unknown6() {
	ns_print("Stub implementation for nv::gemcontrol::INvGemControl::Unknown6\n");
	return 0;
}
uint32_t nv::gemcontrol::INvGemControl::Unknown7() {
	ns_print("Stub implementation for nv::gemcontrol::INvGemControl::Unknown7\n");
	return 0;
}
#endif // DEFINE_STUBS
namespace nv::gemcoredump {
	class INvGemCoreDump : public IpcService {
	public:
		INvGemCoreDump() {}
		uint32_t Dispatch(IpcMessage *req, IpcMessage *resp) {
			switch(req->cmd_id) {
			case 0: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nv::gemcoredump::INvGemCoreDump::Unknown0\n");
				resp->error_code = Unknown0();
				return 0;
			}
			case 1: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nv::gemcoredump::INvGemCoreDump::Unknown1\n");
				resp->error_code = Unknown1();
				return 0;
			}
			case 2: {
				resp->GenBuf(0, 0, 0);
				ns_print("IPC message to nv::gemcoredump::INvGemCoreDump::Unknown2\n");
				resp->error_code = Unknown2();
				return 0;
			}
			default:
				ns_abort("Unknown message cmdId %u to interface nv::gemcoredump::INvGemCoreDump", req->cmd_id);
			}
		}
		uint32_t Unknown0();
		uint32_t Unknown1();
		uint32_t Unknown2();
	};
}
#ifdef DEFINE_STUBS
uint32_t nv::gemcoredump::INvGemCoreDump::Unknown0() {
	ns_print("Stub implementation for nv::gemcoredump::INvGemCoreDump::Unknown0\n");
	return 0;
}
uint32_t nv::gemcoredump::INvGemCoreDump::Unknown1() {
	ns_print("Stub implementation for nv::gemcoredump::INvGemCoreDump::Unknown1\n");
	return 0;
}
uint32_t nv::gemcoredump::INvGemCoreDump::Unknown2() {
	ns_print("Stub implementation for nv::gemcoredump::INvGemCoreDump::Unknown2\n");
	return 0;
}
#endif // DEFINE_STUBS
#endif // __IPCSTUBS_HPP__
